
usbser1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ab4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08007bc0  08007bc0  00017bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e6c  08007e6c  0002028c  2**0
                  CONTENTS
  4 .ARM          00000000  08007e6c  08007e6c  0002028c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e6c  08007e6c  0002028c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e6c  08007e6c  00017e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e70  08007e70  00017e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000028c  20000000  08007e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001754  2000028c  08008100  0002028c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200019e0  08008100  000219e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002028c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f6d7  00000000  00000000  000202b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003515  00000000  00000000  0002f98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00032ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  00033ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba57  00000000  00000000  000346f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001357b  00000000  00000000  0005014f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087e92  00000000  00000000  000636ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb55c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a14  00000000  00000000  000eb5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000028c 	.word	0x2000028c
 8000128:	00000000 	.word	0x00000000
 800012c:	08007ba8 	.word	0x08007ba8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000290 	.word	0x20000290
 8000148:	08007ba8 	.word	0x08007ba8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b3a      	ldr	r3, [pc, #232]	; (800025c <MX_GPIO_Init+0x100>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a39      	ldr	r2, [pc, #228]	; (800025c <MX_GPIO_Init+0x100>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b37      	ldr	r3, [pc, #220]	; (800025c <MX_GPIO_Init+0x100>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b34      	ldr	r3, [pc, #208]	; (800025c <MX_GPIO_Init+0x100>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a33      	ldr	r2, [pc, #204]	; (800025c <MX_GPIO_Init+0x100>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b31      	ldr	r3, [pc, #196]	; (800025c <MX_GPIO_Init+0x100>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001a0:	4b2e      	ldr	r3, [pc, #184]	; (800025c <MX_GPIO_Init+0x100>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a2d      	ldr	r2, [pc, #180]	; (800025c <MX_GPIO_Init+0x100>)
 80001a6:	f043 0308 	orr.w	r3, r3, #8
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b2b      	ldr	r3, [pc, #172]	; (800025c <MX_GPIO_Init+0x100>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0308 	and.w	r3, r3, #8
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001b8:	4b28      	ldr	r3, [pc, #160]	; (800025c <MX_GPIO_Init+0x100>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a27      	ldr	r2, [pc, #156]	; (800025c <MX_GPIO_Init+0x100>)
 80001be:	f043 0304 	orr.w	r3, r3, #4
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b25      	ldr	r3, [pc, #148]	; (800025c <MX_GPIO_Init+0x100>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0304 	and.w	r3, r3, #4
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Blinker_GPIO_Port, Blinker_Pin, GPIO_PIN_SET);
 80001d0:	2201      	movs	r2, #1
 80001d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d6:	4822      	ldr	r0, [pc, #136]	; (8000260 <MX_GPIO_Init+0x104>)
 80001d8:	f001 f839 	bl	800124e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80001dc:	2201      	movs	r2, #1
 80001de:	2138      	movs	r1, #56	; 0x38
 80001e0:	4820      	ldr	r0, [pc, #128]	; (8000264 <MX_GPIO_Init+0x108>)
 80001e2:	f001 f834 	bl	800124e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blinker_Pin;
 80001e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ec:	2301      	movs	r3, #1
 80001ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001f0:	2300      	movs	r3, #0
 80001f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001f4:	2302      	movs	r3, #2
 80001f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blinker_GPIO_Port, &GPIO_InitStruct);
 80001f8:	f107 0310 	add.w	r3, r7, #16
 80001fc:	4619      	mov	r1, r3
 80001fe:	4818      	ldr	r0, [pc, #96]	; (8000260 <MX_GPIO_Init+0x104>)
 8000200:	f000 fe8a 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = EncoderButton_Pin|Button1_Pin|Button2_Pin|Button3_Pin;
 8000204:	f247 0302 	movw	r3, #28674	; 0x7002
 8000208:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800020a:	2300      	movs	r3, #0
 800020c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800020e:	2301      	movs	r3, #1
 8000210:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000212:	f107 0310 	add.w	r3, r7, #16
 8000216:	4619      	mov	r1, r3
 8000218:	4812      	ldr	r0, [pc, #72]	; (8000264 <MX_GPIO_Init+0x108>)
 800021a:	f000 fe7d 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 800021e:	2338      	movs	r3, #56	; 0x38
 8000220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000222:	2311      	movs	r3, #17
 8000224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000226:	2300      	movs	r3, #0
 8000228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800022a:	2302      	movs	r3, #2
 800022c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800022e:	f107 0310 	add.w	r3, r7, #16
 8000232:	4619      	mov	r1, r3
 8000234:	480b      	ldr	r0, [pc, #44]	; (8000264 <MX_GPIO_Init+0x108>)
 8000236:	f000 fe6f 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin|ENC_DATA_Pin;
 800023a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800023e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000240:	2300      	movs	r3, #0
 8000242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000244:	2300      	movs	r3, #0
 8000246:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000248:	f107 0310 	add.w	r3, r7, #16
 800024c:	4619      	mov	r1, r3
 800024e:	4805      	ldr	r0, [pc, #20]	; (8000264 <MX_GPIO_Init+0x108>)
 8000250:	f000 fe62 	bl	8000f18 <HAL_GPIO_Init>

}
 8000254:	bf00      	nop
 8000256:	3720      	adds	r7, #32
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40021000 	.word	0x40021000
 8000260:	40011000 	.word	0x40011000
 8000264:	40010c00 	.word	0x40010c00

08000268 <uint8_toupper>:
//void UartPrintf(const char *format, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t uint8_toupper(uint8_t c){
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	71fb      	strb	r3, [r7, #7]
	if (c >= 'a' && c <= 'z') {
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	2b60      	cmp	r3, #96	; 0x60
 8000276:	d906      	bls.n	8000286 <uint8_toupper+0x1e>
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	2b7a      	cmp	r3, #122	; 0x7a
 800027c:	d803      	bhi.n	8000286 <uint8_toupper+0x1e>
		c = c ^ 0x20;
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	f083 0320 	eor.w	r3, r3, #32
 8000284:	71fb      	strb	r3, [r7, #7]
	}
	return c;
 8000286:	79fb      	ldrb	r3, [r7, #7]
}
 8000288:	4618      	mov	r0, r3
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
	...

08000294 <report_version>:
void report_version() {
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	UartPrintf("F0304;");
 8000298:	4802      	ldr	r0, [pc, #8]	; (80002a4 <report_version+0x10>)
 800029a:	f000 fa8e 	bl	80007ba <UartPrintf>
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	08007bc0 	.word	0x08007bc0

080002a8 <set_reg_val>:


void set_reg_val(uint8_t *reg, uint8_t *str){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
	unsigned int value;
	if (isxdigit(*str) && isxdigit(*(str + 1)))
 80002b2:	683b      	ldr	r3, [r7, #0]
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	3301      	adds	r3, #1
 80002b8:	4a10      	ldr	r2, [pc, #64]	; (80002fc <set_reg_val+0x54>)
 80002ba:	4413      	add	r3, r2
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d015      	beq.n	80002f2 <set_reg_val+0x4a>
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	3301      	adds	r3, #1
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	3301      	adds	r3, #1
 80002ce:	4a0b      	ldr	r2, [pc, #44]	; (80002fc <set_reg_val+0x54>)
 80002d0:	4413      	add	r3, r2
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d00a      	beq.n	80002f2 <set_reg_val+0x4a>
	{
		sscanf((char *)str, "%02X", &value);
 80002dc:	f107 030c 	add.w	r3, r7, #12
 80002e0:	461a      	mov	r2, r3
 80002e2:	4907      	ldr	r1, [pc, #28]	; (8000300 <set_reg_val+0x58>)
 80002e4:	6838      	ldr	r0, [r7, #0]
 80002e6:	f006 fb3f 	bl	8006968 <siscanf>
		*reg = (uint8_t) (value & 0xff);
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	b2da      	uxtb	r2, r3
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	701a      	strb	r2, [r3, #0]
	}
}
 80002f2:	bf00      	nop
 80002f4:	3710      	adds	r7, #16
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	08007cba 	.word	0x08007cba
 8000300:	08007bc8 	.word	0x08007bc8

08000304 <cmd_proc>:

void cmd_proc(uint8_t *buffer, uint16_t size) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b084      	sub	sp, #16
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	807b      	strh	r3, [r7, #2]
	// handle commands
	uint8_t *cp = buffer;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	60fb      	str	r3, [r7, #12]
	uint16_t i = size;
 8000314:	887b      	ldrh	r3, [r7, #2]
 8000316:	817b      	strh	r3, [r7, #10]

	if (size == 0)
 8000318:	887b      	ldrh	r3, [r7, #2]
 800031a:	2b00      	cmp	r3, #0
 800031c:	f000 80e1 	beq.w	80004e2 <cmd_proc+0x1de>
		return;

	// uppercase everything
	while (i--) {
 8000320:	e00b      	b.n	800033a <cmd_proc+0x36>
		*cp = uint8_toupper(*cp);
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff9e 	bl	8000268 <uint8_toupper>
 800032c:	4603      	mov	r3, r0
 800032e:	461a      	mov	r2, r3
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	701a      	strb	r2, [r3, #0]
		cp++;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	3301      	adds	r3, #1
 8000338:	60fb      	str	r3, [r7, #12]
	while (i--) {
 800033a:	897b      	ldrh	r3, [r7, #10]
 800033c:	1e5a      	subs	r2, r3, #1
 800033e:	817a      	strh	r2, [r7, #10]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d1ee      	bne.n	8000322 <cmd_proc+0x1e>
	}

	switch (buffer[0]) {
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	2b5a      	cmp	r3, #90	; 0x5a
 800034a:	d00f      	beq.n	800036c <cmd_proc+0x68>
 800034c:	2b5a      	cmp	r3, #90	; 0x5a
 800034e:	f300 80ca 	bgt.w	80004e6 <cmd_proc+0x1e2>
 8000352:	2b46      	cmp	r3, #70	; 0x46
 8000354:	d003      	beq.n	800035e <cmd_proc+0x5a>
 8000356:	2b49      	cmp	r3, #73	; 0x49
 8000358:	f000 8083 	beq.w	8000462 <cmd_proc+0x15e>
		if (buffer[3] == '0') {
			HAL_GPIO_WritePin( LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
		}
		break;
	default:
		break;
 800035c:	e0c3      	b.n	80004e6 <cmd_proc+0x1e2>
		if (size != 2)
 800035e:	887b      	ldrh	r3, [r7, #2]
 8000360:	2b02      	cmp	r3, #2
 8000362:	f040 80c2 	bne.w	80004ea <cmd_proc+0x1e6>
		report_version();
 8000366:	f7ff ff95 	bl	8000294 <report_version>
		break;
 800036a:	e0c7      	b.n	80004fc <cmd_proc+0x1f8>
		if (size < 3 || size > 5)
 800036c:	887b      	ldrh	r3, [r7, #2]
 800036e:	2b02      	cmp	r3, #2
 8000370:	f240 80bd 	bls.w	80004ee <cmd_proc+0x1ea>
 8000374:	887b      	ldrh	r3, [r7, #2]
 8000376:	2b05      	cmp	r3, #5
 8000378:	f200 80b9 	bhi.w	80004ee <cmd_proc+0x1ea>
		uint8_t is_set = (size == 5);
 800037c:	887b      	ldrh	r3, [r7, #2]
 800037e:	2b05      	cmp	r3, #5
 8000380:	bf0c      	ite	eq
 8000382:	2301      	moveq	r3, #1
 8000384:	2300      	movne	r3, #0
 8000386:	b2db      	uxtb	r3, r3
 8000388:	727b      	strb	r3, [r7, #9]
		switch (buffer[1]) {
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	3301      	adds	r3, #1
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	3b43      	subs	r3, #67	; 0x43
 8000392:	2b0f      	cmp	r3, #15
 8000394:	f200 80ad 	bhi.w	80004f2 <cmd_proc+0x1ee>
 8000398:	a201      	add	r2, pc, #4	; (adr r2, 80003a0 <cmd_proc+0x9c>)
 800039a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039e:	bf00      	nop
 80003a0:	08000421 	.word	0x08000421
 80003a4:	080004f3 	.word	0x080004f3
 80003a8:	080003e1 	.word	0x080003e1
 80003ac:	080004f3 	.word	0x080004f3
 80003b0:	080004f3 	.word	0x080004f3
 80003b4:	080004f3 	.word	0x080004f3
 80003b8:	080004f3 	.word	0x080004f3
 80003bc:	080004f3 	.word	0x080004f3
 80003c0:	080004f3 	.word	0x080004f3
 80003c4:	08000441 	.word	0x08000441
 80003c8:	080004f3 	.word	0x080004f3
 80003cc:	080004f3 	.word	0x080004f3
 80003d0:	080004f3 	.word	0x080004f3
 80003d4:	080004f3 	.word	0x080004f3
 80003d8:	080004f3 	.word	0x080004f3
 80003dc:	08000401 	.word	0x08000401
			if (is_set) {
 80003e0:	7a7b      	ldrb	r3, [r7, #9]
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d005      	beq.n	80003f2 <cmd_proc+0xee>
				set_reg_val((uint8_t*) &reg_e, &buffer[2]);
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	3302      	adds	r3, #2
 80003ea:	4619      	mov	r1, r3
 80003ec:	4845      	ldr	r0, [pc, #276]	; (8000504 <cmd_proc+0x200>)
 80003ee:	f7ff ff5b 	bl	80002a8 <set_reg_val>
			UartPrintf("ZE%02X;", reg_e);
 80003f2:	4b44      	ldr	r3, [pc, #272]	; (8000504 <cmd_proc+0x200>)
 80003f4:	781b      	ldrb	r3, [r3, #0]
 80003f6:	4619      	mov	r1, r3
 80003f8:	4843      	ldr	r0, [pc, #268]	; (8000508 <cmd_proc+0x204>)
 80003fa:	f000 f9de 	bl	80007ba <UartPrintf>
			break;
 80003fe:	e02f      	b.n	8000460 <cmd_proc+0x15c>
			if (is_set) {
 8000400:	7a7b      	ldrb	r3, [r7, #9]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d005      	beq.n	8000412 <cmd_proc+0x10e>
				set_reg_val((uint8_t*) &reg_r, &buffer[2]);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	3302      	adds	r3, #2
 800040a:	4619      	mov	r1, r3
 800040c:	483f      	ldr	r0, [pc, #252]	; (800050c <cmd_proc+0x208>)
 800040e:	f7ff ff4b 	bl	80002a8 <set_reg_val>
			UartPrintf("ZR%02X;", reg_r);
 8000412:	4b3e      	ldr	r3, [pc, #248]	; (800050c <cmd_proc+0x208>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	4619      	mov	r1, r3
 8000418:	483d      	ldr	r0, [pc, #244]	; (8000510 <cmd_proc+0x20c>)
 800041a:	f000 f9ce 	bl	80007ba <UartPrintf>
			break;
 800041e:	e01f      	b.n	8000460 <cmd_proc+0x15c>
			if (is_set) {
 8000420:	7a7b      	ldrb	r3, [r7, #9]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d005      	beq.n	8000432 <cmd_proc+0x12e>
				set_reg_val((uint8_t*) &reg_c, &buffer[2]);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	3302      	adds	r3, #2
 800042a:	4619      	mov	r1, r3
 800042c:	4839      	ldr	r0, [pc, #228]	; (8000514 <cmd_proc+0x210>)
 800042e:	f7ff ff3b 	bl	80002a8 <set_reg_val>
			UartPrintf("ZC%02X;", reg_c);
 8000432:	4b38      	ldr	r3, [pc, #224]	; (8000514 <cmd_proc+0x210>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	4619      	mov	r1, r3
 8000438:	4837      	ldr	r0, [pc, #220]	; (8000518 <cmd_proc+0x214>)
 800043a:	f000 f9be 	bl	80007ba <UartPrintf>
			break;
 800043e:	e00f      	b.n	8000460 <cmd_proc+0x15c>
			if (is_set) {
 8000440:	7a7b      	ldrb	r3, [r7, #9]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d005      	beq.n	8000452 <cmd_proc+0x14e>
				set_reg_val((uint8_t*) &reg_l, &buffer[2]);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	3302      	adds	r3, #2
 800044a:	4619      	mov	r1, r3
 800044c:	4833      	ldr	r0, [pc, #204]	; (800051c <cmd_proc+0x218>)
 800044e:	f7ff ff2b 	bl	80002a8 <set_reg_val>
			UartPrintf("ZL%02X;", reg_l);
 8000452:	4b32      	ldr	r3, [pc, #200]	; (800051c <cmd_proc+0x218>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	4619      	mov	r1, r3
 8000458:	4831      	ldr	r0, [pc, #196]	; (8000520 <cmd_proc+0x21c>)
 800045a:	f000 f9ae 	bl	80007ba <UartPrintf>
			break;
 800045e:	bf00      	nop
		break;
 8000460:	e047      	b.n	80004f2 <cmd_proc+0x1ee>
		if (size != 5)
 8000462:	887b      	ldrh	r3, [r7, #2]
 8000464:	2b05      	cmp	r3, #5
 8000466:	d146      	bne.n	80004f6 <cmd_proc+0x1f2>
		if (buffer[1] == '1') {
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3301      	adds	r3, #1
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b31      	cmp	r3, #49	; 0x31
 8000470:	d104      	bne.n	800047c <cmd_proc+0x178>
			HAL_GPIO_WritePin( LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8000472:	2200      	movs	r2, #0
 8000474:	2108      	movs	r1, #8
 8000476:	482b      	ldr	r0, [pc, #172]	; (8000524 <cmd_proc+0x220>)
 8000478:	f000 fee9 	bl	800124e <HAL_GPIO_WritePin>
		if (buffer[2] == '1') {
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	3302      	adds	r3, #2
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b31      	cmp	r3, #49	; 0x31
 8000484:	d104      	bne.n	8000490 <cmd_proc+0x18c>
			HAL_GPIO_WritePin( LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000486:	2200      	movs	r2, #0
 8000488:	2110      	movs	r1, #16
 800048a:	4826      	ldr	r0, [pc, #152]	; (8000524 <cmd_proc+0x220>)
 800048c:	f000 fedf 	bl	800124e <HAL_GPIO_WritePin>
		if (buffer[3] == '1') {
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3303      	adds	r3, #3
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b31      	cmp	r3, #49	; 0x31
 8000498:	d104      	bne.n	80004a4 <cmd_proc+0x1a0>
			HAL_GPIO_WritePin( LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2120      	movs	r1, #32
 800049e:	4821      	ldr	r0, [pc, #132]	; (8000524 <cmd_proc+0x220>)
 80004a0:	f000 fed5 	bl	800124e <HAL_GPIO_WritePin>
		if (buffer[1] == '0') {
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3301      	adds	r3, #1
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b30      	cmp	r3, #48	; 0x30
 80004ac:	d104      	bne.n	80004b8 <cmd_proc+0x1b4>
			HAL_GPIO_WritePin( LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2108      	movs	r1, #8
 80004b2:	481c      	ldr	r0, [pc, #112]	; (8000524 <cmd_proc+0x220>)
 80004b4:	f000 fecb 	bl	800124e <HAL_GPIO_WritePin>
		if (buffer[2] == '0') {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	3302      	adds	r3, #2
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b30      	cmp	r3, #48	; 0x30
 80004c0:	d104      	bne.n	80004cc <cmd_proc+0x1c8>
			HAL_GPIO_WritePin( LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80004c2:	2201      	movs	r2, #1
 80004c4:	2110      	movs	r1, #16
 80004c6:	4817      	ldr	r0, [pc, #92]	; (8000524 <cmd_proc+0x220>)
 80004c8:	f000 fec1 	bl	800124e <HAL_GPIO_WritePin>
		if (buffer[3] == '0') {
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3303      	adds	r3, #3
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	2b30      	cmp	r3, #48	; 0x30
 80004d4:	d111      	bne.n	80004fa <cmd_proc+0x1f6>
			HAL_GPIO_WritePin( LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	2120      	movs	r1, #32
 80004da:	4812      	ldr	r0, [pc, #72]	; (8000524 <cmd_proc+0x220>)
 80004dc:	f000 feb7 	bl	800124e <HAL_GPIO_WritePin>
		break;
 80004e0:	e00b      	b.n	80004fa <cmd_proc+0x1f6>
		return;
 80004e2:	bf00      	nop
 80004e4:	e00a      	b.n	80004fc <cmd_proc+0x1f8>
		break;
 80004e6:	bf00      	nop
 80004e8:	e008      	b.n	80004fc <cmd_proc+0x1f8>
			return;
 80004ea:	bf00      	nop
 80004ec:	e006      	b.n	80004fc <cmd_proc+0x1f8>
			return;  //
 80004ee:	bf00      	nop
 80004f0:	e004      	b.n	80004fc <cmd_proc+0x1f8>
		break;
 80004f2:	bf00      	nop
 80004f4:	e002      	b.n	80004fc <cmd_proc+0x1f8>
			return;
 80004f6:	bf00      	nop
 80004f8:	e000      	b.n	80004fc <cmd_proc+0x1f8>
		break;
 80004fa:	bf00      	nop
	}
}
 80004fc:	3710      	adds	r7, #16
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000000 	.word	0x20000000
 8000508:	08007bd0 	.word	0x08007bd0
 800050c:	20000001 	.word	0x20000001
 8000510:	08007bd8 	.word	0x08007bd8
 8000514:	20000002 	.word	0x20000002
 8000518:	08007be0 	.word	0x08007be0
 800051c:	20000003 	.word	0x20000003
 8000520:	08007be8 	.word	0x08007be8
 8000524:	40010c00 	.word	0x40010c00

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	f5ad 6d07 	sub.w	sp, sp, #2160	; 0x870
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t event[EVT_QWIDTH];
	uint8_t usb_data[USB_BUFFER_SIZE];
	uint8_t single_cmd[CMD_BUFFER_SIZE];
	RingBufferU8 rb1;
	uint8_t saw_terminator=0;
 8000530:	2300      	movs	r3, #0
 8000532:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
	int len = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	f8c7 3868 	str.w	r3, [r7, #2152]	; 0x868

	//uint8_t usb_payload[MAX_PAYLOAD];

	RingBufferU8_init(&rb1, usb_data, USB_BUFFER_SIZE);
 800053c:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 8000540:	463b      	mov	r3, r7
 8000542:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000546:	4618      	mov	r0, r3
 8000548:	f004 fc2e 	bl	8004da8 <RingBufferU8_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054c:	f000 fb7a 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000550:	f000 f8d8 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000554:	f7ff fe02 	bl	800015c <MX_GPIO_Init>
  MX_USB_PCD_Init();
 8000558:	f000 fb0e 	bl	8000b78 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 800055c:	f004 fd5a 	bl	8005014 <MX_USB_DEVICE_Init>
	// initialize the pushbutton handler with mask byte.
	PushButton_Init(0x0F);
 8000560:	200f      	movs	r0, #15
 8000562:	f004 f933 	bl	80047cc <PushButton_Init>

	// start a timer routine: 10msec period, perpetual
	//result = UsrTimer_Set(10, 0, UartRxTask);
	// UART output test
	report_version();
 8000566:	f7ff fe95 	bl	8000294 <report_version>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		// check event queue
		if (Evt_DeQueue(event)) {
 800056a:	f607 0318 	addw	r3, r7, #2072	; 0x818
 800056e:	4618      	mov	r0, r3
 8000570:	f004 f8e6 	bl	8004740 <Evt_DeQueue>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	f000 80a5 	beq.w	80006c6 <main+0x19e>
			switch (event[0]) {
 800057c:	f897 3818 	ldrb.w	r3, [r7, #2072]	; 0x818
 8000580:	2b40      	cmp	r3, #64	; 0x40
 8000582:	d06b      	beq.n	800065c <main+0x134>
 8000584:	2b40      	cmp	r3, #64	; 0x40
 8000586:	f300 80a2 	bgt.w	80006ce <main+0x1a6>
 800058a:	2b31      	cmp	r3, #49	; 0x31
 800058c:	d016      	beq.n	80005bc <main+0x94>
 800058e:	2b31      	cmp	r3, #49	; 0x31
 8000590:	f300 809d 	bgt.w	80006ce <main+0x1a6>
 8000594:	2b10      	cmp	r3, #16
 8000596:	d020      	beq.n	80005da <main+0xb2>
 8000598:	2b30      	cmp	r3, #48	; 0x30
 800059a:	f040 8098 	bne.w	80006ce <main+0x1a6>

			case EVT_ENCODER_UP:
				// event[1]: encoder_id
				// event[2]: encoder_delta
				//UartPrintf("\r\nEncoder UP %d: delta %d", event[1], event[2]);
				if (event[2] == 1) {
 800059e:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d103      	bne.n	80005ae <main+0x86>
					UartPrintf("U;");
 80005a6:	484d      	ldr	r0, [pc, #308]	; (80006dc <main+0x1b4>)
 80005a8:	f000 f907 	bl	80007ba <UartPrintf>
				} else {
					UartPrintf("U%02X;", event[2]);
				}
				break;
 80005ac:	e094      	b.n	80006d8 <main+0x1b0>
					UartPrintf("U%02X;", event[2]);
 80005ae:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 80005b2:	4619      	mov	r1, r3
 80005b4:	484a      	ldr	r0, [pc, #296]	; (80006e0 <main+0x1b8>)
 80005b6:	f000 f900 	bl	80007ba <UartPrintf>
				break;
 80005ba:	e08d      	b.n	80006d8 <main+0x1b0>

			case EVT_ENCODER_DOWN:
				// event[1]: encoder_id
				// event[2]: encoder_delta
				//UartPrintf("\r\nEncoder DOWN %d: delta %d", event[1], event[2]);
				if (event[2] == 1) {
 80005bc:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d103      	bne.n	80005cc <main+0xa4>
					UartPrintf("D;");
 80005c4:	4847      	ldr	r0, [pc, #284]	; (80006e4 <main+0x1bc>)
 80005c6:	f000 f8f8 	bl	80007ba <UartPrintf>
				} else {
					UartPrintf("D%02X;",event[2]);
				}
				break;
 80005ca:	e085      	b.n	80006d8 <main+0x1b0>
					UartPrintf("D%02X;",event[2]);
 80005cc:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 80005d0:	4619      	mov	r1, r3
 80005d2:	4845      	ldr	r0, [pc, #276]	; (80006e8 <main+0x1c0>)
 80005d4:	f000 f8f1 	bl	80007ba <UartPrintf>
				break;
 80005d8:	e07e      	b.n	80006d8 <main+0x1b0>
			// event[1]: button id
			// event[2]: PBTN_SCLK, _DCLK, _TCLK, _LCLK, _DOWN, _ENDN

			case EVT_PBTN_INPUT:
				//UartPrintf("\r\nButton id %d, event %d\r\n", event[1], event[2]);
				if (event[2] == PBTN_SCLK) { // single click event
 80005da:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d10e      	bne.n	8000600 <main+0xd8>
					if (event[1] == 0) {
 80005e2:	f897 3819 	ldrb.w	r3, [r7, #2073]	; 0x819
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d103      	bne.n	80005f2 <main+0xca>
						UartPrintf("S;");
 80005ea:	4840      	ldr	r0, [pc, #256]	; (80006ec <main+0x1c4>)
 80005ec:	f000 f8e5 	bl	80007ba <UartPrintf>
				} else if (event[2] == PBTN_ENDN) {
					//UartPrintf("\r\nButton %d: has been released.", event[1]);
					//PushButton_SetMode(PUSHBTN_MODE_CLICK, true);
					//UartPrintf("\r\n --> Switch to click mode.");
				}
				break;
 80005f0:	e06f      	b.n	80006d2 <main+0x1aa>
						UartPrintf("X%1dS;", event[1]);
 80005f2:	f897 3819 	ldrb.w	r3, [r7, #2073]	; 0x819
 80005f6:	4619      	mov	r1, r3
 80005f8:	483d      	ldr	r0, [pc, #244]	; (80006f0 <main+0x1c8>)
 80005fa:	f000 f8de 	bl	80007ba <UartPrintf>
				break;
 80005fe:	e068      	b.n	80006d2 <main+0x1aa>
				} else if (event[2] == PBTN_LCLK) { // long click event
 8000600:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 8000604:	2b02      	cmp	r3, #2
 8000606:	d10e      	bne.n	8000626 <main+0xfe>
					if (event[1] == 0) {
 8000608:	f897 3819 	ldrb.w	r3, [r7, #2073]	; 0x819
 800060c:	2b00      	cmp	r3, #0
 800060e:	d103      	bne.n	8000618 <main+0xf0>
						UartPrintf("L;");
 8000610:	4838      	ldr	r0, [pc, #224]	; (80006f4 <main+0x1cc>)
 8000612:	f000 f8d2 	bl	80007ba <UartPrintf>
				break;
 8000616:	e05c      	b.n	80006d2 <main+0x1aa>
						UartPrintf("X%1dL;", event[1]);
 8000618:	f897 3819 	ldrb.w	r3, [r7, #2073]	; 0x819
 800061c:	4619      	mov	r1, r3
 800061e:	4836      	ldr	r0, [pc, #216]	; (80006f8 <main+0x1d0>)
 8000620:	f000 f8cb 	bl	80007ba <UartPrintf>
				break;
 8000624:	e055      	b.n	80006d2 <main+0x1aa>
				} else if (event[2] == PBTN_DCLK) { // double click
 8000626:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 800062a:	2b03      	cmp	r3, #3
 800062c:	d10e      	bne.n	800064c <main+0x124>
					if (event[1] == 0) {
 800062e:	f897 3819 	ldrb.w	r3, [r7, #2073]	; 0x819
 8000632:	2b00      	cmp	r3, #0
 8000634:	d103      	bne.n	800063e <main+0x116>
						UartPrintf("C;");
 8000636:	4831      	ldr	r0, [pc, #196]	; (80006fc <main+0x1d4>)
 8000638:	f000 f8bf 	bl	80007ba <UartPrintf>
				break;
 800063c:	e049      	b.n	80006d2 <main+0x1aa>
						UartPrintf("X%1dC;", event[1]);
 800063e:	f897 3819 	ldrb.w	r3, [r7, #2073]	; 0x819
 8000642:	4619      	mov	r1, r3
 8000644:	482e      	ldr	r0, [pc, #184]	; (8000700 <main+0x1d8>)
 8000646:	f000 f8b8 	bl	80007ba <UartPrintf>
				break;
 800064a:	e042      	b.n	80006d2 <main+0x1aa>
				} else if (event[2] == PBTN_TCLK) {
 800064c:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 8000650:	2b04      	cmp	r3, #4
 8000652:	d03e      	beq.n	80006d2 <main+0x1aa>
				} else if (event[2] == PBTN_DOWN) {
 8000654:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 8000658:	2b05      	cmp	r3, #5
				break;
 800065a:	e03a      	b.n	80006d2 <main+0x1aa>

			case EVT_USB_DATA:
				// evt[1] = size
				// evt[16]..[16+USB_MAX_PAYLOAD] is data
				saw_terminator = RingBufferU8_write(&rb1, (const unsigned char *)&event[16], event[1], ';');
 800065c:	f897 3819 	ldrb.w	r3, [r7, #2073]	; 0x819
 8000660:	b29a      	uxth	r2, r3
 8000662:	f607 0318 	addw	r3, r7, #2072	; 0x818
 8000666:	f103 0110 	add.w	r1, r3, #16
 800066a:	4638      	mov	r0, r7
 800066c:	233b      	movs	r3, #59	; 0x3b
 800066e:	f004 fc34 	bl	8004eda <RingBufferU8_write>
 8000672:	4603      	mov	r3, r0
 8000674:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f

				// handle the commands
				if (saw_terminator) {
 8000678:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 800067c:	2b00      	cmp	r3, #0
 800067e:	d02a      	beq.n	80006d6 <main+0x1ae>
					while ((len = RingBufferU8_readUntil(&rb1, single_cmd, CMD_BUFFER_SIZE, ';'))) {
 8000680:	e011      	b.n	80006a6 <main+0x17e>
						single_cmd[len] = 0;
 8000682:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8000686:	f6a3 0258 	subw	r2, r3, #2136	; 0x858
 800068a:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 800068e:	4413      	add	r3, r2
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]
						cmd_proc(single_cmd, len);
 8000694:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8000698:	b29a      	uxth	r2, r3
 800069a:	f107 0318 	add.w	r3, r7, #24
 800069e:	4611      	mov	r1, r2
 80006a0:	4618      	mov	r0, r3
 80006a2:	f7ff fe2f 	bl	8000304 <cmd_proc>
					while ((len = RingBufferU8_readUntil(&rb1, single_cmd, CMD_BUFFER_SIZE, ';'))) {
 80006a6:	f107 0118 	add.w	r1, r7, #24
 80006aa:	4638      	mov	r0, r7
 80006ac:	233b      	movs	r3, #59	; 0x3b
 80006ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006b2:	f004 fc42 	bl	8004f3a <RingBufferU8_readUntil>
 80006b6:	4603      	mov	r3, r0
 80006b8:	f8c7 3868 	str.w	r3, [r7, #2152]	; 0x868
 80006bc:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d1de      	bne.n	8000682 <main+0x15a>
						//UartPrintf("USB cmd: [%s]\n",single_cmd);
					}
				}
				break;
 80006c4:	e007      	b.n	80006d6 <main+0x1ae>
			default:
				break;
			}
		} else {
			// delay here is recommended not to call Evt_DeQueue too frequently
			HAL_Delay(10);
 80006c6:	200a      	movs	r0, #10
 80006c8:	f000 fb1e 	bl	8000d08 <HAL_Delay>
 80006cc:	e74d      	b.n	800056a <main+0x42>
				break;
 80006ce:	bf00      	nop
 80006d0:	e74b      	b.n	800056a <main+0x42>
				break;
 80006d2:	bf00      	nop
 80006d4:	e749      	b.n	800056a <main+0x42>
				break;
 80006d6:	bf00      	nop
		if (Evt_DeQueue(event)) {
 80006d8:	e747      	b.n	800056a <main+0x42>
 80006da:	bf00      	nop
 80006dc:	08007bf0 	.word	0x08007bf0
 80006e0:	08007bf4 	.word	0x08007bf4
 80006e4:	08007bfc 	.word	0x08007bfc
 80006e8:	08007c00 	.word	0x08007c00
 80006ec:	08007c08 	.word	0x08007c08
 80006f0:	08007c0c 	.word	0x08007c0c
 80006f4:	08007c14 	.word	0x08007c14
 80006f8:	08007c18 	.word	0x08007c18
 80006fc:	08007c20 	.word	0x08007c20
 8000700:	08007c24 	.word	0x08007c24

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070e:	2228      	movs	r2, #40	; 0x28
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f006 f8ec 	bl	80068f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000734:	2301      	movs	r3, #1
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000738:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800073c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000742:	2301      	movs	r3, #1
 8000744:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000746:	2302      	movs	r3, #2
 8000748:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800074a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800074e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000750:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800075a:	4618      	mov	r0, r3
 800075c:	f001 f89e 	bl	800189c <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000766:	f000 f95b 	bl	8000a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076a:	230f      	movs	r3, #15
 800076c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	2300      	movs	r3, #0
 8000774:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000776:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800077a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	2101      	movs	r1, #1
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fb0a 	bl	8001da0 <HAL_RCC_ClockConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000792:	f000 f945 	bl	8000a20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000796:	2310      	movs	r3, #16
 8000798:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800079a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800079e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 fc58 	bl	8002058 <HAL_RCCEx_PeriphCLKConfig>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007ae:	f000 f937 	bl	8000a20 <Error_Handler>
  }
}
 80007b2:	bf00      	nop
 80007b4:	3750      	adds	r7, #80	; 0x50
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <UartPrintf>:
/* USER CODE BEGIN 4 */
/** Printf() style UART output. Check the standard c library that comes
 * with the compiler for the scope of the format string it supports.
 */
void UartPrintf(const char *format, ...)
{
 80007ba:	b40f      	push	{r0, r1, r2, r3}
 80007bc:	b580      	push	{r7, lr}
 80007be:	b0a2      	sub	sp, #136	; 0x88
 80007c0:	af00      	add	r7, sp, #0
	char buffer[128];
	uint16_t size;
	va_list args;

	va_start(args, format);
 80007c2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80007c6:	603b      	str	r3, [r7, #0]
	size = vsprintf(buffer, format, args);
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80007d0:	4618      	mov	r0, r3
 80007d2:	f006 f90b 	bl	80069ec <vsiprintf>
 80007d6:	4603      	mov	r3, r0
 80007d8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	va_end(args);
	CDC_Transmit(1,(uint8_t*)buffer, size);
 80007dc:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4619      	mov	r1, r3
 80007e4:	2001      	movs	r0, #1
 80007e6:	f004 fd6b 	bl	80052c0 <CDC_Transmit>
	//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, size, 1000);
}
 80007ea:	bf00      	nop
 80007ec:	3788      	adds	r7, #136	; 0x88
 80007ee:	46bd      	mov	sp, r7
 80007f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <PushButton_Read>:
 * button is released.
 *
 * \return	pushbutton state packed in a uint8_t.
 */
uint8_t PushButton_Read()
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
	uint8_t buttons = 0;
 80007fe:	2300      	movs	r3, #0
 8000800:	71fb      	strb	r3, [r7, #7]
	// button pushed
	if (!HAL_GPIO_ReadPin(EncoderButton_GPIO_Port, EncoderButton_Pin))
 8000802:	2102      	movs	r1, #2
 8000804:	4819      	ldr	r0, [pc, #100]	; (800086c <PushButton_Read+0x74>)
 8000806:	f000 fd0b 	bl	8001220 <HAL_GPIO_ReadPin>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d103      	bne.n	8000818 <PushButton_Read+0x20>
	{
		buttons |= 1;
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	f043 0301 	orr.w	r3, r3, #1
 8000816:	71fb      	strb	r3, [r7, #7]
	}
	if (!HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin)) {
 8000818:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800081c:	4813      	ldr	r0, [pc, #76]	; (800086c <PushButton_Read+0x74>)
 800081e:	f000 fcff 	bl	8001220 <HAL_GPIO_ReadPin>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d103      	bne.n	8000830 <PushButton_Read+0x38>
		buttons |= 2;
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f043 0302 	orr.w	r3, r3, #2
 800082e:	71fb      	strb	r3, [r7, #7]
	}
	if (!HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin)) {
 8000830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000834:	480d      	ldr	r0, [pc, #52]	; (800086c <PushButton_Read+0x74>)
 8000836:	f000 fcf3 	bl	8001220 <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d103      	bne.n	8000848 <PushButton_Read+0x50>
		buttons |= 4;
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	f043 0304 	orr.w	r3, r3, #4
 8000846:	71fb      	strb	r3, [r7, #7]
	}
	if (!HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin)) {
 8000848:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800084c:	4807      	ldr	r0, [pc, #28]	; (800086c <PushButton_Read+0x74>)
 800084e:	f000 fce7 	bl	8001220 <HAL_GPIO_ReadPin>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d103      	bne.n	8000860 <PushButton_Read+0x68>
		buttons |= 8;
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	f043 0308 	orr.w	r3, r3, #8
 800085e:	71fb      	strb	r3, [r7, #7]
	}
	//if (buttons) {
	//	UartPrintf("Buttons! %02x",buttons);
	//}

	return buttons;
 8000860:	79fb      	ldrb	r3, [r7, #7]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40010c00 	.word	0x40010c00

08000870 <encoder1_read>:

// call this from the systick interrupt every millisecond
// modified from the original code by dannyf
// at https://github.com/dannyf00/My-MCU-Libraries---2nd-try/blob/master/encoder1.c
int encoder1_read(void)
{
 8000870:	b598      	push	{r3, r4, r7, lr}
 8000872:	af00      	add	r7, sp, #0
  volatile static uint8_t ABs = 0;
  ABs = (ABs << 2) & 0x0f; //left 2 bits now contain the previous AB key read-out;
 8000874:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <encoder1_read+0x68>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	b2db      	uxtb	r3, r3
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 030f 	and.w	r3, r3, #15
 8000882:	b2da      	uxtb	r2, r3
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <encoder1_read+0x68>)
 8000886:	701a      	strb	r2, [r3, #0]
  ABs |= (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) << 1) | HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 8000888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800088c:	4813      	ldr	r0, [pc, #76]	; (80008dc <encoder1_read+0x6c>)
 800088e:	f000 fcc7 	bl	8001220 <HAL_GPIO_ReadPin>
 8000892:	4603      	mov	r3, r0
 8000894:	005c      	lsls	r4, r3, #1
 8000896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800089a:	4810      	ldr	r0, [pc, #64]	; (80008dc <encoder1_read+0x6c>)
 800089c:	f000 fcc0 	bl	8001220 <HAL_GPIO_ReadPin>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4323      	orrs	r3, r4
 80008a4:	b25a      	sxtb	r2, r3
 80008a6:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <encoder1_read+0x68>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	b25b      	sxtb	r3, r3
 80008ae:	4313      	orrs	r3, r2
 80008b0:	b25b      	sxtb	r3, r3
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <encoder1_read+0x68>)
 80008b6:	701a      	strb	r2, [r3, #0]
  switch (ABs)
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <encoder1_read+0x68>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b0d      	cmp	r3, #13
 80008c0:	d002      	beq.n	80008c8 <encoder1_read+0x58>
 80008c2:	2b0e      	cmp	r3, #14
 80008c4:	d002      	beq.n	80008cc <encoder1_read+0x5c>
 80008c6:	e004      	b.n	80008d2 <encoder1_read+0x62>
  {
    case 0x0d:
      return +1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	e003      	b.n	80008d4 <encoder1_read+0x64>
      break;
    case 0x0e:
      return -1;
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295
 80008d0:	e000      	b.n	80008d4 <encoder1_read+0x64>
      break;
  }
  return 0;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	bd98      	pop	{r3, r4, r7, pc}
 80008d8:	200002a8 	.word	0x200002a8
 80008dc:	40010c00 	.word	0x40010c00

080008e0 <encoder1_routine_1ms>:
}

#define MAX_ENCODER_INTERVAL 100
#define MAX_ENCODER_DIVIDER 25

void encoder1_routine_1ms() {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b096      	sub	sp, #88	; 0x58
 80008e4:	af00      	add	r7, sp, #0
	static unsigned int msecs_since_last;
	static int duration = 0;
	static int encoder_1_value = 0;
	static int delta = 0;

	uint8_t mult = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	uint8_t event[EVT_QWIDTH];

	// increment duration
	duration--;
 80008ec:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <encoder1_routine_1ms+0xe8>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	4a35      	ldr	r2, [pc, #212]	; (80009c8 <encoder1_routine_1ms+0xe8>)
 80008f4:	6013      	str	r3, [r2, #0]

	msecs_since_last++;
 80008f6:	4b35      	ldr	r3, [pc, #212]	; (80009cc <encoder1_routine_1ms+0xec>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	3301      	adds	r3, #1
 80008fc:	4a33      	ldr	r2, [pc, #204]	; (80009cc <encoder1_routine_1ms+0xec>)
 80008fe:	6013      	str	r3, [r2, #0]
	if (msecs_since_last > MAX_ENCODER_INTERVAL) msecs_since_last = MAX_ENCODER_INTERVAL;
 8000900:	4b32      	ldr	r3, [pc, #200]	; (80009cc <encoder1_routine_1ms+0xec>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b64      	cmp	r3, #100	; 0x64
 8000906:	d902      	bls.n	800090e <encoder1_routine_1ms+0x2e>
 8000908:	4b30      	ldr	r3, [pc, #192]	; (80009cc <encoder1_routine_1ms+0xec>)
 800090a:	2264      	movs	r2, #100	; 0x64
 800090c:	601a      	str	r2, [r3, #0]
	mult = msecs_since_last >= MAX_ENCODER_INTERVAL ? 1 : (uint8_t)((MAX_ENCODER_INTERVAL - msecs_since_last)/ MAX_ENCODER_DIVIDER)+1;
 800090e:	4b2f      	ldr	r3, [pc, #188]	; (80009cc <encoder1_routine_1ms+0xec>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b63      	cmp	r3, #99	; 0x63
 8000914:	d80b      	bhi.n	800092e <encoder1_routine_1ms+0x4e>
 8000916:	4b2d      	ldr	r3, [pc, #180]	; (80009cc <encoder1_routine_1ms+0xec>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 800091e:	4a2c      	ldr	r2, [pc, #176]	; (80009d0 <encoder1_routine_1ms+0xf0>)
 8000920:	fba2 2303 	umull	r2, r3, r2, r3
 8000924:	08db      	lsrs	r3, r3, #3
 8000926:	b2db      	uxtb	r3, r3
 8000928:	3301      	adds	r3, #1
 800092a:	b2db      	uxtb	r3, r3
 800092c:	e000      	b.n	8000930 <encoder1_routine_1ms+0x50>
 800092e:	2301      	movs	r3, #1
 8000930:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	// read encoder values
	delta = encoder1_read();
 8000934:	f7ff ff9c 	bl	8000870 <encoder1_read>
 8000938:	4603      	mov	r3, r0
 800093a:	4a26      	ldr	r2, [pc, #152]	; (80009d4 <encoder1_routine_1ms+0xf4>)
 800093c:	6013      	str	r3, [r2, #0]
	if (delta) msecs_since_last = 0;
 800093e:	4b25      	ldr	r3, [pc, #148]	; (80009d4 <encoder1_routine_1ms+0xf4>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d002      	beq.n	800094c <encoder1_routine_1ms+0x6c>
 8000946:	4b21      	ldr	r3, [pc, #132]	; (80009cc <encoder1_routine_1ms+0xec>)
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
	encoder_1_value += delta * mult;
 800094c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000950:	4a20      	ldr	r2, [pc, #128]	; (80009d4 <encoder1_routine_1ms+0xf4>)
 8000952:	6812      	ldr	r2, [r2, #0]
 8000954:	fb03 f202 	mul.w	r2, r3, r2
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <encoder1_routine_1ms+0xf8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4413      	add	r3, r2
 800095e:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <encoder1_routine_1ms+0xf8>)
 8000960:	6013      	str	r3, [r2, #0]


	if (duration < 0) {
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <encoder1_routine_1ms+0xe8>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	da29      	bge.n	80009be <encoder1_routine_1ms+0xde>
		if (encoder_1_value < 0) {
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <encoder1_routine_1ms+0xf8>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b00      	cmp	r3, #0
 8000970:	da0d      	bge.n	800098e <encoder1_routine_1ms+0xae>
			event[0] = EVT_ENCODER_DOWN;
 8000972:	2331      	movs	r3, #49	; 0x31
 8000974:	713b      	strb	r3, [r7, #4]
			event[2] = (uint8_t) (-encoder_1_value);
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <encoder1_routine_1ms+0xf8>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	425b      	negs	r3, r3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	71bb      	strb	r3, [r7, #6]
			event[1] = 1;
 8000982:	2301      	movs	r3, #1
 8000984:	717b      	strb	r3, [r7, #5]

			// post the event to indicate the end of the down state
			Evt_EnQueue(event);
 8000986:	1d3b      	adds	r3, r7, #4
 8000988:	4618      	mov	r0, r3
 800098a:	f003 fe99 	bl	80046c0 <Evt_EnQueue>
		}

		if (encoder_1_value > 0) {
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <encoder1_routine_1ms+0xf8>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	dd0b      	ble.n	80009ae <encoder1_routine_1ms+0xce>
			event[0] = EVT_ENCODER_UP;
 8000996:	2330      	movs	r3, #48	; 0x30
 8000998:	713b      	strb	r3, [r7, #4]
			event[2] = (uint8_t) (encoder_1_value);
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <encoder1_routine_1ms+0xf8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	71bb      	strb	r3, [r7, #6]
			event[1] = 1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	717b      	strb	r3, [r7, #5]

			// post the event to indicate the end of the down state
			Evt_EnQueue(event);
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 fe89 	bl	80046c0 <Evt_EnQueue>
		}
		duration = reg_r;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <encoder1_routine_1ms+0xfc>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <encoder1_routine_1ms+0xe8>)
 80009b6:	601a      	str	r2, [r3, #0]
		encoder_1_value = 0;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <encoder1_routine_1ms+0xf8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
	}

}
 80009be:	bf00      	nop
 80009c0:	3758      	adds	r7, #88	; 0x58
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200002ac 	.word	0x200002ac
 80009cc:	200002b0 	.word	0x200002b0
 80009d0:	51eb851f 	.word	0x51eb851f
 80009d4:	200002b4 	.word	0x200002b4
 80009d8:	200002b8 	.word	0x200002b8
 80009dc:	20000001 	.word	0x20000001

080009e0 <SysTick_Handler_1ms>:
/** SysTick callback function override.
 */
void SysTick_Handler_1ms()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	// UsrTimer_Routine will have 1msec resolution
	encoder1_routine_1ms();
 80009e4:	f7ff ff7c 	bl	80008e0 <encoder1_routine_1ms>
	UsrTimer_Routine();
 80009e8:	f004 f91a 	bl	8004c20 <UsrTimer_Routine>
	return;
 80009ec:	bf00      	nop
}
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SysTick_Handler_5ms>:

void SysTick_Handler_5ms()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	// blink the LED
	static int counter_5ms = 0;
	if (counter_5ms++ > 200) {
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <SysTick_Handler_5ms+0x28>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	1c5a      	adds	r2, r3, #1
 80009fa:	4907      	ldr	r1, [pc, #28]	; (8000a18 <SysTick_Handler_5ms+0x28>)
 80009fc:	600a      	str	r2, [r1, #0]
 80009fe:	2bc8      	cmp	r3, #200	; 0xc8
 8000a00:	dd07      	ble.n	8000a12 <SysTick_Handler_5ms+0x22>
		counter_5ms = 0;
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <SysTick_Handler_5ms+0x28>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(Blinker_GPIO_Port, Blinker_Pin);
 8000a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <SysTick_Handler_5ms+0x2c>)
 8000a0e:	f000 fc36 	bl	800127e <HAL_GPIO_TogglePin>
	}

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200002bc 	.word	0x200002bc
 8000a1c:	40011000 	.word	0x40011000

08000a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a24:	b672      	cpsid	i
}
 8000a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a28:	e7fe      	b.n	8000a28 <Error_Handler+0x8>
	...

08000a2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6193      	str	r3, [r2, #24]
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a40:	699b      	ldr	r3, [r3, #24]
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a54:	61d3      	str	r3, [r2, #28]
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <HAL_MspInit+0x5c>)
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a62:	4b0a      	ldr	r3, [pc, #40]	; (8000a8c <HAL_MspInit+0x60>)
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <HAL_MspInit+0x60>)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	40010000 	.word	0x40010000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <NMI_Handler+0x4>

08000a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <HardFault_Handler+0x4>

08000a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <MemManage_Handler+0x4>

08000aa2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <UsageFault_Handler+0x4>

08000aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
	...

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  static int tick5x = 0;
  if (tick5x++ == 5) {
 8000ad8:	4b08      	ldr	r3, [pc, #32]	; (8000afc <SysTick_Handler+0x28>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	4907      	ldr	r1, [pc, #28]	; (8000afc <SysTick_Handler+0x28>)
 8000ae0:	600a      	str	r2, [r1, #0]
 8000ae2:	2b05      	cmp	r3, #5
 8000ae4:	d104      	bne.n	8000af0 <SysTick_Handler+0x1c>
	  tick5x = 0;
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <SysTick_Handler+0x28>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
	  SysTick_Handler_5ms();
 8000aec:	f7ff ff80 	bl	80009f0 <SysTick_Handler_5ms>
  }
  SysTick_Handler_1ms();
 8000af0:	f7ff ff76 	bl	80009e0 <SysTick_Handler_1ms>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 f8ec 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200002c0 	.word	0x200002c0

08000b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b08:	4a14      	ldr	r2, [pc, #80]	; (8000b5c <_sbrk+0x5c>)
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <_sbrk+0x60>)
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <_sbrk+0x64>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d102      	bne.n	8000b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <_sbrk+0x64>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <_sbrk+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b22:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	d207      	bcs.n	8000b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b30:	f005 fea6 	bl	8006880 <__errno>
 8000b34:	4603      	mov	r3, r0
 8000b36:	220c      	movs	r2, #12
 8000b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	e009      	b.n	8000b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <_sbrk+0x64>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <_sbrk+0x64>)
 8000b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20005000 	.word	0x20005000
 8000b60:	00000400 	.word	0x00000400
 8000b64:	200002c4 	.word	0x200002c4
 8000b68:	200019e0 	.word	0x200019e0

08000b6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bc80      	pop	{r7}
 8000b76:	4770      	bx	lr

08000b78 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <MX_USB_PCD_Init+0x3c>)
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <MX_USB_PCD_Init+0x40>)
 8000b80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000b82:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_USB_PCD_Init+0x3c>)
 8000b84:	2208      	movs	r2, #8
 8000b86:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000b88:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <MX_USB_PCD_Init+0x3c>)
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000b8e:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_USB_PCD_Init+0x3c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000b94:	4b07      	ldr	r3, [pc, #28]	; (8000bb4 <MX_USB_PCD_Init+0x3c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_USB_PCD_Init+0x3c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ba0:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <MX_USB_PCD_Init+0x3c>)
 8000ba2:	f000 fb85 	bl	80012b0 <HAL_PCD_Init>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000bac:	f7ff ff38 	bl	8000a20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200002c8 	.word	0x200002c8
 8000bb8:	40005c00 	.word	0x40005c00

08000bbc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <HAL_PCD_MspInit+0x34>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d10b      	bne.n	8000be6 <HAL_PCD_MspInit+0x2a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_PCD_MspInit+0x38>)
 8000bd0:	69db      	ldr	r3, [r3, #28]
 8000bd2:	4a08      	ldr	r2, [pc, #32]	; (8000bf4 <HAL_PCD_MspInit+0x38>)
 8000bd4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bd8:	61d3      	str	r3, [r2, #28]
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_PCD_MspInit+0x38>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	40005c00 	.word	0x40005c00
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bf8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bfa:	e003      	b.n	8000c04 <LoopCopyDataInit>

08000bfc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000bfe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c02:	3104      	adds	r1, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c04:	480a      	ldr	r0, [pc, #40]	; (8000c30 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000c08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c0c:	d3f6      	bcc.n	8000bfc <CopyDataInit>
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000c10:	e002      	b.n	8000c18 <LoopFillZerobss>

08000c12 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c14:	f842 3b04 	str.w	r3, [r2], #4

08000c18 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c18:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000c1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c1c:	d3f9      	bcc.n	8000c12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c1e:	f7ff ffa5 	bl	8000b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c22:	f005 fe33 	bl	800688c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c26:	f7ff fc7f 	bl	8000528 <main>
  bx lr
 8000c2a:	4770      	bx	lr
  ldr r3, =_sidata
 8000c2c:	08007e74 	.word	0x08007e74
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c34:	2000028c 	.word	0x2000028c
  ldr r2, =_sbss
 8000c38:	2000028c 	.word	0x2000028c
  ldr r3, = _ebss
 8000c3c:	200019e0 	.word	0x200019e0

08000c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC1_2_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_Init+0x28>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_Init+0x28>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 f92b 	bl	8000eb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5a:	2000      	movs	r0, #0
 8000c5c:	f000 f808 	bl	8000c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f7ff fee4 	bl	8000a2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40022000 	.word	0x40022000

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x54>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x58>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f935 	bl	8000efe <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00e      	b.n	8000cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d80a      	bhi.n	8000cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f000 f90b 	bl	8000ec6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_InitTick+0x5c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000004 	.word	0x20000004
 8000cc8:	2000000c 	.word	0x2000000c
 8000ccc:	20000008 	.word	0x20000008

08000cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x1c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <HAL_IncTick+0x20>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	2000000c 	.word	0x2000000c
 8000cf0:	200005b8 	.word	0x200005b8

08000cf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b02      	ldr	r3, [pc, #8]	; (8000d04 <HAL_GetTick+0x10>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	200005b8 	.word	0x200005b8

08000d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff fff0 	bl	8000cf4 <HAL_GetTick>
 8000d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d20:	d005      	beq.n	8000d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_Delay+0x44>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2e:	bf00      	nop
 8000d30:	f7ff ffe0 	bl	8000cf4 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d8f7      	bhi.n	8000d30 <HAL_Delay+0x28>
  {
  }
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	2000000c 	.word	0x2000000c

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e7c:	d301      	bcc.n	8000e82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00f      	b.n	8000ea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <SysTick_Config+0x40>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8a:	210f      	movs	r1, #15
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f7ff ff90 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <SysTick_Config+0x40>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9a:	4b04      	ldr	r3, [pc, #16]	; (8000eac <SysTick_Config+0x40>)
 8000e9c:	2207      	movs	r2, #7
 8000e9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	e000e010 	.word	0xe000e010

08000eb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff ff49 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	4603      	mov	r3, r0
 8000ece:	60b9      	str	r1, [r7, #8]
 8000ed0:	607a      	str	r2, [r7, #4]
 8000ed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed8:	f7ff ff5e 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000edc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	68b9      	ldr	r1, [r7, #8]
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f7ff ff90 	bl	8000e08 <NVIC_EncodePriority>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff5f 	bl	8000db4 <__NVIC_SetPriority>
}
 8000ef6:	bf00      	nop
 8000ef8:	3718      	adds	r7, #24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ffb0 	bl	8000e6c <SysTick_Config>
 8000f0c:	4603      	mov	r3, r0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b08b      	sub	sp, #44	; 0x2c
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f22:	2300      	movs	r3, #0
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f26:	2300      	movs	r3, #0
 8000f28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f2a:	e169      	b.n	8001200 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	69fa      	ldr	r2, [r7, #28]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	f040 8158 	bne.w	80011fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	4a9a      	ldr	r2, [pc, #616]	; (80011b8 <HAL_GPIO_Init+0x2a0>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d05e      	beq.n	8001012 <HAL_GPIO_Init+0xfa>
 8000f54:	4a98      	ldr	r2, [pc, #608]	; (80011b8 <HAL_GPIO_Init+0x2a0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d875      	bhi.n	8001046 <HAL_GPIO_Init+0x12e>
 8000f5a:	4a98      	ldr	r2, [pc, #608]	; (80011bc <HAL_GPIO_Init+0x2a4>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d058      	beq.n	8001012 <HAL_GPIO_Init+0xfa>
 8000f60:	4a96      	ldr	r2, [pc, #600]	; (80011bc <HAL_GPIO_Init+0x2a4>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d86f      	bhi.n	8001046 <HAL_GPIO_Init+0x12e>
 8000f66:	4a96      	ldr	r2, [pc, #600]	; (80011c0 <HAL_GPIO_Init+0x2a8>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d052      	beq.n	8001012 <HAL_GPIO_Init+0xfa>
 8000f6c:	4a94      	ldr	r2, [pc, #592]	; (80011c0 <HAL_GPIO_Init+0x2a8>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d869      	bhi.n	8001046 <HAL_GPIO_Init+0x12e>
 8000f72:	4a94      	ldr	r2, [pc, #592]	; (80011c4 <HAL_GPIO_Init+0x2ac>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d04c      	beq.n	8001012 <HAL_GPIO_Init+0xfa>
 8000f78:	4a92      	ldr	r2, [pc, #584]	; (80011c4 <HAL_GPIO_Init+0x2ac>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d863      	bhi.n	8001046 <HAL_GPIO_Init+0x12e>
 8000f7e:	4a92      	ldr	r2, [pc, #584]	; (80011c8 <HAL_GPIO_Init+0x2b0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d046      	beq.n	8001012 <HAL_GPIO_Init+0xfa>
 8000f84:	4a90      	ldr	r2, [pc, #576]	; (80011c8 <HAL_GPIO_Init+0x2b0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d85d      	bhi.n	8001046 <HAL_GPIO_Init+0x12e>
 8000f8a:	2b12      	cmp	r3, #18
 8000f8c:	d82a      	bhi.n	8000fe4 <HAL_GPIO_Init+0xcc>
 8000f8e:	2b12      	cmp	r3, #18
 8000f90:	d859      	bhi.n	8001046 <HAL_GPIO_Init+0x12e>
 8000f92:	a201      	add	r2, pc, #4	; (adr r2, 8000f98 <HAL_GPIO_Init+0x80>)
 8000f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f98:	08001013 	.word	0x08001013
 8000f9c:	08000fed 	.word	0x08000fed
 8000fa0:	08000fff 	.word	0x08000fff
 8000fa4:	08001041 	.word	0x08001041
 8000fa8:	08001047 	.word	0x08001047
 8000fac:	08001047 	.word	0x08001047
 8000fb0:	08001047 	.word	0x08001047
 8000fb4:	08001047 	.word	0x08001047
 8000fb8:	08001047 	.word	0x08001047
 8000fbc:	08001047 	.word	0x08001047
 8000fc0:	08001047 	.word	0x08001047
 8000fc4:	08001047 	.word	0x08001047
 8000fc8:	08001047 	.word	0x08001047
 8000fcc:	08001047 	.word	0x08001047
 8000fd0:	08001047 	.word	0x08001047
 8000fd4:	08001047 	.word	0x08001047
 8000fd8:	08001047 	.word	0x08001047
 8000fdc:	08000ff5 	.word	0x08000ff5
 8000fe0:	08001009 	.word	0x08001009
 8000fe4:	4a79      	ldr	r2, [pc, #484]	; (80011cc <HAL_GPIO_Init+0x2b4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fea:	e02c      	b.n	8001046 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	623b      	str	r3, [r7, #32]
          break;
 8000ff2:	e029      	b.n	8001048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	623b      	str	r3, [r7, #32]
          break;
 8000ffc:	e024      	b.n	8001048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	3308      	adds	r3, #8
 8001004:	623b      	str	r3, [r7, #32]
          break;
 8001006:	e01f      	b.n	8001048 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	330c      	adds	r3, #12
 800100e:	623b      	str	r3, [r7, #32]
          break;
 8001010:	e01a      	b.n	8001048 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d102      	bne.n	8001020 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800101a:	2304      	movs	r3, #4
 800101c:	623b      	str	r3, [r7, #32]
          break;
 800101e:	e013      	b.n	8001048 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d105      	bne.n	8001034 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001028:	2308      	movs	r3, #8
 800102a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69fa      	ldr	r2, [r7, #28]
 8001030:	611a      	str	r2, [r3, #16]
          break;
 8001032:	e009      	b.n	8001048 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001034:	2308      	movs	r3, #8
 8001036:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69fa      	ldr	r2, [r7, #28]
 800103c:	615a      	str	r2, [r3, #20]
          break;
 800103e:	e003      	b.n	8001048 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
          break;
 8001044:	e000      	b.n	8001048 <HAL_GPIO_Init+0x130>
          break;
 8001046:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	2bff      	cmp	r3, #255	; 0xff
 800104c:	d801      	bhi.n	8001052 <HAL_GPIO_Init+0x13a>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	e001      	b.n	8001056 <HAL_GPIO_Init+0x13e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3304      	adds	r3, #4
 8001056:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	2bff      	cmp	r3, #255	; 0xff
 800105c:	d802      	bhi.n	8001064 <HAL_GPIO_Init+0x14c>
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	e002      	b.n	800106a <HAL_GPIO_Init+0x152>
 8001064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001066:	3b08      	subs	r3, #8
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	210f      	movs	r1, #15
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	401a      	ands	r2, r3
 800107c:	6a39      	ldr	r1, [r7, #32]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	fa01 f303 	lsl.w	r3, r1, r3
 8001084:	431a      	orrs	r2, r3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 80b1 	beq.w	80011fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001098:	4b4d      	ldr	r3, [pc, #308]	; (80011d0 <HAL_GPIO_Init+0x2b8>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a4c      	ldr	r2, [pc, #304]	; (80011d0 <HAL_GPIO_Init+0x2b8>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b4a      	ldr	r3, [pc, #296]	; (80011d0 <HAL_GPIO_Init+0x2b8>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0301 	and.w	r3, r3, #1
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010b0:	4a48      	ldr	r2, [pc, #288]	; (80011d4 <HAL_GPIO_Init+0x2bc>)
 80010b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	3302      	adds	r3, #2
 80010b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	f003 0303 	and.w	r3, r3, #3
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	220f      	movs	r2, #15
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	4a40      	ldr	r2, [pc, #256]	; (80011d8 <HAL_GPIO_Init+0x2c0>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d013      	beq.n	8001104 <HAL_GPIO_Init+0x1ec>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	4a3f      	ldr	r2, [pc, #252]	; (80011dc <HAL_GPIO_Init+0x2c4>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d00d      	beq.n	8001100 <HAL_GPIO_Init+0x1e8>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a3e      	ldr	r2, [pc, #248]	; (80011e0 <HAL_GPIO_Init+0x2c8>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d007      	beq.n	80010fc <HAL_GPIO_Init+0x1e4>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4a3d      	ldr	r2, [pc, #244]	; (80011e4 <HAL_GPIO_Init+0x2cc>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d101      	bne.n	80010f8 <HAL_GPIO_Init+0x1e0>
 80010f4:	2303      	movs	r3, #3
 80010f6:	e006      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 80010f8:	2304      	movs	r3, #4
 80010fa:	e004      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e002      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 8001100:	2301      	movs	r3, #1
 8001102:	e000      	b.n	8001106 <HAL_GPIO_Init+0x1ee>
 8001104:	2300      	movs	r3, #0
 8001106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001108:	f002 0203 	and.w	r2, r2, #3
 800110c:	0092      	lsls	r2, r2, #2
 800110e:	4093      	lsls	r3, r2
 8001110:	68fa      	ldr	r2, [r7, #12]
 8001112:	4313      	orrs	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001116:	492f      	ldr	r1, [pc, #188]	; (80011d4 <HAL_GPIO_Init+0x2bc>)
 8001118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3302      	adds	r3, #2
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001130:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	492c      	ldr	r1, [pc, #176]	; (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	4313      	orrs	r3, r2
 800113a:	608b      	str	r3, [r1, #8]
 800113c:	e006      	b.n	800114c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800113e:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	43db      	mvns	r3, r3
 8001146:	4928      	ldr	r1, [pc, #160]	; (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001148:	4013      	ands	r3, r2
 800114a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d006      	beq.n	8001166 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <HAL_GPIO_Init+0x2d0>)
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	4922      	ldr	r1, [pc, #136]	; (80011e8 <HAL_GPIO_Init+0x2d0>)
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	60cb      	str	r3, [r1, #12]
 8001164:	e006      	b.n	8001174 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001166:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	43db      	mvns	r3, r3
 800116e:	491e      	ldr	r1, [pc, #120]	; (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001170:	4013      	ands	r3, r2
 8001172:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d006      	beq.n	800118e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	4918      	ldr	r1, [pc, #96]	; (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	604b      	str	r3, [r1, #4]
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001190:	685a      	ldr	r2, [r3, #4]
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	43db      	mvns	r3, r3
 8001196:	4914      	ldr	r1, [pc, #80]	; (80011e8 <HAL_GPIO_Init+0x2d0>)
 8001198:	4013      	ands	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d021      	beq.n	80011ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_GPIO_Init+0x2d0>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	490e      	ldr	r1, [pc, #56]	; (80011e8 <HAL_GPIO_Init+0x2d0>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	600b      	str	r3, [r1, #0]
 80011b4:	e021      	b.n	80011fa <HAL_GPIO_Init+0x2e2>
 80011b6:	bf00      	nop
 80011b8:	10320000 	.word	0x10320000
 80011bc:	10310000 	.word	0x10310000
 80011c0:	10220000 	.word	0x10220000
 80011c4:	10210000 	.word	0x10210000
 80011c8:	10120000 	.word	0x10120000
 80011cc:	10110000 	.word	0x10110000
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40010000 	.word	0x40010000
 80011d8:	40010800 	.word	0x40010800
 80011dc:	40010c00 	.word	0x40010c00
 80011e0:	40011000 	.word	0x40011000
 80011e4:	40011400 	.word	0x40011400
 80011e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_GPIO_Init+0x304>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	43db      	mvns	r3, r3
 80011f4:	4909      	ldr	r1, [pc, #36]	; (800121c <HAL_GPIO_Init+0x304>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	3301      	adds	r3, #1
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	fa22 f303 	lsr.w	r3, r2, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	f47f ae8e 	bne.w	8000f2c <HAL_GPIO_Init+0x14>
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	372c      	adds	r7, #44	; 0x2c
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	40010400 	.word	0x40010400

08001220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	887b      	ldrh	r3, [r7, #2]
 8001232:	4013      	ands	r3, r2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d002      	beq.n	800123e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
 800123c:	e001      	b.n	8001242 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800123e:	2300      	movs	r3, #0
 8001240:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001242:	7bfb      	ldrb	r3, [r7, #15]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	460b      	mov	r3, r1
 8001258:	807b      	strh	r3, [r7, #2]
 800125a:	4613      	mov	r3, r2
 800125c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800125e:	787b      	ldrb	r3, [r7, #1]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001264:	887a      	ldrh	r2, [r7, #2]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800126a:	e003      	b.n	8001274 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	041a      	lsls	r2, r3, #16
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	611a      	str	r2, [r3, #16]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr

0800127e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800127e:	b480      	push	{r7}
 8001280:	b085      	sub	sp, #20
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	460b      	mov	r3, r1
 8001288:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001290:	887a      	ldrh	r2, [r7, #2]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4013      	ands	r3, r2
 8001296:	041a      	lsls	r2, r3, #16
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43d9      	mvns	r1, r3
 800129c:	887b      	ldrh	r3, [r7, #2]
 800129e:	400b      	ands	r3, r1
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	611a      	str	r2, [r3, #16]
}
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012b2:	b08b      	sub	sp, #44	; 0x2c
 80012b4:	af06      	add	r7, sp, #24
 80012b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d101      	bne.n	80012c2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e0f1      	b.n	80014a6 <HAL_PCD_Init+0x1f6>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d106      	bne.n	80012dc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fc70 	bl	8000bbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2203      	movs	r2, #3
 80012e0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f000 ff91 	bl	8002210 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	603b      	str	r3, [r7, #0]
 80012f4:	687e      	ldr	r6, [r7, #4]
 80012f6:	466d      	mov	r5, sp
 80012f8:	f106 0410 	add.w	r4, r6, #16
 80012fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	602b      	str	r3, [r5, #0]
 8001304:	1d33      	adds	r3, r6, #4
 8001306:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001308:	6838      	ldr	r0, [r7, #0]
 800130a:	f000 ff5b 	bl	80021c4 <USB_CoreInit>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2202      	movs	r2, #2
 8001318:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e0c2      	b.n	80014a6 <HAL_PCD_Init+0x1f6>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f000 ff8c 	bl	8002244 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132c:	2300      	movs	r3, #0
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e040      	b.n	80013b4 <HAL_PCD_Init+0x104>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	1c5a      	adds	r2, r3, #1
 8001338:	4613      	mov	r3, r2
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	440b      	add	r3, r1
 8001342:	3301      	adds	r3, #1
 8001344:	2201      	movs	r2, #1
 8001346:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	1c5a      	adds	r2, r3, #1
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	00db      	lsls	r3, r3, #3
 8001356:	440b      	add	r3, r1
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800135c:	7bfb      	ldrb	r3, [r7, #15]
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	1c5a      	adds	r2, r3, #1
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	440b      	add	r3, r1
 800136c:	3303      	adds	r3, #3
 800136e:	2200      	movs	r2, #0
 8001370:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001372:	7bfa      	ldrb	r2, [r7, #15]
 8001374:	6879      	ldr	r1, [r7, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	440b      	add	r3, r1
 8001380:	3338      	adds	r3, #56	; 0x38
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4613      	mov	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	440b      	add	r3, r1
 8001394:	333c      	adds	r3, #60	; 0x3c
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800139a:	7bfa      	ldrb	r2, [r7, #15]
 800139c:	6879      	ldr	r1, [r7, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	00db      	lsls	r3, r3, #3
 80013a6:	440b      	add	r3, r1
 80013a8:	3340      	adds	r3, #64	; 0x40
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	3301      	adds	r3, #1
 80013b2:	73fb      	strb	r3, [r7, #15]
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d3b9      	bcc.n	8001332 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
 80013c2:	e044      	b.n	800144e <HAL_PCD_Init+0x19e>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013c4:	7bfa      	ldrb	r2, [r7, #15]
 80013c6:	6879      	ldr	r1, [r7, #4]
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	440b      	add	r3, r1
 80013e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013f0:	7bfa      	ldrb	r2, [r7, #15]
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	440b      	add	r3, r1
 80013fe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001406:	7bfa      	ldrb	r2, [r7, #15]
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	440b      	add	r3, r1
 8001414:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800141c:	7bfa      	ldrb	r2, [r7, #15]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001432:	7bfa      	ldrb	r2, [r7, #15]
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	440b      	add	r3, r1
 8001440:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	3301      	adds	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	7bfa      	ldrb	r2, [r7, #15]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	429a      	cmp	r2, r3
 8001456:	d3b5      	bcc.n	80013c4 <HAL_PCD_Init+0x114>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	687e      	ldr	r6, [r7, #4]
 8001460:	466d      	mov	r5, sp
 8001462:	f106 0410 	add.w	r4, r6, #16
 8001466:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001468:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	602b      	str	r3, [r5, #0]
 800146e:	1d33      	adds	r3, r6, #4
 8001470:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001472:	6838      	ldr	r0, [r7, #0]
 8001474:	f000 fef2 	bl	800225c <USB_DevInit>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <HAL_PCD_Init+0x1da>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2202      	movs	r2, #2
 8001482:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e00d      	b.n	80014a6 <HAL_PCD_Init+0x1f6>
  }

  hpcd->USB_Address = 0U;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4618      	mov	r0, r3
 80014a0:	f003 f8b3 	bl	800460a <USB_DevDisconnect>

  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d101      	bne.n	80014c4 <HAL_PCD_Start+0x16>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e016      	b.n	80014f2 <HAL_PCD_Start+0x44>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2201      	movs	r2, #1
 80014c8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 fe87 	bl	80021e4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80014d6:	2101      	movs	r1, #1
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f9d4 	bl	8001886 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 f887 	bl	80045f6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	4608      	mov	r0, r1
 8001504:	4611      	mov	r1, r2
 8001506:	461a      	mov	r2, r3
 8001508:	4603      	mov	r3, r0
 800150a:	70fb      	strb	r3, [r7, #3]
 800150c:	460b      	mov	r3, r1
 800150e:	803b      	strh	r3, [r7, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800151c:	2b00      	cmp	r3, #0
 800151e:	da0e      	bge.n	800153e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2201      	movs	r2, #1
 800153a:	705a      	strb	r2, [r3, #1]
 800153c:	e00e      	b.n	800155c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800153e:	78fb      	ldrb	r3, [r7, #3]
 8001540:	f003 0207 	and.w	r2, r3, #7
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	f003 0307 	and.w	r3, r3, #7
 8001562:	b2da      	uxtb	r2, r3
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001568:	883a      	ldrh	r2, [r7, #0]
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	78ba      	ldrb	r2, [r7, #2]
 8001572:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001574:	78bb      	ldrb	r3, [r7, #2]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d102      	bne.n	8001580 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2200      	movs	r2, #0
 800157e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001586:	2b01      	cmp	r3, #1
 8001588:	d101      	bne.n	800158e <HAL_PCD_EP_Open+0x94>
 800158a:	2302      	movs	r3, #2
 800158c:	e00e      	b.n	80015ac <HAL_PCD_EP_Open+0xb2>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2201      	movs	r2, #1
 8001592:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68f9      	ldr	r1, [r7, #12]
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fe7d 	bl	800229c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80015aa:	7afb      	ldrb	r3, [r7, #11]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	460b      	mov	r3, r1
 80015be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80015c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	da0e      	bge.n	80015e6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	1c5a      	adds	r2, r3, #1
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2201      	movs	r2, #1
 80015e2:	705a      	strb	r2, [r3, #1]
 80015e4:	e00e      	b.n	8001604 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80015e6:	78fb      	ldrb	r3, [r7, #3]
 80015e8:	f003 0207 	and.w	r2, r3, #7
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	b2da      	uxtb	r2, r3
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001616:	2b01      	cmp	r3, #1
 8001618:	d101      	bne.n	800161e <HAL_PCD_EP_Close+0x6a>
 800161a:	2302      	movs	r3, #2
 800161c:	e00e      	b.n	800163c <HAL_PCD_EP_Close+0x88>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68f9      	ldr	r1, [r7, #12]
 800162c:	4618      	mov	r0, r3
 800162e:	f001 f9f5 	bl	8002a1c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3710      	adds	r7, #16
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	60f8      	str	r0, [r7, #12]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	603b      	str	r3, [r7, #0]
 8001650:	460b      	mov	r3, r1
 8001652:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001654:	7afb      	ldrb	r3, [r7, #11]
 8001656:	f003 0207 	and.w	r2, r3, #7
 800165a:	4613      	mov	r3, r2
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	4413      	add	r3, r2
 800166a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	2200      	movs	r2, #0
 800167c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2200      	movs	r2, #0
 8001682:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001684:	7afb      	ldrb	r3, [r7, #11]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	b2da      	uxtb	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6979      	ldr	r1, [r7, #20]
 8001696:	4618      	mov	r0, r3
 8001698:	f001 fbac 	bl	8002df4 <USB_EPStartXfer>

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
 80016ae:	460b      	mov	r3, r1
 80016b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	f003 0207 	and.w	r2, r3, #7
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	4613      	mov	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	4413      	add	r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	440b      	add	r3, r1
 80016c4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80016c8:	681b      	ldr	r3, [r3, #0]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr

080016d4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	460b      	mov	r3, r1
 80016e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016e4:	7afb      	ldrb	r3, [r7, #11]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	1c5a      	adds	r2, r3, #1
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	4413      	add	r3, r2
 80016f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2201      	movs	r2, #1
 800171e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001720:	7afb      	ldrb	r3, [r7, #11]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	b2da      	uxtb	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6979      	ldr	r1, [r7, #20]
 8001732:	4618      	mov	r0, r3
 8001734:	f001 fb5e 	bl	8002df4 <USB_EPStartXfer>

  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
 800174a:	460b      	mov	r3, r1
 800174c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800174e:	78fb      	ldrb	r3, [r7, #3]
 8001750:	f003 0207 	and.w	r2, r3, #7
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	d901      	bls.n	8001760 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e04c      	b.n	80017fa <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001760:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001764:	2b00      	cmp	r3, #0
 8001766:	da0e      	bge.n	8001786 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	4613      	mov	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	4413      	add	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	4413      	add	r3, r2
 800177c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2201      	movs	r2, #1
 8001782:	705a      	strb	r2, [r3, #1]
 8001784:	e00c      	b.n	80017a0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001786:	78fa      	ldrb	r2, [r7, #3]
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	4413      	add	r3, r2
 8001798:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2201      	movs	r2, #1
 80017a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80017a6:	78fb      	ldrb	r3, [r7, #3]
 80017a8:	f003 0307 	and.w	r3, r3, #7
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d101      	bne.n	80017c0 <HAL_PCD_EP_SetStall+0x7e>
 80017bc:	2302      	movs	r3, #2
 80017be:	e01c      	b.n	80017fa <HAL_PCD_EP_SetStall+0xb8>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68f9      	ldr	r1, [r7, #12]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 fec1 	bl	8004556 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d108      	bne.n	80017f0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80017e8:	4619      	mov	r1, r3
 80017ea:	4610      	mov	r0, r2
 80017ec:	f002 ff17 	bl	800461e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8001802:	b480      	push	{r7}
 8001804:	b087      	sub	sp, #28
 8001806:	af00      	add	r7, sp, #0
 8001808:	60f8      	str	r0, [r7, #12]
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	817b      	strh	r3, [r7, #10]
 8001810:	4613      	mov	r3, r2
 8001812:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001814:	897b      	ldrh	r3, [r7, #10]
 8001816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181a:	b29b      	uxth	r3, r3
 800181c:	2b00      	cmp	r3, #0
 800181e:	d00b      	beq.n	8001838 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001820:	897b      	ldrh	r3, [r7, #10]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e009      	b.n	800184c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001838:	897a      	ldrh	r2, [r7, #10]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	4413      	add	r3, r2
 800184a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800184c:	893b      	ldrh	r3, [r7, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d107      	bne.n	8001862 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2200      	movs	r2, #0
 8001856:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	b29a      	uxth	r2, r3
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	80da      	strh	r2, [r3, #6]
 8001860:	e00b      	b.n	800187a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2201      	movs	r2, #1
 8001866:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	b29a      	uxth	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	0c1b      	lsrs	r3, r3, #16
 8001874:	b29a      	uxth	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	371c      	adds	r7, #28
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr

08001886 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd PCD handle
  * @param  state connection state (0 : disconnected / 1: connected)
  * @retval None
  */
__weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8001886:	b480      	push	{r7}
 8001888:	b083      	sub	sp, #12
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	70fb      	strb	r3, [r7, #3]
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e272      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8087 	beq.w	80019ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018bc:	4b92      	ldr	r3, [pc, #584]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d00c      	beq.n	80018e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018c8:	4b8f      	ldr	r3, [pc, #572]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d112      	bne.n	80018fa <HAL_RCC_OscConfig+0x5e>
 80018d4:	4b8c      	ldr	r3, [pc, #560]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e0:	d10b      	bne.n	80018fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e2:	4b89      	ldr	r3, [pc, #548]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d06c      	beq.n	80019c8 <HAL_RCC_OscConfig+0x12c>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d168      	bne.n	80019c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e24c      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001902:	d106      	bne.n	8001912 <HAL_RCC_OscConfig+0x76>
 8001904:	4b80      	ldr	r3, [pc, #512]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a7f      	ldr	r2, [pc, #508]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 800190a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190e:	6013      	str	r3, [r2, #0]
 8001910:	e02e      	b.n	8001970 <HAL_RCC_OscConfig+0xd4>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0x98>
 800191a:	4b7b      	ldr	r3, [pc, #492]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a7a      	ldr	r2, [pc, #488]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	4b78      	ldr	r3, [pc, #480]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a77      	ldr	r2, [pc, #476]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 800192c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e01d      	b.n	8001970 <HAL_RCC_OscConfig+0xd4>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0xbc>
 800193e:	4b72      	ldr	r3, [pc, #456]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a71      	ldr	r2, [pc, #452]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b6f      	ldr	r3, [pc, #444]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a6e      	ldr	r2, [pc, #440]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0xd4>
 8001958:	4b6b      	ldr	r3, [pc, #428]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a6a      	ldr	r2, [pc, #424]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 800195e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a67      	ldr	r2, [pc, #412]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 800196a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800196e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d013      	beq.n	80019a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff f9bc 	bl	8000cf4 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff f9b8 	bl	8000cf4 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	; 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e200      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0xe4>
 800199e:	e014      	b.n	80019ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7ff f9a8 	bl	8000cf4 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a8:	f7ff f9a4 	bl	8000cf4 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	; 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e1ec      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ba:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x10c>
 80019c6:	e000      	b.n	80019ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d063      	beq.n	8001a9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019d6:	4b4c      	ldr	r3, [pc, #304]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00b      	beq.n	80019fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019e2:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d11c      	bne.n	8001a28 <HAL_RCC_OscConfig+0x18c>
 80019ee:	4b46      	ldr	r3, [pc, #280]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d116      	bne.n	8001a28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fa:	4b43      	ldr	r3, [pc, #268]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <HAL_RCC_OscConfig+0x176>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d001      	beq.n	8001a12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e1c0      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4939      	ldr	r1, [pc, #228]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a26:	e03a      	b.n	8001a9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d020      	beq.n	8001a72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a30:	4b36      	ldr	r3, [pc, #216]	; (8001b0c <HAL_RCC_OscConfig+0x270>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff f95d 	bl	8000cf4 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3e:	f7ff f959 	bl	8000cf4 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e1a1      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a50:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5c:	4b2a      	ldr	r3, [pc, #168]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4927      	ldr	r1, [pc, #156]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
 8001a70:	e015      	b.n	8001a9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a72:	4b26      	ldr	r3, [pc, #152]	; (8001b0c <HAL_RCC_OscConfig+0x270>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff f93c 	bl	8000cf4 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a80:	f7ff f938 	bl	8000cf4 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e180      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a92:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d1f0      	bne.n	8001a80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d03a      	beq.n	8001b20 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d019      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab8:	f7ff f91c 	bl	8000cf4 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac0:	f7ff f918 	bl	8000cf4 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e160      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0f0      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f000 fa9c 	bl	800201c <RCC_Delay>
 8001ae4:	e01c      	b.n	8001b20 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aec:	f7ff f902 	bl	8000cf4 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af2:	e00f      	b.n	8001b14 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af4:	f7ff f8fe 	bl	8000cf4 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d908      	bls.n	8001b14 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e146      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	42420000 	.word	0x42420000
 8001b10:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b14:	4b92      	ldr	r3, [pc, #584]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1e9      	bne.n	8001af4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80a6 	beq.w	8001c7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b32:	4b8b      	ldr	r3, [pc, #556]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10d      	bne.n	8001b5a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	4b88      	ldr	r3, [pc, #544]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	4a87      	ldr	r2, [pc, #540]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b48:	61d3      	str	r3, [r2, #28]
 8001b4a:	4b85      	ldr	r3, [pc, #532]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b56:	2301      	movs	r3, #1
 8001b58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5a:	4b82      	ldr	r3, [pc, #520]	; (8001d64 <HAL_RCC_OscConfig+0x4c8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d118      	bne.n	8001b98 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b66:	4b7f      	ldr	r3, [pc, #508]	; (8001d64 <HAL_RCC_OscConfig+0x4c8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a7e      	ldr	r2, [pc, #504]	; (8001d64 <HAL_RCC_OscConfig+0x4c8>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b72:	f7ff f8bf 	bl	8000cf4 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7a:	f7ff f8bb 	bl	8000cf4 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b64      	cmp	r3, #100	; 0x64
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e103      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8c:	4b75      	ldr	r3, [pc, #468]	; (8001d64 <HAL_RCC_OscConfig+0x4c8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x312>
 8001ba0:	4b6f      	ldr	r3, [pc, #444]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a6e      	ldr	r2, [pc, #440]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	e02d      	b.n	8001c0a <HAL_RCC_OscConfig+0x36e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x334>
 8001bb6:	4b6a      	ldr	r3, [pc, #424]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	4a69      	ldr	r2, [pc, #420]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	6213      	str	r3, [r2, #32]
 8001bc2:	4b67      	ldr	r3, [pc, #412]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4a66      	ldr	r2, [pc, #408]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	f023 0304 	bic.w	r3, r3, #4
 8001bcc:	6213      	str	r3, [r2, #32]
 8001bce:	e01c      	b.n	8001c0a <HAL_RCC_OscConfig+0x36e>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b05      	cmp	r3, #5
 8001bd6:	d10c      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x356>
 8001bd8:	4b61      	ldr	r3, [pc, #388]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	4a60      	ldr	r2, [pc, #384]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	f043 0304 	orr.w	r3, r3, #4
 8001be2:	6213      	str	r3, [r2, #32]
 8001be4:	4b5e      	ldr	r3, [pc, #376]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	6a1b      	ldr	r3, [r3, #32]
 8001be8:	4a5d      	ldr	r2, [pc, #372]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	6213      	str	r3, [r2, #32]
 8001bf0:	e00b      	b.n	8001c0a <HAL_RCC_OscConfig+0x36e>
 8001bf2:	4b5b      	ldr	r3, [pc, #364]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	4a5a      	ldr	r2, [pc, #360]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	6213      	str	r3, [r2, #32]
 8001bfe:	4b58      	ldr	r3, [pc, #352]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	4a57      	ldr	r2, [pc, #348]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	f023 0304 	bic.w	r3, r3, #4
 8001c08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d015      	beq.n	8001c3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c12:	f7ff f86f 	bl	8000cf4 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c18:	e00a      	b.n	8001c30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c1a:	f7ff f86b 	bl	8000cf4 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0b1      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c30:	4b4b      	ldr	r3, [pc, #300]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0ee      	beq.n	8001c1a <HAL_RCC_OscConfig+0x37e>
 8001c3c:	e014      	b.n	8001c68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3e:	f7ff f859 	bl	8000cf4 <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c44:	e00a      	b.n	8001c5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c46:	f7ff f855 	bl	8000cf4 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e09b      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5c:	4b40      	ldr	r3, [pc, #256]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1ee      	bne.n	8001c46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c68:	7dfb      	ldrb	r3, [r7, #23]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d105      	bne.n	8001c7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6e:	4b3c      	ldr	r3, [pc, #240]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	4a3b      	ldr	r2, [pc, #236]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	f000 8087 	beq.w	8001d92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c84:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d061      	beq.n	8001d54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d146      	bne.n	8001d26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c98:	4b33      	ldr	r3, [pc, #204]	; (8001d68 <HAL_RCC_OscConfig+0x4cc>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7ff f829 	bl	8000cf4 <HAL_GetTick>
 8001ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca4:	e008      	b.n	8001cb8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca6:	f7ff f825 	bl	8000cf4 <HAL_GetTick>
 8001caa:	4602      	mov	r2, r0
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d901      	bls.n	8001cb8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e06d      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb8:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d1f0      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ccc:	d108      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cce:	4b24      	ldr	r3, [pc, #144]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	4921      	ldr	r1, [pc, #132]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ce0:	4b1f      	ldr	r3, [pc, #124]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a19      	ldr	r1, [r3, #32]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	430b      	orrs	r3, r1
 8001cf2:	491b      	ldr	r1, [pc, #108]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_RCC_OscConfig+0x4cc>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7fe fff9 	bl	8000cf4 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d06:	f7fe fff5 	bl	8000cf4 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e03d      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0f0      	beq.n	8001d06 <HAL_RCC_OscConfig+0x46a>
 8001d24:	e035      	b.n	8001d92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <HAL_RCC_OscConfig+0x4cc>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7fe ffe2 	bl	8000cf4 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d34:	f7fe ffde 	bl	8000cf4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e026      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x498>
 8001d52:	e01e      	b.n	8001d92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d107      	bne.n	8001d6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e019      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40007000 	.word	0x40007000
 8001d68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_RCC_OscConfig+0x500>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d001      	beq.n	8001d92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40021000 	.word	0x40021000

08001da0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0d0      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001db4:	4b6a      	ldr	r3, [pc, #424]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d910      	bls.n	8001de4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dc2:	4b67      	ldr	r3, [pc, #412]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 0207 	bic.w	r2, r3, #7
 8001dca:	4965      	ldr	r1, [pc, #404]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e0b8      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d020      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0304 	and.w	r3, r3, #4
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dfc:	4b59      	ldr	r3, [pc, #356]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0308 	and.w	r3, r3, #8
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e14:	4b53      	ldr	r3, [pc, #332]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a52      	ldr	r2, [pc, #328]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e20:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	494d      	ldr	r1, [pc, #308]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d040      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e46:	4b47      	ldr	r3, [pc, #284]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d115      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e07f      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5e:	4b41      	ldr	r3, [pc, #260]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d109      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e073      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e06b      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e7e:	4b39      	ldr	r3, [pc, #228]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f023 0203 	bic.w	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	4936      	ldr	r1, [pc, #216]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e90:	f7fe ff30 	bl	8000cf4 <HAL_GetTick>
 8001e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	e00a      	b.n	8001eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e98:	f7fe ff2c 	bl	8000cf4 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e053      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 020c 	and.w	r2, r3, #12
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d1eb      	bne.n	8001e98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d210      	bcs.n	8001ef0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b24      	ldr	r3, [pc, #144]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 0207 	bic.w	r2, r3, #7
 8001ed6:	4922      	ldr	r1, [pc, #136]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0307 	and.w	r3, r3, #7
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e032      	b.n	8001f56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4916      	ldr	r1, [pc, #88]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0308 	and.w	r3, r3, #8
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d009      	beq.n	8001f2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f1a:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	490e      	ldr	r1, [pc, #56]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f2e:	f000 f821 	bl	8001f74 <HAL_RCC_GetSysClockFreq>
 8001f32:	4602      	mov	r2, r0
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_RCC_ClockConfig+0x1c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	490a      	ldr	r1, [pc, #40]	; (8001f68 <HAL_RCC_ClockConfig+0x1c8>)
 8001f40:	5ccb      	ldrb	r3, [r1, r3]
 8001f42:	fa22 f303 	lsr.w	r3, r2, r3
 8001f46:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <HAL_RCC_ClockConfig+0x1cc>)
 8001f48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_ClockConfig+0x1d0>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe fe8e 	bl	8000c70 <HAL_InitTick>

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40022000 	.word	0x40022000
 8001f64:	40021000 	.word	0x40021000
 8001f68:	08007c98 	.word	0x08007c98
 8001f6c:	20000004 	.word	0x20000004
 8001f70:	20000008 	.word	0x20000008

08001f74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
 8001f82:	2300      	movs	r3, #0
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	2300      	movs	r3, #0
 8001f88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d002      	beq.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x30>
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d003      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x36>
 8001fa2:	e027      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_RCC_GetSysClockFreq+0x98>)
 8001fa6:	613b      	str	r3, [r7, #16]
      break;
 8001fa8:	e027      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	0c9b      	lsrs	r3, r3, #18
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	4a17      	ldr	r2, [pc, #92]	; (8002010 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fb4:	5cd3      	ldrb	r3, [r2, r3]
 8001fb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d010      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	0c5b      	lsrs	r3, r3, #17
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	4a11      	ldr	r2, [pc, #68]	; (8002014 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fce:	5cd3      	ldrb	r3, [r2, r3]
 8001fd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	; (800200c <HAL_RCC_GetSysClockFreq+0x98>)
 8001fd6:	fb03 f202 	mul.w	r2, r3, r2
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fe0:	617b      	str	r3, [r7, #20]
 8001fe2:	e004      	b.n	8001fee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a0c      	ldr	r2, [pc, #48]	; (8002018 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fe8:	fb02 f303 	mul.w	r3, r2, r3
 8001fec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	613b      	str	r3, [r7, #16]
      break;
 8001ff2:	e002      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ff4:	4b05      	ldr	r3, [pc, #20]	; (800200c <HAL_RCC_GetSysClockFreq+0x98>)
 8001ff6:	613b      	str	r3, [r7, #16]
      break;
 8001ff8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ffa:	693b      	ldr	r3, [r7, #16]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	371c      	adds	r7, #28
 8002000:	46bd      	mov	sp, r7
 8002002:	bc80      	pop	{r7}
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	007a1200 	.word	0x007a1200
 8002010:	08007ca8 	.word	0x08007ca8
 8002014:	08007cb8 	.word	0x08007cb8
 8002018:	003d0900 	.word	0x003d0900

0800201c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002024:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <RCC_Delay+0x34>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <RCC_Delay+0x38>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0a5b      	lsrs	r3, r3, #9
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	fb02 f303 	mul.w	r3, r2, r3
 8002036:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002038:	bf00      	nop
  }
  while (Delay --);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1e5a      	subs	r2, r3, #1
 800203e:	60fa      	str	r2, [r7, #12]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1f9      	bne.n	8002038 <RCC_Delay+0x1c>
}
 8002044:	bf00      	nop
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	20000004 	.word	0x20000004
 8002054:	10624dd3 	.word	0x10624dd3

08002058 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d07d      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002078:	4b4f      	ldr	r3, [pc, #316]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10d      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002084:	4b4c      	ldr	r3, [pc, #304]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	4a4b      	ldr	r2, [pc, #300]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800208a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800208e:	61d3      	str	r3, [r2, #28]
 8002090:	4b49      	ldr	r3, [pc, #292]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209c:	2301      	movs	r3, #1
 800209e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a0:	4b46      	ldr	r3, [pc, #280]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d118      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ac:	4b43      	ldr	r3, [pc, #268]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a42      	ldr	r2, [pc, #264]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b8:	f7fe fe1c 	bl	8000cf4 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	e008      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c0:	f7fe fe18 	bl	8000cf4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b64      	cmp	r3, #100	; 0x64
 80020cc:	d901      	bls.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e06d      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d2:	4b3a      	ldr	r3, [pc, #232]	; (80021bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020de:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d02e      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d027      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020fc:	4b2e      	ldr	r3, [pc, #184]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002104:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002106:	4b2e      	ldr	r3, [pc, #184]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002108:	2201      	movs	r2, #1
 800210a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800210c:	4b2c      	ldr	r3, [pc, #176]	; (80021c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002112:	4a29      	ldr	r2, [pc, #164]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	d014      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7fe fde7 	bl	8000cf4 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002128:	e00a      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7fe fde3 	bl	8000cf4 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	; 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e036      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002140:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ee      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	4917      	ldr	r1, [pc, #92]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800215a:	4313      	orrs	r3, r2
 800215c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800215e:	7dfb      	ldrb	r3, [r7, #23]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d105      	bne.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002166:	69db      	ldr	r3, [r3, #28]
 8002168:	4a13      	ldr	r2, [pc, #76]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800216e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	490b      	ldr	r1, [pc, #44]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b00      	cmp	r3, #0
 8002198:	d008      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	4904      	ldr	r1, [pc, #16]	; (80021b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	40007000 	.word	0x40007000
 80021c0:	42420440 	.word	0x42420440

080021c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80021c4:	b084      	sub	sp, #16
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	f107 0014 	add.w	r0, r7, #20
 80021d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	b004      	add	sp, #16
 80021e2:	4770      	bx	lr

080021e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80021f4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80021f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002218:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800221c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002224:	b29a      	uxth	r2, r3
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	b29b      	uxth	r3, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	b29b      	uxth	r3, r3
 800222e:	4013      	ands	r3, r2
 8002230:	b29a      	uxth	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	bc80      	pop	{r7}
 8002242:	4770      	bx	lr

08002244 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	460b      	mov	r3, r1
 800224e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr

0800225c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800225c:	b084      	sub	sp, #16
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
 8002266:	f107 0014 	add.w	r0, r7, #20
 800226a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2201      	movs	r2, #1
 8002272:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	b004      	add	sp, #16
 800229a:	4770      	bx	lr

0800229c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800229c:	b480      	push	{r7}
 800229e:	b09d      	sub	sp, #116	; 0x74
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80022be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	78db      	ldrb	r3, [r3, #3]
 80022ca:	2b03      	cmp	r3, #3
 80022cc:	d81f      	bhi.n	800230e <USB_ActivateEndpoint+0x72>
 80022ce:	a201      	add	r2, pc, #4	; (adr r2, 80022d4 <USB_ActivateEndpoint+0x38>)
 80022d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022d4:	080022e5 	.word	0x080022e5
 80022d8:	08002301 	.word	0x08002301
 80022dc:	08002317 	.word	0x08002317
 80022e0:	080022f3 	.word	0x080022f3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80022e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80022e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ec:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80022f0:	e012      	b.n	8002318 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80022f2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80022f6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80022fa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80022fe:	e00b      	b.n	8002318 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002300:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002304:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002308:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800230c:	e004      	b.n	8002318 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8002314:	e000      	b.n	8002318 <USB_ActivateEndpoint+0x7c>
      break;
 8002316:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	441a      	add	r2, r3
 8002322:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8002326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800232a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800232e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002336:	b29b      	uxth	r3, r3
 8002338:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4413      	add	r3, r2
 8002344:	881b      	ldrh	r3, [r3, #0]
 8002346:	b29b      	uxth	r3, r3
 8002348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800234c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002350:	b29a      	uxth	r2, r3
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	b29b      	uxth	r3, r3
 8002358:	4313      	orrs	r3, r2
 800235a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	441a      	add	r2, r3
 8002368:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800236c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800237c:	b29b      	uxth	r3, r3
 800237e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	7b1b      	ldrb	r3, [r3, #12]
 8002384:	2b00      	cmp	r3, #0
 8002386:	f040 8178 	bne.w	800267a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	785b      	ldrb	r3, [r3, #1]
 800238e:	2b00      	cmp	r3, #0
 8002390:	f000 8084 	beq.w	800249c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800239e:	b29b      	uxth	r3, r3
 80023a0:	461a      	mov	r2, r3
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	4413      	add	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	011a      	lsls	r2, r3, #4
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	4413      	add	r3, r2
 80023b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	88db      	ldrh	r3, [r3, #6]
 80023bc:	085b      	lsrs	r3, r3, #1
 80023be:	b29b      	uxth	r3, r3
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	881b      	ldrh	r3, [r3, #0]
 80023d4:	827b      	strh	r3, [r7, #18]
 80023d6:	8a7b      	ldrh	r3, [r7, #18]
 80023d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d01b      	beq.n	8002418 <USB_ActivateEndpoint+0x17c>
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	881b      	ldrh	r3, [r3, #0]
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023f6:	823b      	strh	r3, [r7, #16]
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	441a      	add	r2, r3
 8002402:	8a3b      	ldrh	r3, [r7, #16]
 8002404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800240c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002410:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002414:	b29b      	uxth	r3, r3
 8002416:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	78db      	ldrb	r3, [r3, #3]
 800241c:	2b01      	cmp	r3, #1
 800241e:	d020      	beq.n	8002462 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	b29b      	uxth	r3, r3
 800242e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002436:	81bb      	strh	r3, [r7, #12]
 8002438:	89bb      	ldrh	r3, [r7, #12]
 800243a:	f083 0320 	eor.w	r3, r3, #32
 800243e:	81bb      	strh	r3, [r7, #12]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	441a      	add	r2, r3
 800244a:	89bb      	ldrh	r3, [r7, #12]
 800244c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800245c:	b29b      	uxth	r3, r3
 800245e:	8013      	strh	r3, [r2, #0]
 8002460:	e2d5      	b.n	8002a0e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	881b      	ldrh	r3, [r3, #0]
 800246e:	b29b      	uxth	r3, r3
 8002470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002478:	81fb      	strh	r3, [r7, #14]
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	441a      	add	r2, r3
 8002484:	89fb      	ldrh	r3, [r7, #14]
 8002486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800248a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800248e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002496:	b29b      	uxth	r3, r3
 8002498:	8013      	strh	r3, [r2, #0]
 800249a:	e2b8      	b.n	8002a0e <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	633b      	str	r3, [r7, #48]	; 0x30
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ac:	4413      	add	r3, r2
 80024ae:	633b      	str	r3, [r7, #48]	; 0x30
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	011a      	lsls	r2, r3, #4
 80024b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b8:	4413      	add	r3, r2
 80024ba:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	88db      	ldrh	r3, [r3, #6]
 80024c4:	085b      	lsrs	r3, r3, #1
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ce:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024da:	b29b      	uxth	r3, r3
 80024dc:	461a      	mov	r2, r3
 80024de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e0:	4413      	add	r3, r2
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	011a      	lsls	r2, r3, #4
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	4413      	add	r3, r2
 80024ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024fe:	b29a      	uxth	r2, r3
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	801a      	strh	r2, [r3, #0]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	2b3e      	cmp	r3, #62	; 0x3e
 800250a:	d91d      	bls.n	8002548 <USB_ActivateEndpoint+0x2ac>
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	095b      	lsrs	r3, r3, #5
 8002512:	66bb      	str	r3, [r7, #104]	; 0x68
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f003 031f 	and.w	r3, r3, #31
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <USB_ActivateEndpoint+0x28a>
 8002520:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002522:	3b01      	subs	r3, #1
 8002524:	66bb      	str	r3, [r7, #104]	; 0x68
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	b29a      	uxth	r2, r3
 800252c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800252e:	b29b      	uxth	r3, r3
 8002530:	029b      	lsls	r3, r3, #10
 8002532:	b29b      	uxth	r3, r3
 8002534:	4313      	orrs	r3, r2
 8002536:	b29b      	uxth	r3, r3
 8002538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800253c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002540:	b29a      	uxth	r2, r3
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	801a      	strh	r2, [r3, #0]
 8002546:	e026      	b.n	8002596 <USB_ActivateEndpoint+0x2fa>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <USB_ActivateEndpoint+0x2ca>
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800255a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800255e:	b29a      	uxth	r2, r3
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	801a      	strh	r2, [r3, #0]
 8002564:	e017      	b.n	8002596 <USB_ActivateEndpoint+0x2fa>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	085b      	lsrs	r3, r3, #1
 800256c:	66bb      	str	r3, [r7, #104]	; 0x68
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d002      	beq.n	8002580 <USB_ActivateEndpoint+0x2e4>
 800257a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800257c:	3301      	adds	r3, #1
 800257e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	b29a      	uxth	r2, r3
 8002586:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002588:	b29b      	uxth	r3, r3
 800258a:	029b      	lsls	r3, r3, #10
 800258c:	b29b      	uxth	r3, r3
 800258e:	4313      	orrs	r3, r2
 8002590:	b29a      	uxth	r2, r3
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4413      	add	r3, r2
 80025a0:	881b      	ldrh	r3, [r3, #0]
 80025a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80025a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80025a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d01b      	beq.n	80025e6 <USB_ActivateEndpoint+0x34a>
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4413      	add	r3, r2
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c4:	843b      	strh	r3, [r7, #32]
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	441a      	add	r2, r3
 80025d0:	8c3b      	ldrh	r3, [r7, #32]
 80025d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d124      	bne.n	8002638 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002604:	83bb      	strh	r3, [r7, #28]
 8002606:	8bbb      	ldrh	r3, [r7, #28]
 8002608:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800260c:	83bb      	strh	r3, [r7, #28]
 800260e:	8bbb      	ldrh	r3, [r7, #28]
 8002610:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002614:	83bb      	strh	r3, [r7, #28]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	441a      	add	r2, r3
 8002620:	8bbb      	ldrh	r3, [r7, #28]
 8002622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800262a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800262e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002632:	b29b      	uxth	r3, r3
 8002634:	8013      	strh	r3, [r2, #0]
 8002636:	e1ea      	b.n	8002a0e <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	b29b      	uxth	r3, r3
 8002646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800264a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800264e:	83fb      	strh	r3, [r7, #30]
 8002650:	8bfb      	ldrh	r3, [r7, #30]
 8002652:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002656:	83fb      	strh	r3, [r7, #30]
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	441a      	add	r2, r3
 8002662:	8bfb      	ldrh	r3, [r7, #30]
 8002664:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002668:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800266c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002674:	b29b      	uxth	r3, r3
 8002676:	8013      	strh	r3, [r2, #0]
 8002678:	e1c9      	b.n	8002a0e <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	78db      	ldrb	r3, [r3, #3]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d11e      	bne.n	80026c0 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002698:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	441a      	add	r2, r3
 80026a6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80026aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026b2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80026b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	8013      	strh	r3, [r2, #0]
 80026be:	e01d      	b.n	80026fc <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4413      	add	r3, r2
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80026d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	441a      	add	r2, r3
 80026e4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80026e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002706:	b29b      	uxth	r3, r3
 8002708:	461a      	mov	r2, r3
 800270a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800270c:	4413      	add	r3, r2
 800270e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	011a      	lsls	r2, r3, #4
 8002716:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002718:	4413      	add	r3, r2
 800271a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800271e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	891b      	ldrh	r3, [r3, #8]
 8002724:	085b      	lsrs	r3, r3, #1
 8002726:	b29b      	uxth	r3, r3
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800272e:	801a      	strh	r2, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	657b      	str	r3, [r7, #84]	; 0x54
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800273a:	b29b      	uxth	r3, r3
 800273c:	461a      	mov	r2, r3
 800273e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002740:	4413      	add	r3, r2
 8002742:	657b      	str	r3, [r7, #84]	; 0x54
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	011a      	lsls	r2, r3, #4
 800274a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800274c:	4413      	add	r3, r2
 800274e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002752:	653b      	str	r3, [r7, #80]	; 0x50
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	895b      	ldrh	r3, [r3, #10]
 8002758:	085b      	lsrs	r3, r3, #1
 800275a:	b29b      	uxth	r3, r3
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002762:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	785b      	ldrb	r3, [r3, #1]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f040 8093 	bne.w	8002894 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800277e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d01b      	beq.n	80027c2 <USB_ActivateEndpoint+0x526>
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	881b      	ldrh	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800279c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	441a      	add	r2, r3
 80027ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80027ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027be:	b29b      	uxth	r3, r3
 80027c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80027d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80027d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01b      	beq.n	8002812 <USB_ActivateEndpoint+0x576>
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	4413      	add	r3, r2
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	441a      	add	r2, r3
 80027fc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80027fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800280a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800280e:	b29b      	uxth	r3, r3
 8002810:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002828:	873b      	strh	r3, [r7, #56]	; 0x38
 800282a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800282c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002830:	873b      	strh	r3, [r7, #56]	; 0x38
 8002832:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002834:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002838:	873b      	strh	r3, [r7, #56]	; 0x38
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	441a      	add	r2, r3
 8002844:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002846:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800284a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800284e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002856:	b29b      	uxth	r3, r3
 8002858:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4413      	add	r3, r2
 8002864:	881b      	ldrh	r3, [r3, #0]
 8002866:	b29b      	uxth	r3, r3
 8002868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800286c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002870:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	441a      	add	r2, r3
 800287c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800287e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800288a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800288e:	b29b      	uxth	r3, r3
 8002890:	8013      	strh	r3, [r2, #0]
 8002892:	e0bc      	b.n	8002a0e <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	4413      	add	r3, r2
 800289e:	881b      	ldrh	r3, [r3, #0]
 80028a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01d      	beq.n	80028ec <USB_ActivateEndpoint+0x650>
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028c6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	441a      	add	r2, r3
 80028d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80028d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	4413      	add	r3, r2
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80028fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01d      	beq.n	8002944 <USB_ActivateEndpoint+0x6a8>
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	b29b      	uxth	r3, r3
 8002916:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800291a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	441a      	add	r2, r3
 800292c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800293c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002940:	b29b      	uxth	r3, r3
 8002942:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	78db      	ldrb	r3, [r3, #3]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d024      	beq.n	8002996 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	b29b      	uxth	r3, r3
 800295a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800295e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002962:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002966:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800296a:	f083 0320 	eor.w	r3, r3, #32
 800296e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	441a      	add	r2, r3
 800297c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800298c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002990:	b29b      	uxth	r3, r3
 8002992:	8013      	strh	r3, [r2, #0]
 8002994:	e01d      	b.n	80029d2 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	441a      	add	r2, r3
 80029ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80029be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	881b      	ldrh	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	441a      	add	r2, r3
 80029f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80029fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8002a0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3774      	adds	r7, #116	; 0x74
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b08d      	sub	sp, #52	; 0x34
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	7b1b      	ldrb	r3, [r3, #12]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f040 808e 	bne.w	8002b4c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	785b      	ldrb	r3, [r3, #1]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d044      	beq.n	8002ac2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	881b      	ldrh	r3, [r3, #0]
 8002a44:	81bb      	strh	r3, [r7, #12]
 8002a46:	89bb      	ldrh	r3, [r7, #12]
 8002a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d01b      	beq.n	8002a88 <USB_DeactivateEndpoint+0x6c>
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	881b      	ldrh	r3, [r3, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a66:	817b      	strh	r3, [r7, #10]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	441a      	add	r2, r3
 8002a72:	897b      	ldrh	r3, [r7, #10]
 8002a74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a9e:	813b      	strh	r3, [r7, #8]
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	441a      	add	r2, r3
 8002aaa:	893b      	ldrh	r3, [r7, #8]
 8002aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	8013      	strh	r3, [r2, #0]
 8002ac0:	e192      	b.n	8002de8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	827b      	strh	r3, [r7, #18]
 8002ad0:	8a7b      	ldrh	r3, [r7, #18]
 8002ad2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d01b      	beq.n	8002b12 <USB_DeactivateEndpoint+0xf6>
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	4413      	add	r3, r2
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af0:	823b      	strh	r3, [r7, #16]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	441a      	add	r2, r3
 8002afc:	8a3b      	ldrh	r3, [r7, #16]
 8002afe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b28:	81fb      	strh	r3, [r7, #14]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	441a      	add	r2, r3
 8002b34:	89fb      	ldrh	r3, [r7, #14]
 8002b36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	8013      	strh	r3, [r2, #0]
 8002b4a:	e14d      	b.n	8002de8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	785b      	ldrb	r3, [r3, #1]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f040 80a5 	bne.w	8002ca0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	843b      	strh	r3, [r7, #32]
 8002b64:	8c3b      	ldrh	r3, [r7, #32]
 8002b66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01b      	beq.n	8002ba6 <USB_DeactivateEndpoint+0x18a>
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b84:	83fb      	strh	r3, [r7, #30]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	441a      	add	r2, r3
 8002b90:	8bfb      	ldrh	r3, [r7, #30]
 8002b92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	83bb      	strh	r3, [r7, #28]
 8002bb4:	8bbb      	ldrh	r3, [r7, #28]
 8002bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01b      	beq.n	8002bf6 <USB_DeactivateEndpoint+0x1da>
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd4:	837b      	strh	r3, [r7, #26]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	441a      	add	r2, r3
 8002be0:	8b7b      	ldrh	r3, [r7, #26]
 8002be2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002be6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0c:	833b      	strh	r3, [r7, #24]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	441a      	add	r2, r3
 8002c18:	8b3b      	ldrh	r3, [r7, #24]
 8002c1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c44:	82fb      	strh	r3, [r7, #22]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	441a      	add	r2, r3
 8002c50:	8afb      	ldrh	r3, [r7, #22]
 8002c52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c7c:	82bb      	strh	r3, [r7, #20]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	441a      	add	r2, r3
 8002c88:	8abb      	ldrh	r3, [r7, #20]
 8002c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	8013      	strh	r3, [r2, #0]
 8002c9e:	e0a3      	b.n	8002de8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002cae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01b      	beq.n	8002cf0 <USB_DeactivateEndpoint+0x2d4>
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cce:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	441a      	add	r2, r3
 8002cda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002cdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ce0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ce4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	881b      	ldrh	r3, [r3, #0]
 8002cfc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002cfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d01b      	beq.n	8002d40 <USB_DeactivateEndpoint+0x324>
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	881b      	ldrh	r3, [r3, #0]
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	441a      	add	r2, r3
 8002d2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d38:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d56:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	441a      	add	r2, r3
 8002d62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002d64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d8e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	441a      	add	r2, r3
 8002d9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002da0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002da4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc6:	847b      	strh	r3, [r7, #34]	; 0x22
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	441a      	add	r2, r3
 8002dd2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3734      	adds	r7, #52	; 0x34
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bc80      	pop	{r7}
 8002df2:	4770      	bx	lr

08002df4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b0c2      	sub	sp, #264	; 0x108
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002dfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e02:	6018      	str	r0, [r3, #0]
 8002e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e0c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	785b      	ldrb	r3, [r3, #1]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	f040 86b7 	bne.w	8003b8e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699a      	ldr	r2, [r3, #24]
 8002e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d908      	bls.n	8002e4e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8002e3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e4c:	e007      	b.n	8002e5e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8002e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8002e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	7b1b      	ldrb	r3, [r3, #12]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d13a      	bne.n	8002ee4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6959      	ldr	r1, [r3, #20]
 8002e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	88da      	ldrh	r2, [r3, #6]
 8002e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002e8a:	b29b      	uxth	r3, r3
 8002e8c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8002e90:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8002e94:	6800      	ldr	r0, [r0, #0]
 8002e96:	f001 fbcd 	bl	8004634 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002e9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002eaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4413      	add	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002ec2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	011a      	lsls	r2, r3, #4
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	801a      	strh	r2, [r3, #0]
 8002ee0:	f000 be1f 	b.w	8003b22 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8002ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	78db      	ldrb	r3, [r3, #3]
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	f040 8462 	bne.w	80037ba <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8002ef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002efa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a1a      	ldr	r2, [r3, #32]
 8002f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	f240 83df 	bls.w	80036d2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8002f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8002f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	441a      	add	r2, r3
 8002f58:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002f5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f64:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8002f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	6a1a      	ldr	r2, [r3, #32]
 8002f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002f80:	1ad2      	subs	r2, r2, r3
 8002f82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 81c7 	beq.w	8003344 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	785b      	ldrb	r3, [r3, #1]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d177      	bne.n	80030c2 <USB_EPStartXfer+0x2ce>
 8002fd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002fe2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	4413      	add	r3, r2
 8002ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	011a      	lsls	r2, r3, #4
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	4413      	add	r3, r2
 8003008:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800300c:	627b      	str	r3, [r7, #36]	; 0x24
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	b29b      	uxth	r3, r3
 8003014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003018:	b29a      	uxth	r2, r3
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	801a      	strh	r2, [r3, #0]
 800301e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003022:	2b3e      	cmp	r3, #62	; 0x3e
 8003024:	d921      	bls.n	800306a <USB_EPStartXfer+0x276>
 8003026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	2b00      	cmp	r3, #0
 800303a:	d104      	bne.n	8003046 <USB_EPStartXfer+0x252>
 800303c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003040:	3b01      	subs	r3, #1
 8003042:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	b29a      	uxth	r2, r3
 800304c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8003050:	b29b      	uxth	r3, r3
 8003052:	029b      	lsls	r3, r3, #10
 8003054:	b29b      	uxth	r3, r3
 8003056:	4313      	orrs	r3, r2
 8003058:	b29b      	uxth	r3, r3
 800305a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800305e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003062:	b29a      	uxth	r2, r3
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	801a      	strh	r2, [r3, #0]
 8003068:	e050      	b.n	800310c <USB_EPStartXfer+0x318>
 800306a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800306e:	2b00      	cmp	r3, #0
 8003070:	d10a      	bne.n	8003088 <USB_EPStartXfer+0x294>
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	881b      	ldrh	r3, [r3, #0]
 8003076:	b29b      	uxth	r3, r3
 8003078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800307c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003080:	b29a      	uxth	r2, r3
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	801a      	strh	r2, [r3, #0]
 8003086:	e041      	b.n	800310c <USB_EPStartXfer+0x318>
 8003088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800308c:	085b      	lsrs	r3, r3, #1
 800308e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d004      	beq.n	80030a8 <USB_EPStartXfer+0x2b4>
 800309e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80030a2:	3301      	adds	r3, #1
 80030a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80030a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	029b      	lsls	r3, r3, #10
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	4313      	orrs	r3, r2
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	801a      	strh	r2, [r3, #0]
 80030c0:	e024      	b.n	800310c <USB_EPStartXfer+0x318>
 80030c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80030c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	785b      	ldrb	r3, [r3, #1]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d11c      	bne.n	800310c <USB_EPStartXfer+0x318>
 80030d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80030d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e6:	4413      	add	r3, r2
 80030e8:	633b      	str	r3, [r7, #48]	; 0x30
 80030ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80030ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	011a      	lsls	r2, r3, #4
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	4413      	add	r3, r2
 80030fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003106:	b29a      	uxth	r2, r3
 8003108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800310a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800310c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	895b      	ldrh	r3, [r3, #10]
 8003118:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800311c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	6959      	ldr	r1, [r3, #20]
 8003128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800312c:	b29b      	uxth	r3, r3
 800312e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003132:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003136:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800313a:	6800      	ldr	r0, [r0, #0]
 800313c:	f001 fa7a 	bl	8004634 <USB_WritePMA>
            ep->xfer_buff += len;
 8003140:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003144:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695a      	ldr	r2, [r3, #20]
 800314c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003150:	441a      	add	r2, r3
 8003152:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003156:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800315e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6a1a      	ldr	r2, [r3, #32]
 800316a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800316e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	429a      	cmp	r2, r3
 8003178:	d90f      	bls.n	800319a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800317a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800317e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6a1a      	ldr	r2, [r3, #32]
 8003186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800318a:	1ad2      	subs	r2, r2, r3
 800318c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	621a      	str	r2, [r3, #32]
 8003198:	e00e      	b.n	80031b8 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800319a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800319e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80031aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80031ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2200      	movs	r2, #0
 80031b6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80031b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80031bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	785b      	ldrb	r3, [r3, #1]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d177      	bne.n	80032b8 <USB_EPStartXfer+0x4c4>
 80031c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80031cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	61bb      	str	r3, [r7, #24]
 80031d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80031d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	4413      	add	r3, r2
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80031f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	011a      	lsls	r2, r3, #4
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	4413      	add	r3, r2
 80031fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800320e:	b29a      	uxth	r2, r3
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	801a      	strh	r2, [r3, #0]
 8003214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003218:	2b3e      	cmp	r3, #62	; 0x3e
 800321a:	d921      	bls.n	8003260 <USB_EPStartXfer+0x46c>
 800321c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800322a:	f003 031f 	and.w	r3, r3, #31
 800322e:	2b00      	cmp	r3, #0
 8003230:	d104      	bne.n	800323c <USB_EPStartXfer+0x448>
 8003232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003236:	3b01      	subs	r3, #1
 8003238:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	881b      	ldrh	r3, [r3, #0]
 8003240:	b29a      	uxth	r2, r3
 8003242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003246:	b29b      	uxth	r3, r3
 8003248:	029b      	lsls	r3, r3, #10
 800324a:	b29b      	uxth	r3, r3
 800324c:	4313      	orrs	r3, r2
 800324e:	b29b      	uxth	r3, r3
 8003250:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003254:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003258:	b29a      	uxth	r2, r3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	801a      	strh	r2, [r3, #0]
 800325e:	e056      	b.n	800330e <USB_EPStartXfer+0x51a>
 8003260:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10a      	bne.n	800327e <USB_EPStartXfer+0x48a>
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003272:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003276:	b29a      	uxth	r2, r3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	801a      	strh	r2, [r3, #0]
 800327c:	e047      	b.n	800330e <USB_EPStartXfer+0x51a>
 800327e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d004      	beq.n	800329e <USB_EPStartXfer+0x4aa>
 8003294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003298:	3301      	adds	r3, #1
 800329a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	881b      	ldrh	r3, [r3, #0]
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	029b      	lsls	r3, r3, #10
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	4313      	orrs	r3, r2
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	801a      	strh	r2, [r3, #0]
 80032b6:	e02a      	b.n	800330e <USB_EPStartXfer+0x51a>
 80032b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80032bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	785b      	ldrb	r3, [r3, #1]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d122      	bne.n	800330e <USB_EPStartXfer+0x51a>
 80032c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80032cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	623b      	str	r3, [r7, #32]
 80032d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80032d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	4413      	add	r3, r2
 80032ea:	623b      	str	r3, [r7, #32]
 80032ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80032f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	011a      	lsls	r2, r3, #4
 80032fa:	6a3b      	ldr	r3, [r7, #32]
 80032fc:	4413      	add	r3, r2
 80032fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003308:	b29a      	uxth	r2, r3
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800330e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003312:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	891b      	ldrh	r3, [r3, #8]
 800331a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800331e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6959      	ldr	r1, [r3, #20]
 800332a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800332e:	b29b      	uxth	r3, r3
 8003330:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003334:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003338:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800333c:	6800      	ldr	r0, [r0, #0]
 800333e:	f001 f979 	bl	8004634 <USB_WritePMA>
 8003342:	e3ee      	b.n	8003b22 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	785b      	ldrb	r3, [r3, #1]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d177      	bne.n	8003444 <USB_EPStartXfer+0x650>
 8003354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003358:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003364:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800336e:	b29b      	uxth	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003374:	4413      	add	r3, r2
 8003376:	64bb      	str	r3, [r7, #72]	; 0x48
 8003378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800337c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	011a      	lsls	r2, r3, #4
 8003386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003388:	4413      	add	r3, r2
 800338a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800338e:	647b      	str	r3, [r7, #68]	; 0x44
 8003390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003392:	881b      	ldrh	r3, [r3, #0]
 8003394:	b29b      	uxth	r3, r3
 8003396:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800339a:	b29a      	uxth	r2, r3
 800339c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800339e:	801a      	strh	r2, [r3, #0]
 80033a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033a4:	2b3e      	cmp	r3, #62	; 0x3e
 80033a6:	d921      	bls.n	80033ec <USB_EPStartXfer+0x5f8>
 80033a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80033b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d104      	bne.n	80033c8 <USB_EPStartXfer+0x5d4>
 80033be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033c2:	3b01      	subs	r3, #1
 80033c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80033c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	029b      	lsls	r3, r3, #10
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	4313      	orrs	r3, r2
 80033da:	b29b      	uxth	r3, r3
 80033dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033e8:	801a      	strh	r2, [r3, #0]
 80033ea:	e056      	b.n	800349a <USB_EPStartXfer+0x6a6>
 80033ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10a      	bne.n	800340a <USB_EPStartXfer+0x616>
 80033f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f6:	881b      	ldrh	r3, [r3, #0]
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003402:	b29a      	uxth	r2, r3
 8003404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003406:	801a      	strh	r2, [r3, #0]
 8003408:	e047      	b.n	800349a <USB_EPStartXfer+0x6a6>
 800340a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003414:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d004      	beq.n	800342a <USB_EPStartXfer+0x636>
 8003420:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003424:	3301      	adds	r3, #1
 8003426:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800342a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	b29a      	uxth	r2, r3
 8003430:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003434:	b29b      	uxth	r3, r3
 8003436:	029b      	lsls	r3, r3, #10
 8003438:	b29b      	uxth	r3, r3
 800343a:	4313      	orrs	r3, r2
 800343c:	b29a      	uxth	r2, r3
 800343e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003440:	801a      	strh	r2, [r3, #0]
 8003442:	e02a      	b.n	800349a <USB_EPStartXfer+0x6a6>
 8003444:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003448:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	785b      	ldrb	r3, [r3, #1]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d122      	bne.n	800349a <USB_EPStartXfer+0x6a6>
 8003454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003458:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	653b      	str	r3, [r7, #80]	; 0x50
 8003460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003464:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800346e:	b29b      	uxth	r3, r3
 8003470:	461a      	mov	r2, r3
 8003472:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003474:	4413      	add	r3, r2
 8003476:	653b      	str	r3, [r7, #80]	; 0x50
 8003478:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800347c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	011a      	lsls	r2, r3, #4
 8003486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003488:	4413      	add	r3, r2
 800348a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800348e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003494:	b29a      	uxth	r2, r3
 8003496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003498:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800349a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800349e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	891b      	ldrh	r3, [r3, #8]
 80034a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80034aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6959      	ldr	r1, [r3, #20]
 80034b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80034c0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80034c4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80034c8:	6800      	ldr	r0, [r0, #0]
 80034ca:	f001 f8b3 	bl	8004634 <USB_WritePMA>
            ep->xfer_buff += len;
 80034ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80034de:	441a      	add	r2, r3
 80034e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80034ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6a1a      	ldr	r2, [r3, #32]
 80034f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80034fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	429a      	cmp	r2, r3
 8003506:	d90f      	bls.n	8003528 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8003508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800350c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6a1a      	ldr	r2, [r3, #32]
 8003514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003518:	1ad2      	subs	r2, r2, r3
 800351a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800351e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	621a      	str	r2, [r3, #32]
 8003526:	e00e      	b.n	8003546 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8003528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800352c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8003538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800353c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2200      	movs	r2, #0
 8003544:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800354a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	643b      	str	r3, [r7, #64]	; 0x40
 8003552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	785b      	ldrb	r3, [r3, #1]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d177      	bne.n	8003652 <USB_EPStartXfer+0x85e>
 8003562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	63bb      	str	r3, [r7, #56]	; 0x38
 800356e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003572:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800357c:	b29b      	uxth	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003582:	4413      	add	r3, r2
 8003584:	63bb      	str	r3, [r7, #56]	; 0x38
 8003586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800358a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	011a      	lsls	r2, r3, #4
 8003594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003596:	4413      	add	r3, r2
 8003598:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800359c:	637b      	str	r3, [r7, #52]	; 0x34
 800359e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035ac:	801a      	strh	r2, [r3, #0]
 80035ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035b2:	2b3e      	cmp	r3, #62	; 0x3e
 80035b4:	d921      	bls.n	80035fa <USB_EPStartXfer+0x806>
 80035b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035ba:	095b      	lsrs	r3, r3, #5
 80035bc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80035c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d104      	bne.n	80035d6 <USB_EPStartXfer+0x7e2>
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d0:	3b01      	subs	r3, #1
 80035d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80035d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d8:	881b      	ldrh	r3, [r3, #0]
 80035da:	b29a      	uxth	r2, r3
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	029b      	lsls	r3, r3, #10
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	4313      	orrs	r3, r2
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035f6:	801a      	strh	r2, [r3, #0]
 80035f8:	e050      	b.n	800369c <USB_EPStartXfer+0x8a8>
 80035fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10a      	bne.n	8003618 <USB_EPStartXfer+0x824>
 8003602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003604:	881b      	ldrh	r3, [r3, #0]
 8003606:	b29b      	uxth	r3, r3
 8003608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800360c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003610:	b29a      	uxth	r2, r3
 8003612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003614:	801a      	strh	r2, [r3, #0]
 8003616:	e041      	b.n	800369c <USB_EPStartXfer+0x8a8>
 8003618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800361c:	085b      	lsrs	r3, r3, #1
 800361e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d004      	beq.n	8003638 <USB_EPStartXfer+0x844>
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003632:	3301      	adds	r3, #1
 8003634:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	b29a      	uxth	r2, r3
 800363e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003642:	b29b      	uxth	r3, r3
 8003644:	029b      	lsls	r3, r3, #10
 8003646:	b29b      	uxth	r3, r3
 8003648:	4313      	orrs	r3, r2
 800364a:	b29a      	uxth	r2, r3
 800364c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364e:	801a      	strh	r2, [r3, #0]
 8003650:	e024      	b.n	800369c <USB_EPStartXfer+0x8a8>
 8003652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	785b      	ldrb	r3, [r3, #1]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d11c      	bne.n	800369c <USB_EPStartXfer+0x8a8>
 8003662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003670:	b29b      	uxth	r3, r3
 8003672:	461a      	mov	r2, r3
 8003674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003676:	4413      	add	r3, r2
 8003678:	643b      	str	r3, [r7, #64]	; 0x40
 800367a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800367e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	011a      	lsls	r2, r3, #4
 8003688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800368a:	4413      	add	r3, r2
 800368c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003690:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003696:	b29a      	uxth	r2, r3
 8003698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800369c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	895b      	ldrh	r3, [r3, #10]
 80036a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80036ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6959      	ldr	r1, [r3, #20]
 80036b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80036bc:	b29b      	uxth	r3, r3
 80036be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80036c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80036c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80036ca:	6800      	ldr	r0, [r0, #0]
 80036cc:	f000 ffb2 	bl	8004634 <USB_WritePMA>
 80036d0:	e227      	b.n	8003b22 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80036d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80036e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80036f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8003704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003708:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800370c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003710:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800371a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	441a      	add	r2, r3
 8003726:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800372a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800372e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003732:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800373a:	b29b      	uxth	r3, r3
 800373c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800373e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003742:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	65fb      	str	r3, [r7, #92]	; 0x5c
 800374a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800374e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003758:	b29b      	uxth	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800375e:	4413      	add	r3, r2
 8003760:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	011a      	lsls	r2, r3, #4
 8003770:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003772:	4413      	add	r3, r2
 8003774:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003778:	65bb      	str	r3, [r7, #88]	; 0x58
 800377a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800377e:	b29a      	uxth	r2, r3
 8003780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003782:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	891b      	ldrh	r3, [r3, #8]
 8003790:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003794:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003798:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6959      	ldr	r1, [r3, #20]
 80037a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80037aa:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80037ae:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80037b2:	6800      	ldr	r0, [r0, #0]
 80037b4:	f000 ff3e 	bl	8004634 <USB_WritePMA>
 80037b8:	e1b3      	b.n	8003b22 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80037ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6a1a      	ldr	r2, [r3, #32]
 80037c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80037ca:	1ad2      	subs	r2, r2, r3
 80037cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80037d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80037e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80c6 	beq.w	800398c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003804:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	673b      	str	r3, [r7, #112]	; 0x70
 800380c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	785b      	ldrb	r3, [r3, #1]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d177      	bne.n	800390c <USB_EPStartXfer+0xb18>
 800381c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003820:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	66bb      	str	r3, [r7, #104]	; 0x68
 8003828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800382c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003836:	b29b      	uxth	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800383c:	4413      	add	r3, r2
 800383e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003840:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003844:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	011a      	lsls	r2, r3, #4
 800384e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003850:	4413      	add	r3, r2
 8003852:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003856:	667b      	str	r3, [r7, #100]	; 0x64
 8003858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	b29b      	uxth	r3, r3
 800385e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003862:	b29a      	uxth	r2, r3
 8003864:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003866:	801a      	strh	r2, [r3, #0]
 8003868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800386c:	2b3e      	cmp	r3, #62	; 0x3e
 800386e:	d921      	bls.n	80038b4 <USB_EPStartXfer+0xac0>
 8003870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003874:	095b      	lsrs	r3, r3, #5
 8003876:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800387a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800387e:	f003 031f 	and.w	r3, r3, #31
 8003882:	2b00      	cmp	r3, #0
 8003884:	d104      	bne.n	8003890 <USB_EPStartXfer+0xa9c>
 8003886:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800388a:	3b01      	subs	r3, #1
 800388c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003890:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	b29a      	uxth	r2, r3
 8003896:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800389a:	b29b      	uxth	r3, r3
 800389c:	029b      	lsls	r3, r3, #10
 800389e:	b29b      	uxth	r3, r3
 80038a0:	4313      	orrs	r3, r2
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038b0:	801a      	strh	r2, [r3, #0]
 80038b2:	e050      	b.n	8003956 <USB_EPStartXfer+0xb62>
 80038b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <USB_EPStartXfer+0xade>
 80038bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ce:	801a      	strh	r2, [r3, #0]
 80038d0:	e041      	b.n	8003956 <USB_EPStartXfer+0xb62>
 80038d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038d6:	085b      	lsrs	r3, r3, #1
 80038d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80038dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d004      	beq.n	80038f2 <USB_EPStartXfer+0xafe>
 80038e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80038ec:	3301      	adds	r3, #1
 80038ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80038f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f4:	881b      	ldrh	r3, [r3, #0]
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	029b      	lsls	r3, r3, #10
 8003900:	b29b      	uxth	r3, r3
 8003902:	4313      	orrs	r3, r2
 8003904:	b29a      	uxth	r2, r3
 8003906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003908:	801a      	strh	r2, [r3, #0]
 800390a:	e024      	b.n	8003956 <USB_EPStartXfer+0xb62>
 800390c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	785b      	ldrb	r3, [r3, #1]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d11c      	bne.n	8003956 <USB_EPStartXfer+0xb62>
 800391c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800392a:	b29b      	uxth	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003930:	4413      	add	r3, r2
 8003932:	673b      	str	r3, [r7, #112]	; 0x70
 8003934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	011a      	lsls	r2, r3, #4
 8003942:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003944:	4413      	add	r3, r2
 8003946:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800394a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800394c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003950:	b29a      	uxth	r2, r3
 8003952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003954:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8003956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800395a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	895b      	ldrh	r3, [r3, #10]
 8003962:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800396a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6959      	ldr	r1, [r3, #20]
 8003972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003976:	b29b      	uxth	r3, r3
 8003978:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800397c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003980:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003984:	6800      	ldr	r0, [r0, #0]
 8003986:	f000 fe55 	bl	8004634 <USB_WritePMA>
 800398a:	e0ca      	b.n	8003b22 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800398c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003990:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	785b      	ldrb	r3, [r3, #1]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d177      	bne.n	8003a8c <USB_EPStartXfer+0xc98>
 800399c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039bc:	4413      	add	r3, r2
 80039be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80039c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80039c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	011a      	lsls	r2, r3, #4
 80039ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80039d0:	4413      	add	r3, r2
 80039d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80039d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80039d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039e6:	801a      	strh	r2, [r3, #0]
 80039e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039ec:	2b3e      	cmp	r3, #62	; 0x3e
 80039ee:	d921      	bls.n	8003a34 <USB_EPStartXfer+0xc40>
 80039f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039f4:	095b      	lsrs	r3, r3, #5
 80039f6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80039fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d104      	bne.n	8003a10 <USB_EPStartXfer+0xc1c>
 8003a06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003a10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	029b      	lsls	r3, r3, #10
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	4313      	orrs	r3, r2
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a30:	801a      	strh	r2, [r3, #0]
 8003a32:	e05c      	b.n	8003aee <USB_EPStartXfer+0xcfa>
 8003a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10a      	bne.n	8003a52 <USB_EPStartXfer+0xc5e>
 8003a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a4e:	801a      	strh	r2, [r3, #0]
 8003a50:	e04d      	b.n	8003aee <USB_EPStartXfer+0xcfa>
 8003a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a56:	085b      	lsrs	r3, r3, #1
 8003a58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <USB_EPStartXfer+0xc7e>
 8003a68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003a72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	029b      	lsls	r3, r3, #10
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	4313      	orrs	r3, r2
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a88:	801a      	strh	r2, [r3, #0]
 8003a8a:	e030      	b.n	8003aee <USB_EPStartXfer+0xcfa>
 8003a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	785b      	ldrb	r3, [r3, #1]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d128      	bne.n	8003aee <USB_EPStartXfer+0xcfa>
 8003a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003aa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003aaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003aae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	461a      	mov	r2, r3
 8003abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	011a      	lsls	r2, r3, #4
 8003ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ad8:	4413      	add	r3, r2
 8003ada:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ade:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003aec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8003aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	891b      	ldrh	r3, [r3, #8]
 8003afa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6959      	ldr	r1, [r3, #20]
 8003b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8003b14:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8003b18:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8003b1c:	6800      	ldr	r0, [r0, #0]
 8003b1e:	f000 fd89 	bl	8004634 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b48:	817b      	strh	r3, [r7, #10]
 8003b4a:	897b      	ldrh	r3, [r7, #10]
 8003b4c:	f083 0310 	eor.w	r3, r3, #16
 8003b50:	817b      	strh	r3, [r7, #10]
 8003b52:	897b      	ldrh	r3, [r7, #10]
 8003b54:	f083 0320 	eor.w	r3, r3, #32
 8003b58:	817b      	strh	r3, [r7, #10]
 8003b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	441a      	add	r2, r3
 8003b74:	897b      	ldrh	r3, [r7, #10]
 8003b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	8013      	strh	r3, [r2, #0]
 8003b8a:	f000 bcde 	b.w	800454a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8003b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	7b1b      	ldrb	r3, [r3, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f040 80bb 	bne.w	8003d16 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8003ba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	699a      	ldr	r2, [r3, #24]
 8003bac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d917      	bls.n	8003bec <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8003bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8003bcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	699a      	ldr	r2, [r3, #24]
 8003bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003bdc:	1ad2      	subs	r2, r2, r3
 8003bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003be2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	619a      	str	r2, [r3, #24]
 8003bea:	e00e      	b.n	8003c0a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8003bec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8003bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2200      	movs	r2, #0
 8003c08:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c2e:	4413      	add	r3, r2
 8003c30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003c38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	011a      	lsls	r2, r3, #4
 8003c42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c46:	4413      	add	r3, r2
 8003c48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003c4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c62:	801a      	strh	r2, [r3, #0]
 8003c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c68:	2b3e      	cmp	r3, #62	; 0x3e
 8003c6a:	d924      	bls.n	8003cb6 <USB_EPStartXfer+0xec2>
 8003c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d104      	bne.n	8003c8c <USB_EPStartXfer+0xe98>
 8003c82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c86:	3b01      	subs	r3, #1
 8003c88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	029b      	lsls	r3, r3, #10
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cb0:	801a      	strh	r2, [r3, #0]
 8003cb2:	f000 bc10 	b.w	80044d6 <USB_EPStartXfer+0x16e2>
 8003cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10c      	bne.n	8003cd8 <USB_EPStartXfer+0xee4>
 8003cbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cd4:	801a      	strh	r2, [r3, #0]
 8003cd6:	e3fe      	b.n	80044d6 <USB_EPStartXfer+0x16e2>
 8003cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003cdc:	085b      	lsrs	r3, r3, #1
 8003cde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <USB_EPStartXfer+0xf04>
 8003cee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003cfc:	881b      	ldrh	r3, [r3, #0]
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	029b      	lsls	r3, r3, #10
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d12:	801a      	strh	r2, [r3, #0]
 8003d14:	e3df      	b.n	80044d6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8003d16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	78db      	ldrb	r3, [r3, #3]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	f040 8218 	bne.w	8004158 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8003d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	785b      	ldrb	r3, [r3, #1]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f040 809d 	bne.w	8003e74 <USB_EPStartXfer+0x1080>
 8003d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d5e:	4413      	add	r3, r2
 8003d60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	011a      	lsls	r2, r3, #4
 8003d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d76:	4413      	add	r3, r2
 8003d78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003d7c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d80:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003d92:	801a      	strh	r2, [r3, #0]
 8003d94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003d98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	2b3e      	cmp	r3, #62	; 0x3e
 8003da2:	d92b      	bls.n	8003dfc <USB_EPStartXfer+0x1008>
 8003da4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003da8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	095b      	lsrs	r3, r3, #5
 8003db2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d104      	bne.n	8003dd4 <USB_EPStartXfer+0xfe0>
 8003dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003dd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	029b      	lsls	r3, r3, #10
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	4313      	orrs	r3, r2
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003df8:	801a      	strh	r2, [r3, #0]
 8003dfa:	e070      	b.n	8003ede <USB_EPStartXfer+0x10ea>
 8003dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10c      	bne.n	8003e26 <USB_EPStartXfer+0x1032>
 8003e0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e22:	801a      	strh	r2, [r3, #0]
 8003e24:	e05b      	b.n	8003ede <USB_EPStartXfer+0x10ea>
 8003e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	085b      	lsrs	r3, r3, #1
 8003e34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d004      	beq.n	8003e56 <USB_EPStartXfer+0x1062>
 8003e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e50:	3301      	adds	r3, #1
 8003e52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	029b      	lsls	r3, r3, #10
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e70:	801a      	strh	r2, [r3, #0]
 8003e72:	e034      	b.n	8003ede <USB_EPStartXfer+0x10ea>
 8003e74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	785b      	ldrb	r3, [r3, #1]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d12c      	bne.n	8003ede <USB_EPStartXfer+0x10ea>
 8003e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003e96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	011a      	lsls	r2, r3, #4
 8003ebc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003ec6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003edc:	801a      	strh	r2, [r3, #0]
 8003ede:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ee2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	785b      	ldrb	r3, [r3, #1]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f040 809d 	bne.w	8004038 <USB_EPStartXfer+0x1244>
 8003efe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f22:	4413      	add	r3, r2
 8003f24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	011a      	lsls	r2, r3, #4
 8003f36:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003f40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f48:	881b      	ldrh	r3, [r3, #0]
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f56:	801a      	strh	r2, [r3, #0]
 8003f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	2b3e      	cmp	r3, #62	; 0x3e
 8003f66:	d92b      	bls.n	8003fc0 <USB_EPStartXfer+0x11cc>
 8003f68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d104      	bne.n	8003f98 <USB_EPStartXfer+0x11a4>
 8003f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f92:	3b01      	subs	r3, #1
 8003f94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	b29a      	uxth	r2, r3
 8003fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	029b      	lsls	r3, r3, #10
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	4313      	orrs	r3, r2
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fbc:	801a      	strh	r2, [r3, #0]
 8003fbe:	e069      	b.n	8004094 <USB_EPStartXfer+0x12a0>
 8003fc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10c      	bne.n	8003fea <USB_EPStartXfer+0x11f6>
 8003fd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fe6:	801a      	strh	r2, [r3, #0]
 8003fe8:	e054      	b.n	8004094 <USB_EPStartXfer+0x12a0>
 8003fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	085b      	lsrs	r3, r3, #1
 8003ff8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d004      	beq.n	800401a <USB_EPStartXfer+0x1226>
 8004010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004014:	3301      	adds	r3, #1
 8004016:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800401a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29a      	uxth	r2, r3
 8004022:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004026:	b29b      	uxth	r3, r3
 8004028:	029b      	lsls	r3, r3, #10
 800402a:	b29b      	uxth	r3, r3
 800402c:	4313      	orrs	r3, r2
 800402e:	b29a      	uxth	r2, r3
 8004030:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004034:	801a      	strh	r2, [r3, #0]
 8004036:	e02d      	b.n	8004094 <USB_EPStartXfer+0x12a0>
 8004038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800403c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d125      	bne.n	8004094 <USB_EPStartXfer+0x12a0>
 8004048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800404c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004056:	b29b      	uxth	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800405e:	4413      	add	r3, r2
 8004060:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	011a      	lsls	r2, r3, #4
 8004072:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004076:	4413      	add	r3, r2
 8004078:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800407c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	b29a      	uxth	r2, r3
 800408e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004092:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8004094:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004098:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 8218 	beq.w	80044d6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80040a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4413      	add	r3, r2
 80040c0:	881b      	ldrh	r3, [r3, #0]
 80040c2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80040c6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80040ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d005      	beq.n	80040de <USB_EPStartXfer+0x12ea>
 80040d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80040d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10d      	bne.n	80040fa <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80040de:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80040e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f040 81f5 	bne.w	80044d6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80040ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80040f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	f040 81ee 	bne.w	80044d6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80040fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80040fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800411c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004120:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8004124:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004128:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	441a      	add	r2, r3
 800413e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8004142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800414a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800414e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004152:	b29b      	uxth	r3, r3
 8004154:	8013      	strh	r3, [r2, #0]
 8004156:	e1be      	b.n	80044d6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8004158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800415c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	78db      	ldrb	r3, [r3, #3]
 8004164:	2b01      	cmp	r3, #1
 8004166:	f040 81b4 	bne.w	80044d2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800416a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800416e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800417a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	429a      	cmp	r2, r3
 8004184:	d917      	bls.n	80041b6 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8004186:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800418a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8004196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800419a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	699a      	ldr	r2, [r3, #24]
 80041a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80041a6:	1ad2      	subs	r2, r2, r3
 80041a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	619a      	str	r2, [r3, #24]
 80041b4:	e00e      	b.n	80041d4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80041b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80041c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2200      	movs	r2, #0
 80041d2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80041d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	785b      	ldrb	r3, [r3, #1]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f040 8085 	bne.w	80042f0 <USB_EPStartXfer+0x14fc>
 80041e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80041f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004202:	b29b      	uxth	r3, r3
 8004204:	461a      	mov	r2, r3
 8004206:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800420a:	4413      	add	r3, r2
 800420c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	011a      	lsls	r2, r3, #4
 800421e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004222:	4413      	add	r3, r2
 8004224:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004228:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800422c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004238:	b29a      	uxth	r2, r3
 800423a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800423e:	801a      	strh	r2, [r3, #0]
 8004240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004244:	2b3e      	cmp	r3, #62	; 0x3e
 8004246:	d923      	bls.n	8004290 <USB_EPStartXfer+0x149c>
 8004248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800424c:	095b      	lsrs	r3, r3, #5
 800424e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	2b00      	cmp	r3, #0
 800425c:	d104      	bne.n	8004268 <USB_EPStartXfer+0x1474>
 800425e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004262:	3b01      	subs	r3, #1
 8004264:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004268:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800426c:	881b      	ldrh	r3, [r3, #0]
 800426e:	b29a      	uxth	r2, r3
 8004270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004274:	b29b      	uxth	r3, r3
 8004276:	029b      	lsls	r3, r3, #10
 8004278:	b29b      	uxth	r3, r3
 800427a:	4313      	orrs	r3, r2
 800427c:	b29b      	uxth	r3, r3
 800427e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004282:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004286:	b29a      	uxth	r2, r3
 8004288:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800428c:	801a      	strh	r2, [r3, #0]
 800428e:	e060      	b.n	8004352 <USB_EPStartXfer+0x155e>
 8004290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10c      	bne.n	80042b2 <USB_EPStartXfer+0x14be>
 8004298:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800429c:	881b      	ldrh	r3, [r3, #0]
 800429e:	b29b      	uxth	r3, r3
 80042a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042ae:	801a      	strh	r2, [r3, #0]
 80042b0:	e04f      	b.n	8004352 <USB_EPStartXfer+0x155e>
 80042b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042b6:	085b      	lsrs	r3, r3, #1
 80042b8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80042bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d004      	beq.n	80042d2 <USB_EPStartXfer+0x14de>
 80042c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042cc:	3301      	adds	r3, #1
 80042ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80042d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	b29a      	uxth	r2, r3
 80042da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042de:	b29b      	uxth	r3, r3
 80042e0:	029b      	lsls	r3, r3, #10
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	4313      	orrs	r3, r2
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042ec:	801a      	strh	r2, [r3, #0]
 80042ee:	e030      	b.n	8004352 <USB_EPStartXfer+0x155e>
 80042f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80042f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	785b      	ldrb	r3, [r3, #1]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d128      	bne.n	8004352 <USB_EPStartXfer+0x155e>
 8004300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800430e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004312:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800431c:	b29b      	uxth	r3, r3
 800431e:	461a      	mov	r2, r3
 8004320:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004324:	4413      	add	r3, r2
 8004326:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800432a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800432e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	011a      	lsls	r2, r3, #4
 8004338:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800433c:	4413      	add	r3, r2
 800433e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004342:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800434a:	b29a      	uxth	r2, r3
 800434c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004350:	801a      	strh	r2, [r3, #0]
 8004352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004356:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004360:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004364:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	2b00      	cmp	r3, #0
 800436e:	f040 8085 	bne.w	800447c <USB_EPStartXfer+0x1688>
 8004372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800438e:	b29b      	uxth	r3, r3
 8004390:	461a      	mov	r2, r3
 8004392:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004396:	4413      	add	r3, r2
 8004398:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800439c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80043a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	011a      	lsls	r2, r3, #4
 80043aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043ae:	4413      	add	r3, r2
 80043b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80043b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043bc:	881b      	ldrh	r3, [r3, #0]
 80043be:	b29b      	uxth	r3, r3
 80043c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043ca:	801a      	strh	r2, [r3, #0]
 80043cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043d0:	2b3e      	cmp	r3, #62	; 0x3e
 80043d2:	d923      	bls.n	800441c <USB_EPStartXfer+0x1628>
 80043d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80043e2:	f003 031f 	and.w	r3, r3, #31
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d104      	bne.n	80043f4 <USB_EPStartXfer+0x1600>
 80043ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043ee:	3b01      	subs	r3, #1
 80043f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043f8:	881b      	ldrh	r3, [r3, #0]
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004400:	b29b      	uxth	r3, r3
 8004402:	029b      	lsls	r3, r3, #10
 8004404:	b29b      	uxth	r3, r3
 8004406:	4313      	orrs	r3, r2
 8004408:	b29b      	uxth	r3, r3
 800440a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800440e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004412:	b29a      	uxth	r2, r3
 8004414:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	e05c      	b.n	80044d6 <USB_EPStartXfer+0x16e2>
 800441c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004420:	2b00      	cmp	r3, #0
 8004422:	d10c      	bne.n	800443e <USB_EPStartXfer+0x164a>
 8004424:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004430:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004434:	b29a      	uxth	r2, r3
 8004436:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800443a:	801a      	strh	r2, [r3, #0]
 800443c:	e04b      	b.n	80044d6 <USB_EPStartXfer+0x16e2>
 800443e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d004      	beq.n	800445e <USB_EPStartXfer+0x166a>
 8004454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004458:	3301      	adds	r3, #1
 800445a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800445e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29a      	uxth	r2, r3
 8004466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800446a:	b29b      	uxth	r3, r3
 800446c:	029b      	lsls	r3, r3, #10
 800446e:	b29b      	uxth	r3, r3
 8004470:	4313      	orrs	r3, r2
 8004472:	b29a      	uxth	r2, r3
 8004474:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004478:	801a      	strh	r2, [r3, #0]
 800447a:	e02c      	b.n	80044d6 <USB_EPStartXfer+0x16e2>
 800447c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	785b      	ldrb	r3, [r3, #1]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d124      	bne.n	80044d6 <USB_EPStartXfer+0x16e2>
 800448c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800449a:	b29b      	uxth	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044a2:	4413      	add	r3, r2
 80044a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	011a      	lsls	r2, r3, #4
 80044b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044ba:	4413      	add	r3, r2
 80044bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80044c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80044c8:	b29a      	uxth	r2, r3
 80044ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044ce:	801a      	strh	r2, [r3, #0]
 80044d0:	e001      	b.n	80044d6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e03a      	b.n	800454c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80044e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004500:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004504:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004508:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800450c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004510:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004514:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800451c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	441a      	add	r2, r3
 8004532:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004536:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800453a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800453e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004542:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004546:	b29b      	uxth	r3, r3
 8004548:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004556:	b480      	push	{r7}
 8004558:	b085      	sub	sp, #20
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
 800455e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	785b      	ldrb	r3, [r3, #1]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d020      	beq.n	80045aa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	781b      	ldrb	r3, [r3, #0]
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	881b      	ldrh	r3, [r3, #0]
 8004574:	b29b      	uxth	r3, r3
 8004576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800457a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800457e:	81bb      	strh	r3, [r7, #12]
 8004580:	89bb      	ldrh	r3, [r7, #12]
 8004582:	f083 0310 	eor.w	r3, r3, #16
 8004586:	81bb      	strh	r3, [r7, #12]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	441a      	add	r2, r3
 8004592:	89bb      	ldrh	r3, [r7, #12]
 8004594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800459c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	8013      	strh	r3, [r2, #0]
 80045a8:	e01f      	b.n	80045ea <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c0:	81fb      	strh	r3, [r7, #14]
 80045c2:	89fb      	ldrh	r3, [r7, #14]
 80045c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80045c8:	81fb      	strh	r3, [r7, #14]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	441a      	add	r2, r3
 80045d4:	89fb      	ldrh	r3, [r7, #14]
 80045d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bc80      	pop	{r7}
 80045f4:	4770      	bx	lr

080045f6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr

0800460a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr

0800461e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800461e:	b480      	push	{r7}
 8004620:	b083      	sub	sp, #12
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	370c      	adds	r7, #12
 800462e:	46bd      	mov	sp, r7
 8004630:	bc80      	pop	{r7}
 8004632:	4770      	bx	lr

08004634 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004634:	b480      	push	{r7}
 8004636:	b08b      	sub	sp, #44	; 0x2c
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	4611      	mov	r1, r2
 8004640:	461a      	mov	r2, r3
 8004642:	460b      	mov	r3, r1
 8004644:	80fb      	strh	r3, [r7, #6]
 8004646:	4613      	mov	r3, r2
 8004648:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800464a:	88bb      	ldrh	r3, [r7, #4]
 800464c:	3301      	adds	r3, #1
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800465a:	88fb      	ldrh	r3, [r7, #6]
 800465c:	005a      	lsls	r2, r3, #1
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004666:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
 800466c:	e01e      	b.n	80046ac <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	3301      	adds	r3, #1
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	b21a      	sxth	r2, r3
 800467e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004682:	4313      	orrs	r3, r2
 8004684:	b21b      	sxth	r3, r3
 8004686:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8004688:	6a3b      	ldr	r3, [r7, #32]
 800468a:	8a7a      	ldrh	r2, [r7, #18]
 800468c:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	3302      	adds	r3, #2
 8004692:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	3302      	adds	r3, #2
 8004698:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	3301      	adds	r3, #1
 800469e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	3301      	adds	r3, #1
 80046a4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	3b01      	subs	r3, #1
 80046aa:	627b      	str	r3, [r7, #36]	; 0x24
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1dd      	bne.n	800466e <USB_WritePMA+0x3a>
  }
}
 80046b2:	bf00      	nop
 80046b4:	bf00      	nop
 80046b6:	372c      	adds	r7, #44	; 0x2c
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bc80      	pop	{r7}
 80046bc:	4770      	bx	lr
	...

080046c0 <Evt_EnQueue>:
 *
 * \param  event data in an array of uint8_t
 * \return false if the queue is full
 */
bool Evt_EnQueue(uint8_t *event)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	unsigned i;
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 80046c8:	4b1c      	ldr	r3, [pc, #112]	; (800473c <Evt_EnQueue+0x7c>)
 80046ca:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80046ce:	3301      	adds	r3, #1
 80046d0:	425a      	negs	r2, r3
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	f002 0207 	and.w	r2, r2, #7
 80046da:	bf58      	it	pl
 80046dc:	4253      	negpl	r3, r2
 80046de:	72fb      	strb	r3, [r7, #11]

	// queue is full
	if(next == evt_queue.tail)
 80046e0:	4b16      	ldr	r3, [pc, #88]	; (800473c <Evt_EnQueue+0x7c>)
 80046e2:	f893 3281 	ldrb.w	r3, [r3, #641]	; 0x281
 80046e6:	7afa      	ldrb	r2, [r7, #11]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d101      	bne.n	80046f0 <Evt_EnQueue+0x30>
	{
		// event will be lost
		return false;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e01f      	b.n	8004730 <Evt_EnQueue+0x70>
	}

	// copy event bytes into the buffer
	for(i = 0; i < EVT_QWIDTH; i++)
 80046f0:	2300      	movs	r3, #0
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	e014      	b.n	8004720 <Evt_EnQueue+0x60>
	{
		evt_queue.buff[evt_queue.head][i] = event[i];
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	4a0f      	ldr	r2, [pc, #60]	; (800473c <Evt_EnQueue+0x7c>)
 80046fe:	f892 2280 	ldrb.w	r2, [r2, #640]	; 0x280
 8004702:	4611      	mov	r1, r2
 8004704:	7818      	ldrb	r0, [r3, #0]
 8004706:	4a0d      	ldr	r2, [pc, #52]	; (800473c <Evt_EnQueue+0x7c>)
 8004708:	460b      	mov	r3, r1
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	441a      	add	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	4602      	mov	r2, r0
 8004718:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < EVT_QWIDTH; i++)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	3301      	adds	r3, #1
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b4f      	cmp	r3, #79	; 0x4f
 8004724:	d9e7      	bls.n	80046f6 <Evt_EnQueue+0x36>
	}
	// move to the next position
	evt_queue.head = next;
 8004726:	4a05      	ldr	r2, [pc, #20]	; (800473c <Evt_EnQueue+0x7c>)
 8004728:	7afb      	ldrb	r3, [r7, #11]
 800472a:	f882 3280 	strb.w	r3, [r2, #640]	; 0x280

	return true;
 800472e:	2301      	movs	r3, #1
}
 8004730:	4618      	mov	r0, r3
 8004732:	3714      	adds	r7, #20
 8004734:	46bd      	mov	sp, r7
 8004736:	bc80      	pop	{r7}
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	200005bc 	.word	0x200005bc

08004740 <Evt_DeQueue>:
 *
 * \param  event data in an array of uint8_t
 * \return false if the queue is empty
 */
bool Evt_DeQueue(uint8_t *event)
{
 8004740:	b590      	push	{r4, r7, lr}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
	uint8_t i;
	bool flag = false;
 8004748:	2300      	movs	r3, #0
 800474a:	73bb      	strb	r3, [r7, #14]

	// disable all timers
	UsrTimer_Enable(false);
 800474c:	2000      	movs	r0, #0
 800474e:	f000 f9b3 	bl	8004ab8 <UsrTimer_Enable>

	// queue is not empty
	if(evt_queue.tail != evt_queue.head)
 8004752:	4b1d      	ldr	r3, [pc, #116]	; (80047c8 <Evt_DeQueue+0x88>)
 8004754:	f893 2281 	ldrb.w	r2, [r3, #641]	; 0x281
 8004758:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <Evt_DeQueue+0x88>)
 800475a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800475e:	429a      	cmp	r2, r3
 8004760:	d02a      	beq.n	80047b8 <Evt_DeQueue+0x78>
	{
		// copy event bytes into the buffer
		for(i = 0; i < EVT_QWIDTH; i++)
 8004762:	2300      	movs	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]
 8004766:	e013      	b.n	8004790 <Evt_DeQueue+0x50>
		{
			event[i] = evt_queue.buff[evt_queue.tail][i];
 8004768:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <Evt_DeQueue+0x88>)
 800476a:	f893 3281 	ldrb.w	r3, [r3, #641]	; 0x281
 800476e:	461c      	mov	r4, r3
 8004770:	7bf9      	ldrb	r1, [r7, #15]
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	441a      	add	r2, r3
 8004778:	4813      	ldr	r0, [pc, #76]	; (80047c8 <Evt_DeQueue+0x88>)
 800477a:	4623      	mov	r3, r4
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	4423      	add	r3, r4
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	4403      	add	r3, r0
 8004784:	440b      	add	r3, r1
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	7013      	strb	r3, [r2, #0]
		for(i = 0; i < EVT_QWIDTH; i++)
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	3301      	adds	r3, #1
 800478e:	73fb      	strb	r3, [r7, #15]
 8004790:	7bfb      	ldrb	r3, [r7, #15]
 8004792:	2b4f      	cmp	r3, #79	; 0x4f
 8004794:	d9e8      	bls.n	8004768 <Evt_DeQueue+0x28>
		}
		// move to the next position
		evt_queue.tail = ADVANCE_QPTR(evt_queue.tail);
 8004796:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <Evt_DeQueue+0x88>)
 8004798:	f893 3281 	ldrb.w	r3, [r3, #641]	; 0x281
 800479c:	3301      	adds	r3, #1
 800479e:	425a      	negs	r2, r3
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	f002 0207 	and.w	r2, r2, #7
 80047a8:	bf58      	it	pl
 80047aa:	4253      	negpl	r3, r2
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <Evt_DeQueue+0x88>)
 80047b0:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
		// set flag
		flag = true;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73bb      	strb	r3, [r7, #14]
	}

	// enable all timers
	UsrTimer_Enable(true);
 80047b8:	2001      	movs	r0, #1
 80047ba:	f000 f97d 	bl	8004ab8 <UsrTimer_Enable>

	// return with the flag
	return flag;
 80047be:	7bbb      	ldrb	r3, [r7, #14]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd90      	pop	{r4, r7, pc}
 80047c8:	200005bc 	.word	0x200005bc

080047cc <PushButton_Init>:
 * \param	mask the mask byte that denotes which bit of the uint8_t data
 * supplied by PushButton_Read() function are assigned to the actual push
 * button.
 */
void PushButton_Init(uint8_t mask)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	4603      	mov	r3, r0
 80047d4:	71fb      	strb	r3, [r7, #7]
	int i ;

	// clear data
	pp.old_state = pp.new_state = 0;
 80047d6:	4b13      	ldr	r3, [pc, #76]	; (8004824 <PushButton_Init+0x58>)
 80047d8:	2200      	movs	r2, #0
 80047da:	705a      	strb	r2, [r3, #1]
 80047dc:	4b11      	ldr	r3, [pc, #68]	; (8004824 <PushButton_Init+0x58>)
 80047de:	785a      	ldrb	r2, [r3, #1]
 80047e0:	4b10      	ldr	r3, [pc, #64]	; (8004824 <PushButton_Init+0x58>)
 80047e2:	701a      	strb	r2, [r3, #0]
	pp.mask = mask;
 80047e4:	4a0f      	ldr	r2, [pc, #60]	; (8004824 <PushButton_Init+0x58>)
 80047e6:	79fb      	ldrb	r3, [r7, #7]
 80047e8:	7693      	strb	r3, [r2, #26]
	pp.mode = 0;
 80047ea:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <PushButton_Init+0x58>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	76da      	strb	r2, [r3, #27]
	pp.flag = false;
 80047f0:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <PushButton_Init+0x58>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	771a      	strb	r2, [r3, #28]

	// clear log
	for(i = 0; i < 8; i++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	e007      	b.n	800480c <PushButton_Init+0x40>
	{
		PushButton_ClearLog(i);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	4618      	mov	r0, r3
 8004802:	f000 f813 	bl	800482c <PushButton_ClearLog>
	for(i = 0; i < 8; i++)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	3301      	adds	r3, #1
 800480a:	60fb      	str	r3, [r7, #12]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2b07      	cmp	r3, #7
 8004810:	ddf4      	ble.n	80047fc <PushButton_Init+0x30>
	}

	// register pushbutton main routine
	UsrTimer_Set(PUSHBTN_TMR_PERIOD, 0, PushButton_Routine);
 8004812:	4a05      	ldr	r2, [pc, #20]	; (8004828 <PushButton_Init+0x5c>)
 8004814:	2100      	movs	r1, #0
 8004816:	2005      	movs	r0, #5
 8004818:	f000 f95e 	bl	8004ad8 <UsrTimer_Set>
}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	20000840 	.word	0x20000840
 8004828:	08004865 	.word	0x08004865

0800482c <PushButton_ClearLog>:
}

/** Clear the duration parameter and the click count parameter of the button.
 */
void PushButton_ClearLog(uint8_t index)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	4603      	mov	r3, r0
 8004834:	71fb      	strb	r3, [r7, #7]
	if(index < 8)
 8004836:	79fb      	ldrb	r3, [r7, #7]
 8004838:	2b07      	cmp	r3, #7
 800483a:	d80b      	bhi.n	8004854 <PushButton_ClearLog+0x28>
	{
		pp.click[index] = pp.duration[index] = 0;
 800483c:	79fb      	ldrb	r3, [r7, #7]
 800483e:	4a08      	ldr	r2, [pc, #32]	; (8004860 <PushButton_ClearLog+0x34>)
 8004840:	3304      	adds	r3, #4
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	4413      	add	r3, r2
 8004846:	2200      	movs	r2, #0
 8004848:	805a      	strh	r2, [r3, #2]
 800484a:	79fb      	ldrb	r3, [r7, #7]
 800484c:	4a04      	ldr	r2, [pc, #16]	; (8004860 <PushButton_ClearLog+0x34>)
 800484e:	4413      	add	r3, r2
 8004850:	2200      	movs	r2, #0
 8004852:	709a      	strb	r2, [r3, #2]
	}
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	20000840 	.word	0x20000840

08004864 <PushButton_Routine>:

/** Main routine
 */
void PushButton_Routine()
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b096      	sub	sp, #88	; 0x58
 8004868:	af00      	add	r7, sp, #0
	uint8_t diff_state;
	uint8_t event[EVT_QWIDTH];

	extern uint8_t reg_s;

	pp.new_state = PushButton_Read();
 800486a:	f7fb ffc5 	bl	80007f8 <PushButton_Read>
 800486e:	4603      	mov	r3, r0
 8004870:	461a      	mov	r2, r3
 8004872:	4b90      	ldr	r3, [pc, #576]	; (8004ab4 <PushButton_Routine+0x250>)
 8004874:	705a      	strb	r2, [r3, #1]

	// difference in the button state
	diff_state = pp.old_state ^ pp.new_state;
 8004876:	4b8f      	ldr	r3, [pc, #572]	; (8004ab4 <PushButton_Routine+0x250>)
 8004878:	781a      	ldrb	r2, [r3, #0]
 800487a:	4b8e      	ldr	r3, [pc, #568]	; (8004ab4 <PushButton_Routine+0x250>)
 800487c:	785b      	ldrb	r3, [r3, #1]
 800487e:	4053      	eors	r3, r2
 8004880:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	for(i = 0; i < 8; i++)
 8004884:	2300      	movs	r3, #0
 8004886:	657b      	str	r3, [r7, #84]	; 0x54
 8004888:	e107      	b.n	8004a9a <PushButton_Routine+0x236>
	{
		// skip if no button is assigned
		if(((pp.mask >> i) & 0x01) == 0x00)
 800488a:	4b8a      	ldr	r3, [pc, #552]	; (8004ab4 <PushButton_Routine+0x250>)
 800488c:	7e9b      	ldrb	r3, [r3, #26]
 800488e:	461a      	mov	r2, r3
 8004890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004892:	fa42 f303 	asr.w	r3, r2, r3
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 80f9 	beq.w	8004a92 <PushButton_Routine+0x22e>
		{
			continue;
		}

		// up-down mode
		if(((pp.mode >> i) & 0x01)  == PUSHBTN_MODE_UDOWN)
 80048a0:	4b84      	ldr	r3, [pc, #528]	; (8004ab4 <PushButton_Routine+0x250>)
 80048a2:	7edb      	ldrb	r3, [r3, #27]
 80048a4:	461a      	mov	r2, r3
 80048a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a8:	fa42 f303 	asr.w	r3, r2, r3
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d02c      	beq.n	800490e <PushButton_Routine+0xaa>
		{
			// the button pressed
			if(((pp.new_state >> i) & 0x01) == 0x01)
 80048b4:	4b7f      	ldr	r3, [pc, #508]	; (8004ab4 <PushButton_Routine+0x250>)
 80048b6:	785b      	ldrb	r3, [r3, #1]
 80048b8:	461a      	mov	r2, r3
 80048ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048bc:	fa42 f303 	asr.w	r3, r2, r3
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00b      	beq.n	80048e0 <PushButton_Routine+0x7c>
			{
				event[0] = EVT_PBTN_INPUT;
 80048c8:	2310      	movs	r3, #16
 80048ca:	703b      	strb	r3, [r7, #0]
				event[1] = (uint8_t)(i);
 80048cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	707b      	strb	r3, [r7, #1]
				event[2] = PBTN_DOWN;
 80048d2:	2305      	movs	r3, #5
 80048d4:	70bb      	strb	r3, [r7, #2]

				// post the event as long as the button is pressed down
				Evt_EnQueue(event);
 80048d6:	463b      	mov	r3, r7
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff fef1 	bl	80046c0 <Evt_EnQueue>
 80048de:	e0d9      	b.n	8004a94 <PushButton_Routine+0x230>
			}
			// button released
			else
			{
				// actually it has just risen
				if(((pp.old_state >> i) & 0x01) == 0x01)
 80048e0:	4b74      	ldr	r3, [pc, #464]	; (8004ab4 <PushButton_Routine+0x250>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e8:	fa42 f303 	asr.w	r3, r2, r3
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 80cf 	beq.w	8004a94 <PushButton_Routine+0x230>
				{
					event[0] = EVT_PBTN_INPUT;
 80048f6:	2310      	movs	r3, #16
 80048f8:	703b      	strb	r3, [r7, #0]
					event[1] = (uint8_t)(i);
 80048fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	707b      	strb	r3, [r7, #1]
					event[2] = PBTN_ENDN;
 8004900:	2306      	movs	r3, #6
 8004902:	70bb      	strb	r3, [r7, #2]

					// post the event to indicate the end of the down state
					Evt_EnQueue(event);
 8004904:	463b      	mov	r3, r7
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff feda 	bl	80046c0 <Evt_EnQueue>
 800490c:	e0c2      	b.n	8004a94 <PushButton_Routine+0x230>
		}
		// click mode
		else
		{
			// the button state changed
			if((diff_state >> i) & 0x01)
 800490e:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8004912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004914:	fa42 f303 	asr.w	r3, r2, r3
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d02d      	beq.n	800497c <PushButton_Routine+0x118>
			{
				// (re)start duration count
				pp.duration[i] = 1;
 8004920:	4a64      	ldr	r2, [pc, #400]	; (8004ab4 <PushButton_Routine+0x250>)
 8004922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004924:	3304      	adds	r3, #4
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	4413      	add	r3, r2
 800492a:	2201      	movs	r2, #1
 800492c:	805a      	strh	r2, [r3, #2]

				// the button released
				if(((pp.new_state >> i) & 0x01) == 0x00)
 800492e:	4b61      	ldr	r3, [pc, #388]	; (8004ab4 <PushButton_Routine+0x250>)
 8004930:	785b      	ldrb	r3, [r3, #1]
 8004932:	461a      	mov	r2, r3
 8004934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004936:	fa42 f303 	asr.w	r3, r2, r3
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d13c      	bne.n	80049bc <PushButton_Routine+0x158>
				{
					if(pp.flag)
 8004942:	4b5c      	ldr	r3, [pc, #368]	; (8004ab4 <PushButton_Routine+0x250>)
 8004944:	7f1b      	ldrb	r3, [r3, #28]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <PushButton_Routine+0xfc>
					{
						pp.flag = false;
 800494a:	4b5a      	ldr	r3, [pc, #360]	; (8004ab4 <PushButton_Routine+0x250>)
 800494c:	2200      	movs	r2, #0
 800494e:	771a      	strb	r2, [r3, #28]
						//
						pp.duration[i] = 0;
 8004950:	4a58      	ldr	r2, [pc, #352]	; (8004ab4 <PushButton_Routine+0x250>)
 8004952:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004954:	3304      	adds	r3, #4
 8004956:	005b      	lsls	r3, r3, #1
 8004958:	4413      	add	r3, r2
 800495a:	2200      	movs	r2, #0
 800495c:	805a      	strh	r2, [r3, #2]
 800495e:	e02d      	b.n	80049bc <PushButton_Routine+0x158>
					}
					else
					{
						// increase click count
						pp.click[i]++;
 8004960:	4a54      	ldr	r2, [pc, #336]	; (8004ab4 <PushButton_Routine+0x250>)
 8004962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004964:	4413      	add	r3, r2
 8004966:	3302      	adds	r3, #2
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	3301      	adds	r3, #1
 800496c:	b2d9      	uxtb	r1, r3
 800496e:	4a51      	ldr	r2, [pc, #324]	; (8004ab4 <PushButton_Routine+0x250>)
 8004970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004972:	4413      	add	r3, r2
 8004974:	3302      	adds	r3, #2
 8004976:	460a      	mov	r2, r1
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	e01f      	b.n	80049bc <PushButton_Routine+0x158>
			}
			// button state not changed
			else
			{
				// increase duration count
				if((pp.duration[i] > 0) &&
 800497c:	4a4d      	ldr	r2, [pc, #308]	; (8004ab4 <PushButton_Routine+0x250>)
 800497e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004980:	3304      	adds	r3, #4
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	4413      	add	r3, r2
 8004986:	885b      	ldrh	r3, [r3, #2]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d017      	beq.n	80049bc <PushButton_Routine+0x158>
						(pp.duration[i] < PUSHBTN_TO_MAX))
 800498c:	4a49      	ldr	r2, [pc, #292]	; (8004ab4 <PushButton_Routine+0x250>)
 800498e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004990:	3304      	adds	r3, #4
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	4413      	add	r3, r2
 8004996:	885b      	ldrh	r3, [r3, #2]
				if((pp.duration[i] > 0) &&
 8004998:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 800499c:	d20e      	bcs.n	80049bc <PushButton_Routine+0x158>
				{
					pp.duration[i]++;
 800499e:	4a45      	ldr	r2, [pc, #276]	; (8004ab4 <PushButton_Routine+0x250>)
 80049a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a2:	3304      	adds	r3, #4
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	4413      	add	r3, r2
 80049a8:	885b      	ldrh	r3, [r3, #2]
 80049aa:	3301      	adds	r3, #1
 80049ac:	b299      	uxth	r1, r3
 80049ae:	4a41      	ldr	r2, [pc, #260]	; (8004ab4 <PushButton_Routine+0x250>)
 80049b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b2:	3304      	adds	r3, #4
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	4413      	add	r3, r2
 80049b8:	460a      	mov	r2, r1
 80049ba:	805a      	strh	r2, [r3, #2]
				}
			}

			// triple click
			if(pp.click[i] >= 3)
 80049bc:	4a3d      	ldr	r2, [pc, #244]	; (8004ab4 <PushButton_Routine+0x250>)
 80049be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c0:	4413      	add	r3, r2
 80049c2:	3302      	adds	r3, #2
 80049c4:	781b      	ldrb	r3, [r3, #0]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d910      	bls.n	80049ec <PushButton_Routine+0x188>
			{
				// triple click event
				event[0] = EVT_PBTN_INPUT;
 80049ca:	2310      	movs	r3, #16
 80049cc:	703b      	strb	r3, [r7, #0]
				event[1] = (uint8_t)(i);
 80049ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	707b      	strb	r3, [r7, #1]
				event[2] = PBTN_TCLK;
 80049d4:	2304      	movs	r3, #4
 80049d6:	70bb      	strb	r3, [r7, #2]
				// post event
				Evt_EnQueue(event);
 80049d8:	463b      	mov	r3, r7
 80049da:	4618      	mov	r0, r3
 80049dc:	f7ff fe70 	bl	80046c0 <Evt_EnQueue>

				// clear log
				PushButton_ClearLog(i);
 80049e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff ff21 	bl	800482c <PushButton_ClearLog>
 80049ea:	e053      	b.n	8004a94 <PushButton_Routine+0x230>
			}
			// button relased and short timeout passed
			else if((pp.duration[i] > PUSHBTN_TO_SHORT) &&
 80049ec:	4a31      	ldr	r2, [pc, #196]	; (8004ab4 <PushButton_Routine+0x250>)
 80049ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049f0:	3304      	adds	r3, #4
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	4413      	add	r3, r2
 80049f6:	885b      	ldrh	r3, [r3, #2]
 80049f8:	2b14      	cmp	r3, #20
 80049fa:	d924      	bls.n	8004a46 <PushButton_Routine+0x1e2>
					(((pp.new_state >> i) & 0x01) == 0x00))
 80049fc:	4b2d      	ldr	r3, [pc, #180]	; (8004ab4 <PushButton_Routine+0x250>)
 80049fe:	785b      	ldrb	r3, [r3, #1]
 8004a00:	461a      	mov	r2, r3
 8004a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a04:	fa42 f303 	asr.w	r3, r2, r3
 8004a08:	f003 0301 	and.w	r3, r3, #1
			else if((pp.duration[i] > PUSHBTN_TO_SHORT) &&
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d11a      	bne.n	8004a46 <PushButton_Routine+0x1e2>
			{
				event[0] = EVT_PBTN_INPUT;
 8004a10:	2310      	movs	r3, #16
 8004a12:	703b      	strb	r3, [r7, #0]
				event[1] = (uint8_t)(i);
 8004a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	707b      	strb	r3, [r7, #1]

				// double click
				if(pp.click[i] == 2)
 8004a1a:	4a26      	ldr	r2, [pc, #152]	; (8004ab4 <PushButton_Routine+0x250>)
 8004a1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a1e:	4413      	add	r3, r2
 8004a20:	3302      	adds	r3, #2
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d102      	bne.n	8004a2e <PushButton_Routine+0x1ca>
				{
					// double click event
					event[2] = PBTN_DCLK;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	70bb      	strb	r3, [r7, #2]
 8004a2c:	e001      	b.n	8004a32 <PushButton_Routine+0x1ce>
				}
				// single click
				else
				{
					// single click event
					event[2] = PBTN_SCLK;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	70bb      	strb	r3, [r7, #2]
				}
				// post the event
				Evt_EnQueue(event);
 8004a32:	463b      	mov	r3, r7
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff fe43 	bl	80046c0 <Evt_EnQueue>

				// clear log
				PushButton_ClearLog(i);
 8004a3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7ff fef4 	bl	800482c <PushButton_ClearLog>
 8004a44:	e026      	b.n	8004a94 <PushButton_Routine+0x230>
			}
			// button pressed and long timeout passed
			else if((pp.duration[i] > PUSHBTN_TO_LONG) &&
 8004a46:	4a1b      	ldr	r2, [pc, #108]	; (8004ab4 <PushButton_Routine+0x250>)
 8004a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4413      	add	r3, r2
 8004a50:	885b      	ldrh	r3, [r3, #2]
 8004a52:	2b64      	cmp	r3, #100	; 0x64
 8004a54:	d91e      	bls.n	8004a94 <PushButton_Routine+0x230>
					(((pp.new_state >> i) & 0x01) == 0x01))
 8004a56:	4b17      	ldr	r3, [pc, #92]	; (8004ab4 <PushButton_Routine+0x250>)
 8004a58:	785b      	ldrb	r3, [r3, #1]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a5e:	fa42 f303 	asr.w	r3, r2, r3
 8004a62:	f003 0301 	and.w	r3, r3, #1
			else if((pp.duration[i] > PUSHBTN_TO_LONG) &&
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d014      	beq.n	8004a94 <PushButton_Routine+0x230>
			{
				// long click event
				event[0] = EVT_PBTN_INPUT;
 8004a6a:	2310      	movs	r3, #16
 8004a6c:	703b      	strb	r3, [r7, #0]
				event[1] = (uint8_t)(i);
 8004a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	707b      	strb	r3, [r7, #1]
				event[2] = PBTN_LCLK;
 8004a74:	2302      	movs	r3, #2
 8004a76:	70bb      	strb	r3, [r7, #2]

				// post the event
				Evt_EnQueue(event);
 8004a78:	463b      	mov	r3, r7
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7ff fe20 	bl	80046c0 <Evt_EnQueue>

				// clear log
				PushButton_ClearLog(i);
 8004a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7ff fed1 	bl	800482c <PushButton_ClearLog>

				// raise flag: this will prevent false detect after long click
				pp.flag = true;
 8004a8a:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <PushButton_Routine+0x250>)
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	771a      	strb	r2, [r3, #28]
 8004a90:	e000      	b.n	8004a94 <PushButton_Routine+0x230>
			continue;
 8004a92:	bf00      	nop
	for(i = 0; i < 8; i++)
 8004a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a96:	3301      	adds	r3, #1
 8004a98:	657b      	str	r3, [r7, #84]	; 0x54
 8004a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a9c:	2b07      	cmp	r3, #7
 8004a9e:	f77f aef4 	ble.w	800488a <PushButton_Routine+0x26>
			}
		}
	}
	// update pin state
	pp.old_state = pp.new_state;
 8004aa2:	4b04      	ldr	r3, [pc, #16]	; (8004ab4 <PushButton_Routine+0x250>)
 8004aa4:	785a      	ldrb	r2, [r3, #1]
 8004aa6:	4b03      	ldr	r3, [pc, #12]	; (8004ab4 <PushButton_Routine+0x250>)
 8004aa8:	701a      	strb	r2, [r3, #0]
}
 8004aaa:	bf00      	nop
 8004aac:	3758      	adds	r7, #88	; 0x58
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	20000840 	.word	0x20000840

08004ab8 <UsrTimer_Enable>:
}

/** Call this function to pause or to resume all timers at once.
 */
void UsrTimer_Enable(bool flag)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	71fb      	strb	r3, [r7, #7]
	usrtimer_enable = flag;
 8004ac2:	4a04      	ldr	r2, [pc, #16]	; (8004ad4 <UsrTimer_Enable+0x1c>)
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	7013      	strb	r3, [r2, #0]
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bc80      	pop	{r7}
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	2000000d 	.word	0x2000000d

08004ad8 <UsrTimer_Set>:
 * \param   duration number of repetition. 0 for perpetual timer.
 * \param   usrtimer_callback callback function
 * \return	the index of the timer created. if failed, -1 will be returned.
 */
int UsrTimer_Set(uint32_t period, uint32_t duration, usrtimer_callback f)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
	int i;

	// check unoccupied spot
	for(i = 0; i < MAX_USRTIMER; i++)
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	e04e      	b.n	8004b88 <UsrTimer_Set+0xb0>
	{
		if(USRTimers[i].mode == USRTIMER_UNASGN)
 8004aea:	492c      	ldr	r1, [pc, #176]	; (8004b9c <UsrTimer_Set+0xc4>)
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	4613      	mov	r3, r2
 8004af0:	009b      	lsls	r3, r3, #2
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	440b      	add	r3, r1
 8004af8:	330c      	adds	r3, #12
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d140      	bne.n	8004b82 <UsrTimer_Set+0xaa>
		{
			// finite duration timer
			if(duration > 0)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <UsrTimer_Set+0x44>
			{
				USRTimers[i].mode = USRTIMER_FINITE;
 8004b06:	4925      	ldr	r1, [pc, #148]	; (8004b9c <UsrTimer_Set+0xc4>)
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	330c      	adds	r3, #12
 8004b16:	2202      	movs	r2, #2
 8004b18:	701a      	strb	r2, [r3, #0]
 8004b1a:	e009      	b.n	8004b30 <UsrTimer_Set+0x58>
			}
			// perpetual timer
			else
			{
				USRTimers[i].mode = USRTIMER_FOREVR;
 8004b1c:	491f      	ldr	r1, [pc, #124]	; (8004b9c <UsrTimer_Set+0xc4>)
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	330c      	adds	r3, #12
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	701a      	strb	r2, [r3, #0]
			}

			USRTimers[i].period = (int32_t)period;
 8004b30:	68f9      	ldr	r1, [r7, #12]
 8004b32:	481a      	ldr	r0, [pc, #104]	; (8004b9c <UsrTimer_Set+0xc4>)
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	4613      	mov	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4403      	add	r3, r0
 8004b40:	6019      	str	r1, [r3, #0]
			USRTimers[i].duration = (int32_t)duration;
 8004b42:	68b9      	ldr	r1, [r7, #8]
 8004b44:	4815      	ldr	r0, [pc, #84]	; (8004b9c <UsrTimer_Set+0xc4>)
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	4413      	add	r3, r2
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	4403      	add	r3, r0
 8004b52:	3304      	adds	r3, #4
 8004b54:	6019      	str	r1, [r3, #0]
			USRTimers[i].count = 0;
 8004b56:	4911      	ldr	r1, [pc, #68]	; (8004b9c <UsrTimer_Set+0xc4>)
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	3308      	adds	r3, #8
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
			USRTimers[i].callback = f;
 8004b6a:	490c      	ldr	r1, [pc, #48]	; (8004b9c <UsrTimer_Set+0xc4>)
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	3310      	adds	r3, #16
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	601a      	str	r2, [r3, #0]
			// return with the timer index
			return i;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	e007      	b.n	8004b92 <UsrTimer_Set+0xba>
	for(i = 0; i < MAX_USRTIMER; i++)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	3301      	adds	r3, #1
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2b13      	cmp	r3, #19
 8004b8c:	ddad      	ble.n	8004aea <UsrTimer_Set+0x12>
		}
	}

	// no empty slot
	return -1;
 8004b8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr
 8004b9c:	20000860 	.word	0x20000860

08004ba0 <UsrTimer_Clear>:
 * information from the timer struct array.
 *
 * \param index timer id
 */
void UsrTimer_Clear(uint32_t index)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	if(index >= MAX_USRTIMER)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b13      	cmp	r3, #19
 8004bac:	d831      	bhi.n	8004c12 <UsrTimer_Clear+0x72>
	{
		return;
	}

	USRTimers[index].period = 0;
 8004bae:	491b      	ldr	r1, [pc, #108]	; (8004c1c <UsrTimer_Clear+0x7c>)
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	440b      	add	r3, r1
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
	USRTimers[index].duration = 0;
 8004bc0:	4916      	ldr	r1, [pc, #88]	; (8004c1c <UsrTimer_Clear+0x7c>)
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	4413      	add	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	3304      	adds	r3, #4
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
	USRTimers[index].count = 0;
 8004bd4:	4911      	ldr	r1, [pc, #68]	; (8004c1c <UsrTimer_Clear+0x7c>)
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	440b      	add	r3, r1
 8004be2:	3308      	adds	r3, #8
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
	USRTimers[index].mode = USRTIMER_UNASGN;
 8004be8:	490c      	ldr	r1, [pc, #48]	; (8004c1c <UsrTimer_Clear+0x7c>)
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	4413      	add	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	330c      	adds	r3, #12
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
	USRTimers[index].callback = NULL;
 8004bfc:	4907      	ldr	r1, [pc, #28]	; (8004c1c <UsrTimer_Clear+0x7c>)
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	3310      	adds	r3, #16
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	e000      	b.n	8004c14 <UsrTimer_Clear+0x74>
		return;
 8004c12:	bf00      	nop
}
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr
 8004c1c:	20000860 	.word	0x20000860

08004c20 <UsrTimer_Routine>:
 *  It is highly recommended to protect the function by disabling the
 *  timer interrupt during the execution so that only one instance of this
 *  function is excuted at any moment of time.
 */
void UsrTimer_Routine(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
	int i;

	if(!usrtimer_enable)
 8004c26:	4b5e      	ldr	r3, [pc, #376]	; (8004da0 <UsrTimer_Routine+0x180>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	f083 0301 	eor.w	r3, r3, #1
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f040 80ad 	bne.w	8004d92 <UsrTimer_Routine+0x172>
	{
		return;
	}

	// increase the counter value of each timer
	for(i = 0; i < MAX_USRTIMER; i++)
 8004c38:	2300      	movs	r3, #0
 8004c3a:	607b      	str	r3, [r7, #4]
 8004c3c:	e02b      	b.n	8004c96 <UsrTimer_Routine+0x76>
	{
		// skip unassigned or stopped timers
		if( (USRTimers[i].mode != USRTIMER_UNASGN) &&
 8004c3e:	4959      	ldr	r1, [pc, #356]	; (8004da4 <UsrTimer_Routine+0x184>)
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	4613      	mov	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	4413      	add	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	440b      	add	r3, r1
 8004c4c:	330c      	adds	r3, #12
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01d      	beq.n	8004c90 <UsrTimer_Routine+0x70>
		        (USRTimers[i].mode != USRTIMER_PAUSED) )
 8004c54:	4953      	ldr	r1, [pc, #332]	; (8004da4 <UsrTimer_Routine+0x184>)
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	330c      	adds	r3, #12
 8004c64:	781b      	ldrb	r3, [r3, #0]
		if( (USRTimers[i].mode != USRTIMER_UNASGN) &&
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d012      	beq.n	8004c90 <UsrTimer_Routine+0x70>
		{
			USRTimers[i].count++;
 8004c6a:	494e      	ldr	r1, [pc, #312]	; (8004da4 <UsrTimer_Routine+0x184>)
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	3308      	adds	r3, #8
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	1c59      	adds	r1, r3, #1
 8004c7e:	4849      	ldr	r0, [pc, #292]	; (8004da4 <UsrTimer_Routine+0x184>)
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4403      	add	r3, r0
 8004c8c:	3308      	adds	r3, #8
 8004c8e:	6019      	str	r1, [r3, #0]
	for(i = 0; i < MAX_USRTIMER; i++)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3301      	adds	r3, #1
 8004c94:	607b      	str	r3, [r7, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b13      	cmp	r3, #19
 8004c9a:	ddd0      	ble.n	8004c3e <UsrTimer_Routine+0x1e>
		}
	}

	// check the count value for the timeout
	for(i = 0; i < MAX_USRTIMER; i++)
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	607b      	str	r3, [r7, #4]
 8004ca0:	e073      	b.n	8004d8a <UsrTimer_Routine+0x16a>
	{
		// timeout occurred
		if(USRTimers[i].count >= USRTimers[i].period)
 8004ca2:	4940      	ldr	r1, [pc, #256]	; (8004da4 <UsrTimer_Routine+0x184>)
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	009b      	lsls	r3, r3, #2
 8004caa:	4413      	add	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	440b      	add	r3, r1
 8004cb0:	3308      	adds	r3, #8
 8004cb2:	6819      	ldr	r1, [r3, #0]
 8004cb4:	483b      	ldr	r0, [pc, #236]	; (8004da4 <UsrTimer_Routine+0x184>)
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	4403      	add	r3, r0
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4299      	cmp	r1, r3
 8004cc6:	db5d      	blt.n	8004d84 <UsrTimer_Routine+0x164>
		{
			// the timer should have valid callback
			if(USRTimers[i].callback)
 8004cc8:	4936      	ldr	r1, [pc, #216]	; (8004da4 <UsrTimer_Routine+0x184>)
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	3310      	adds	r3, #16
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d052      	beq.n	8004d84 <UsrTimer_Routine+0x164>
			{
				// run callback
				USRTimers[i].callback();
 8004cde:	4931      	ldr	r1, [pc, #196]	; (8004da4 <UsrTimer_Routine+0x184>)
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	440b      	add	r3, r1
 8004cec:	3310      	adds	r3, #16
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4798      	blx	r3
				// decrease the count value
				USRTimers[i].count -= USRTimers[i].period;
 8004cf2:	492c      	ldr	r1, [pc, #176]	; (8004da4 <UsrTimer_Routine+0x184>)
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	440b      	add	r3, r1
 8004d00:	3308      	adds	r3, #8
 8004d02:	6819      	ldr	r1, [r3, #0]
 8004d04:	4827      	ldr	r0, [pc, #156]	; (8004da4 <UsrTimer_Routine+0x184>)
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4403      	add	r3, r0
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	1ac9      	subs	r1, r1, r3
 8004d16:	4823      	ldr	r0, [pc, #140]	; (8004da4 <UsrTimer_Routine+0x184>)
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4403      	add	r3, r0
 8004d24:	3308      	adds	r3, #8
 8004d26:	6019      	str	r1, [r3, #0]
				// handle finite duration timer
				if(USRTimers[i].mode == USRTIMER_FINITE)
 8004d28:	491e      	ldr	r1, [pc, #120]	; (8004da4 <UsrTimer_Routine+0x184>)
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	440b      	add	r3, r1
 8004d36:	330c      	adds	r3, #12
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d12b      	bne.n	8004d96 <UsrTimer_Routine+0x176>
				{
					// decrease the duration
					if(--USRTimers[i].duration == 0)
 8004d3e:	4919      	ldr	r1, [pc, #100]	; (8004da4 <UsrTimer_Routine+0x184>)
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4613      	mov	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	4413      	add	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	440b      	add	r3, r1
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	1e59      	subs	r1, r3, #1
 8004d52:	4814      	ldr	r0, [pc, #80]	; (8004da4 <UsrTimer_Routine+0x184>)
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4403      	add	r3, r0
 8004d60:	3304      	adds	r3, #4
 8004d62:	6019      	str	r1, [r3, #0]
 8004d64:	490f      	ldr	r1, [pc, #60]	; (8004da4 <UsrTimer_Routine+0x184>)
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	3304      	adds	r3, #4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10d      	bne.n	8004d96 <UsrTimer_Routine+0x176>
					{
						UsrTimer_Clear(i);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7ff ff0f 	bl	8004ba0 <UsrTimer_Clear>
					}
				}

				// we only handle one task at a time
				break;
 8004d82:	e008      	b.n	8004d96 <UsrTimer_Routine+0x176>
	for(i = 0; i < MAX_USRTIMER; i++)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3301      	adds	r3, #1
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b13      	cmp	r3, #19
 8004d8e:	dd88      	ble.n	8004ca2 <UsrTimer_Routine+0x82>
 8004d90:	e002      	b.n	8004d98 <UsrTimer_Routine+0x178>
		return;
 8004d92:	bf00      	nop
 8004d94:	e000      	b.n	8004d98 <UsrTimer_Routine+0x178>
				break;
 8004d96:	bf00      	nop
			}
		}
	}
}
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	2000000d 	.word	0x2000000d
 8004da4:	20000860 	.word	0x20000860

08004da8 <RingBufferU8_init>:
#include "ringbuffer.h"
#include "stdio.h"

#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))

void RingBufferU8_init(RingBufferU8* ring, uint8_t* storage, uint16_t size) {
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	4613      	mov	r3, r2
 8004db4:	80fb      	strh	r3, [r7, #6]
  ring->storage = storage;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	601a      	str	r2, [r3, #0]
  ring->size = size;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	88fa      	ldrh	r2, [r7, #6]
 8004dc0:	811a      	strh	r2, [r3, #8]
  ring->end = ring->storage + ring->size;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	8912      	ldrh	r2, [r2, #8]
 8004dca:	441a      	add	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	605a      	str	r2, [r3, #4]
  ring->read = ring->storage;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	60da      	str	r2, [r3, #12]
  ring->write = ring->storage;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	611a      	str	r2, [r3, #16]
  ring->available = 0;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2200      	movs	r2, #0
 8004de4:	829a      	strh	r2, [r3, #20]
}
 8004de6:	bf00      	nop
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr

08004df0 <RingBufferU8_readByte>:
  ring->read = ring->storage;
  ring->write = ring->storage;
  ring->available = 0;
}

uint8_t RingBufferU8_readByte(RingBufferU8* ring) {
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  if (ring->available == 0) {
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	8a9b      	ldrh	r3, [r3, #20]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <RingBufferU8_readByte+0x16>
    return 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e018      	b.n	8004e38 <RingBufferU8_readByte+0x48>
  }
  uint8_t ret = *ring->read++;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	1c59      	adds	r1, r3, #1
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	60d1      	str	r1, [r2, #12]
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	73fb      	strb	r3, [r7, #15]
  ring->available--;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	8a9b      	ldrh	r3, [r3, #20]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	829a      	strh	r2, [r3, #20]
  if (ring->read >= ring->end) {
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d303      	bcc.n	8004e36 <RingBufferU8_readByte+0x46>
    ring->read = ring->storage;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	60da      	str	r2, [r3, #12]
  }
  return ret;
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3714      	adds	r7, #20
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bc80      	pop	{r7}
 8004e40:	4770      	bx	lr

08004e42 <RingBufferU8_read>:

void RingBufferU8_read(RingBufferU8* ring, uint8_t* buffer, uint16_t size) {
 8004e42:	b590      	push	{r4, r7, lr}
 8004e44:	b087      	sub	sp, #28
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	80fb      	strh	r3, [r7, #6]
  uint16_t i;

  // TODO can be optimized
  for (i = 0; i < size; i++) {
 8004e50:	2300      	movs	r3, #0
 8004e52:	82fb      	strh	r3, [r7, #22]
 8004e54:	e00a      	b.n	8004e6c <RingBufferU8_read+0x2a>
    buffer[i] = RingBufferU8_readByte(ring);
 8004e56:	8afb      	ldrh	r3, [r7, #22]
 8004e58:	68ba      	ldr	r2, [r7, #8]
 8004e5a:	18d4      	adds	r4, r2, r3
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f7ff ffc7 	bl	8004df0 <RingBufferU8_readByte>
 8004e62:	4603      	mov	r3, r0
 8004e64:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < size; i++) {
 8004e66:	8afb      	ldrh	r3, [r7, #22]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	82fb      	strh	r3, [r7, #22]
 8004e6c:	8afa      	ldrh	r2, [r7, #22]
 8004e6e:	88fb      	ldrh	r3, [r7, #6]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d3f0      	bcc.n	8004e56 <RingBufferU8_read+0x14>
  }
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd90      	pop	{r4, r7, pc}

08004e7e <RingBufferU8_writeByte>:

void RingBufferU8_writeByte(RingBufferU8* ring, uint8_t b) {
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b082      	sub	sp, #8
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	460b      	mov	r3, r1
 8004e88:	70fb      	strb	r3, [r7, #3]
  if (ring->available >= ring->size) {
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	8a9b      	ldrh	r3, [r3, #20]
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	891b      	ldrh	r3, [r3, #8]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d302      	bcc.n	8004e9e <RingBufferU8_writeByte+0x20>
    RingBufferU8_readByte(ring);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff ffa9 	bl	8004df0 <RingBufferU8_readByte>
  }

  *ring->write = b;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	78fa      	ldrb	r2, [r7, #3]
 8004ea4:	701a      	strb	r2, [r3, #0]
  ring->write++;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	611a      	str	r2, [r3, #16]
  ring->available++;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	8a9b      	ldrh	r3, [r3, #20]
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	829a      	strh	r2, [r3, #20]
  if (ring->write >= ring->end) {
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d303      	bcc.n	8004ed2 <RingBufferU8_writeByte+0x54>
    ring->write = ring->storage;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	611a      	str	r2, [r3, #16]
  }
}
 8004ed2:	bf00      	nop
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <RingBufferU8_write>:

// if terminator is supplied
uint8_t RingBufferU8_write(RingBufferU8* ring, const uint8_t* buffer, uint16_t size, uint8_t terminator) {
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b086      	sub	sp, #24
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	60f8      	str	r0, [r7, #12]
 8004ee2:	60b9      	str	r1, [r7, #8]
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	460b      	mov	r3, r1
 8004eea:	80fb      	strh	r3, [r7, #6]
 8004eec:	4613      	mov	r3, r2
 8004eee:	717b      	strb	r3, [r7, #5]
  uint16_t i;
  uint8_t saw_terminator = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	757b      	strb	r3, [r7, #21]

  // TODO can be optimized
  for (i = 0; i < size; i++) {
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	82fb      	strh	r3, [r7, #22]
 8004ef8:	e016      	b.n	8004f28 <RingBufferU8_write+0x4e>
    if (terminator && terminator == buffer[i]) saw_terminator = 1;
 8004efa:	797b      	ldrb	r3, [r7, #5]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d008      	beq.n	8004f12 <RingBufferU8_write+0x38>
 8004f00:	8afb      	ldrh	r3, [r7, #22]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	4413      	add	r3, r2
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	797a      	ldrb	r2, [r7, #5]
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d101      	bne.n	8004f12 <RingBufferU8_write+0x38>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	757b      	strb	r3, [r7, #21]
    RingBufferU8_writeByte(ring, buffer[i]);
 8004f12:	8afb      	ldrh	r3, [r7, #22]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	4413      	add	r3, r2
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f7ff ffae 	bl	8004e7e <RingBufferU8_writeByte>
  for (i = 0; i < size; i++) {
 8004f22:	8afb      	ldrh	r3, [r7, #22]
 8004f24:	3301      	adds	r3, #1
 8004f26:	82fb      	strh	r3, [r7, #22]
 8004f28:	8afa      	ldrh	r2, [r7, #22]
 8004f2a:	88fb      	ldrh	r3, [r7, #6]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d3e4      	bcc.n	8004efa <RingBufferU8_write+0x20>
  }
  return saw_terminator;
 8004f30:	7d7b      	ldrb	r3, [r7, #21]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <RingBufferU8_readUntil>:

uint16_t RingBufferU8_readLine(RingBufferU8* ring, uint8_t* buffer, uint16_t size) {
  return RingBufferU8_readUntil(ring, buffer, size, '\r');
}

uint16_t RingBufferU8_readUntil(RingBufferU8* ring, uint8_t* buffer, uint16_t size, uint8_t stopByte) {
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b086      	sub	sp, #24
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	60f8      	str	r0, [r7, #12]
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	4611      	mov	r1, r2
 8004f46:	461a      	mov	r2, r3
 8004f48:	460b      	mov	r3, r1
 8004f4a:	80fb      	strh	r3, [r7, #6]
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	717b      	strb	r3, [r7, #5]
  uint8_t b;
  uint16_t i;
  for (i = 0; i < MIN(ring->available, size - 1); i++) {
 8004f50:	2300      	movs	r3, #0
 8004f52:	82fb      	strh	r3, [r7, #22]
 8004f54:	e01d      	b.n	8004f92 <RingBufferU8_readUntil+0x58>
    b = RingBufferU8_peekn(ring, i);
 8004f56:	8afb      	ldrh	r3, [r7, #22]
 8004f58:	4619      	mov	r1, r3
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	f000 f832 	bl	8004fc4 <RingBufferU8_peekn>
 8004f60:	4603      	mov	r3, r0
 8004f62:	757b      	strb	r3, [r7, #21]
    if (b == stopByte) {
 8004f64:	7d7a      	ldrb	r2, [r7, #21]
 8004f66:	797b      	ldrb	r3, [r7, #5]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d10f      	bne.n	8004f8c <RingBufferU8_readUntil+0x52>
      i++;
 8004f6c:	8afb      	ldrh	r3, [r7, #22]
 8004f6e:	3301      	adds	r3, #1
 8004f70:	82fb      	strh	r3, [r7, #22]
      RingBufferU8_read(ring, (uint8_t*) buffer, i);
 8004f72:	8afb      	ldrh	r3, [r7, #22]
 8004f74:	461a      	mov	r2, r3
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	68f8      	ldr	r0, [r7, #12]
 8004f7a:	f7ff ff62 	bl	8004e42 <RingBufferU8_read>
      buffer[i] = '\0';
 8004f7e:	8afb      	ldrh	r3, [r7, #22]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	4413      	add	r3, r2
 8004f84:	2200      	movs	r2, #0
 8004f86:	701a      	strb	r2, [r3, #0]
      return i;
 8004f88:	8afb      	ldrh	r3, [r7, #22]
 8004f8a:	e017      	b.n	8004fbc <RingBufferU8_readUntil+0x82>
  for (i = 0; i < MIN(ring->available, size - 1); i++) {
 8004f8c:	8afb      	ldrh	r3, [r7, #22]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	82fb      	strh	r3, [r7, #22]
 8004f92:	8afa      	ldrh	r2, [r7, #22]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8a9b      	ldrh	r3, [r3, #20]
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	88fb      	ldrh	r3, [r7, #6]
 8004f9e:	3b01      	subs	r3, #1
 8004fa0:	4299      	cmp	r1, r3
 8004fa2:	da03      	bge.n	8004fac <RingBufferU8_readUntil+0x72>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8a9b      	ldrh	r3, [r3, #20]
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	e001      	b.n	8004fb0 <RingBufferU8_readUntil+0x76>
 8004fac:	88fb      	ldrh	r3, [r7, #6]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	dcd0      	bgt.n	8004f56 <RingBufferU8_readUntil+0x1c>
    }
  }
  buffer[0] = '\0';
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	701a      	strb	r2, [r3, #0]
  return 0;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <RingBufferU8_peekn>:

uint8_t RingBufferU8_peek(RingBufferU8* ring) {
  return RingBufferU8_peekn(ring, 0);
}

uint8_t RingBufferU8_peekn(RingBufferU8* ring, uint16_t i) {
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	460b      	mov	r3, r1
 8004fce:	807b      	strh	r3, [r7, #2]
  if (i >= ring->available) {
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	8a9b      	ldrh	r3, [r3, #20]
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	887a      	ldrh	r2, [r7, #2]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d301      	bcc.n	8004fe0 <RingBufferU8_peekn+0x1c>
    return 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e013      	b.n	8005008 <RingBufferU8_peekn+0x44>
  }

  uint8_t* read = (uint8_t*)ring->read;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	60bb      	str	r3, [r7, #8]
  uint8_t* p = read + i;
 8004fe6:	887b      	ldrh	r3, [r7, #2]
 8004fe8:	68ba      	ldr	r2, [r7, #8]
 8004fea:	4413      	add	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
  if (p >= ring->end) {
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d305      	bcc.n	8005004 <RingBufferU8_peekn+0x40>
    p -= ring->size;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	891b      	ldrh	r3, [r3, #8]
 8004ffc:	425b      	negs	r3, r3
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4413      	add	r3, r2
 8005002:	60fb      	str	r3, [r7, #12]
  }
  return *p;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	781b      	ldrb	r3, [r3, #0]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	bc80      	pop	{r7}
 8005010:	4770      	bx	lr
	...

08005014 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8005018:	f001 f8e2 	bl	80061e0 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 800501c:	2200      	movs	r2, #0
 800501e:	4912      	ldr	r1, [pc, #72]	; (8005068 <MX_USB_DEVICE_Init+0x54>)
 8005020:	4812      	ldr	r0, [pc, #72]	; (800506c <MX_USB_DEVICE_Init+0x58>)
 8005022:	f001 f99f 	bl	8006364 <USBD_Init>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 800502c:	f7fb fcf8 	bl	8000a20 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8005030:	490f      	ldr	r1, [pc, #60]	; (8005070 <MX_USB_DEVICE_Init+0x5c>)
 8005032:	480e      	ldr	r0, [pc, #56]	; (800506c <MX_USB_DEVICE_Init+0x58>)
 8005034:	f001 f9c2 	bl	80063bc <USBD_RegisterClass>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 800503e:	f7fb fcef 	bl	8000a20 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8005042:	490c      	ldr	r1, [pc, #48]	; (8005074 <MX_USB_DEVICE_Init+0x60>)
 8005044:	4809      	ldr	r0, [pc, #36]	; (800506c <MX_USB_DEVICE_Init+0x58>)
 8005046:	f000 fe0b 	bl	8005c60 <USBD_CDC_ACM_RegisterInterface>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d001      	beq.n	8005054 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8005050:	f7fb fce6 	bl	8000a20 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8005054:	4805      	ldr	r0, [pc, #20]	; (800506c <MX_USB_DEVICE_Init+0x58>)
 8005056:	f001 f9ef 	bl	8006438 <USBD_Start>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d001      	beq.n	8005064 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8005060:	f7fb fcde 	bl	8000a20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005064:	bf00      	nop
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20000024 	.word	0x20000024
 800506c:	200009f0 	.word	0x200009f0
 8005070:	200001dc 	.word	0x200001dc
 8005074:	20000010 	.word	0x20000010

08005078 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b082      	sub	sp, #8
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	01db      	lsls	r3, r3, #7
 8005086:	4a06      	ldr	r2, [pc, #24]	; (80050a0 <CDC_Init+0x28>)
 8005088:	441a      	add	r2, r3
 800508a:	79fb      	ldrb	r3, [r7, #7]
 800508c:	4905      	ldr	r1, [pc, #20]	; (80050a4 <CDC_Init+0x2c>)
 800508e:	4618      	mov	r0, r3
 8005090:	f000 fe1c 	bl	8005ccc <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 8005094:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000d0c 	.word	0x20000d0c
 80050a4:	200009f0 	.word	0x200009f0

080050a8 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 80050b2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	370c      	adds	r7, #12
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bc80      	pop	{r7}
 80050bc:	4770      	bx	lr
	...

080050c0 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	603a      	str	r2, [r7, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	4603      	mov	r3, r0
 80050cc:	71fb      	strb	r3, [r7, #7]
 80050ce:	460b      	mov	r3, r1
 80050d0:	71bb      	strb	r3, [r7, #6]
 80050d2:	4613      	mov	r3, r2
 80050d4:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 80050d6:	79bb      	ldrb	r3, [r7, #6]
 80050d8:	2b23      	cmp	r3, #35	; 0x23
 80050da:	f200 80b6 	bhi.w	800524a <CDC_Control+0x18a>
 80050de:	a201      	add	r2, pc, #4	; (adr r2, 80050e4 <CDC_Control+0x24>)
 80050e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e4:	0800524b 	.word	0x0800524b
 80050e8:	0800524b 	.word	0x0800524b
 80050ec:	0800524b 	.word	0x0800524b
 80050f0:	0800524b 	.word	0x0800524b
 80050f4:	0800524b 	.word	0x0800524b
 80050f8:	0800524b 	.word	0x0800524b
 80050fc:	0800524b 	.word	0x0800524b
 8005100:	0800524b 	.word	0x0800524b
 8005104:	0800524b 	.word	0x0800524b
 8005108:	0800524b 	.word	0x0800524b
 800510c:	0800524b 	.word	0x0800524b
 8005110:	0800524b 	.word	0x0800524b
 8005114:	0800524b 	.word	0x0800524b
 8005118:	0800524b 	.word	0x0800524b
 800511c:	0800524b 	.word	0x0800524b
 8005120:	0800524b 	.word	0x0800524b
 8005124:	0800524b 	.word	0x0800524b
 8005128:	0800524b 	.word	0x0800524b
 800512c:	0800524b 	.word	0x0800524b
 8005130:	0800524b 	.word	0x0800524b
 8005134:	0800524b 	.word	0x0800524b
 8005138:	0800524b 	.word	0x0800524b
 800513c:	0800524b 	.word	0x0800524b
 8005140:	0800524b 	.word	0x0800524b
 8005144:	0800524b 	.word	0x0800524b
 8005148:	0800524b 	.word	0x0800524b
 800514c:	0800524b 	.word	0x0800524b
 8005150:	0800524b 	.word	0x0800524b
 8005154:	0800524b 	.word	0x0800524b
 8005158:	0800524b 	.word	0x0800524b
 800515c:	0800524b 	.word	0x0800524b
 8005160:	0800524b 	.word	0x0800524b
 8005164:	08005175 	.word	0x08005175
 8005168:	080051d5 	.word	0x080051d5
 800516c:	0800524b 	.word	0x0800524b
 8005170:	0800524b 	.word	0x0800524b
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	461a      	mov	r2, r3
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	3301      	adds	r3, #1
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	3302      	adds	r3, #2
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 800518c:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	3303      	adds	r3, #3
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	061b      	lsls	r3, r3, #24
 8005196:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	4611      	mov	r1, r2
 800519c:	4a2e      	ldr	r2, [pc, #184]	; (8005258 <CDC_Control+0x198>)
 800519e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	7911      	ldrb	r1, [r2, #4]
 80051a8:	4a2b      	ldr	r2, [pc, #172]	; (8005258 <CDC_Control+0x198>)
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	4413      	add	r3, r2
 80051ae:	460a      	mov	r2, r1
 80051b0:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	7951      	ldrb	r1, [r2, #5]
 80051b8:	4a27      	ldr	r2, [pc, #156]	; (8005258 <CDC_Control+0x198>)
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4413      	add	r3, r2
 80051be:	460a      	mov	r2, r1
 80051c0:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 80051c2:	79fb      	ldrb	r3, [r7, #7]
 80051c4:	683a      	ldr	r2, [r7, #0]
 80051c6:	7991      	ldrb	r1, [r2, #6]
 80051c8:	4a23      	ldr	r2, [pc, #140]	; (8005258 <CDC_Control+0x198>)
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	4413      	add	r3, r2
 80051ce:	460a      	mov	r2, r1
 80051d0:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 80051d2:	e03b      	b.n	800524c <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 80051d4:	79fb      	ldrb	r3, [r7, #7]
 80051d6:	4a20      	ldr	r2, [pc, #128]	; (8005258 <CDC_Control+0x198>)
 80051d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	4a1c      	ldr	r2, [pc, #112]	; (8005258 <CDC_Control+0x198>)
 80051e6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051ea:	0a1a      	lsrs	r2, r3, #8
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	3301      	adds	r3, #1
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	4a18      	ldr	r2, [pc, #96]	; (8005258 <CDC_Control+0x198>)
 80051f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051fc:	0c1a      	lsrs	r2, r3, #16
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	3302      	adds	r3, #2
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 8005206:	79fb      	ldrb	r3, [r7, #7]
 8005208:	4a13      	ldr	r2, [pc, #76]	; (8005258 <CDC_Control+0x198>)
 800520a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800520e:	0e1a      	lsrs	r2, r3, #24
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	3303      	adds	r3, #3
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	683a      	ldr	r2, [r7, #0]
 800521c:	3204      	adds	r2, #4
 800521e:	490e      	ldr	r1, [pc, #56]	; (8005258 <CDC_Control+0x198>)
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	440b      	add	r3, r1
 8005224:	791b      	ldrb	r3, [r3, #4]
 8005226:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8005228:	79fb      	ldrb	r3, [r7, #7]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	3205      	adds	r2, #5
 800522e:	490a      	ldr	r1, [pc, #40]	; (8005258 <CDC_Control+0x198>)
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	440b      	add	r3, r1
 8005234:	795b      	ldrb	r3, [r3, #5]
 8005236:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 8005238:	79fb      	ldrb	r3, [r7, #7]
 800523a:	683a      	ldr	r2, [r7, #0]
 800523c:	3206      	adds	r2, #6
 800523e:	4906      	ldr	r1, [pc, #24]	; (8005258 <CDC_Control+0x198>)
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	440b      	add	r3, r1
 8005244:	799b      	ldrb	r3, [r3, #6]
 8005246:	7013      	strb	r3, [r2, #0]
    break;
 8005248:	e000      	b.n	800524c <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800524a:	bf00      	nop
  }

  return (USBD_OK);
 800524c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800524e:	4618      	mov	r0, r3
 8005250:	370c      	adds	r7, #12
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr
 8005258:	20000e0c 	.word	0x20000e0c

0800525c <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	4603      	mov	r3, r0
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	607a      	str	r2, [r7, #4]
 8005268:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	b29a      	uxth	r2, r3
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	68b9      	ldr	r1, [r7, #8]
 8005274:	4618      	mov	r0, r3
 8005276:	f000 f823 	bl	80052c0 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 800527a:	7bfb      	ldrb	r3, [r7, #15]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	4907      	ldr	r1, [pc, #28]	; (800529c <CDC_Receive+0x40>)
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fd23 	bl	8005ccc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 8005286:	7bfb      	ldrb	r3, [r7, #15]
 8005288:	4904      	ldr	r1, [pc, #16]	; (800529c <CDC_Receive+0x40>)
 800528a:	4618      	mov	r0, r3
 800528c:	f000 fd7e 	bl	8005d8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005290:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	200009f0 	.word	0x200009f0

080052a0 <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	461a      	mov	r2, r3
 80052ac:	4603      	mov	r3, r0
 80052ae:	73fb      	strb	r3, [r7, #15]
 80052b0:	4613      	mov	r3, r2
 80052b2:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr

080052c0 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	6039      	str	r1, [r7, #0]
 80052ca:	71fb      	strb	r3, [r7, #7]
 80052cc:	4613      	mov	r3, r2
 80052ce:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 80052d0:	2300      	movs	r3, #0
 80052d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 80052d8:	79fb      	ldrb	r3, [r7, #7]
 80052da:	f240 421c 	movw	r2, #1052	; 0x41c
 80052de:	fb02 f303 	mul.w	r3, r2, r3
 80052e2:	4a0e      	ldr	r2, [pc, #56]	; (800531c <CDC_Transmit+0x5c>)
 80052e4:	4413      	add	r3, r2
 80052e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d001      	beq.n	80052f6 <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e00d      	b.n	8005312 <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 80052f6:	88bb      	ldrh	r3, [r7, #4]
 80052f8:	79f8      	ldrb	r0, [r7, #7]
 80052fa:	683a      	ldr	r2, [r7, #0]
 80052fc:	4908      	ldr	r1, [pc, #32]	; (8005320 <CDC_Transmit+0x60>)
 80052fe:	f000 fcc3 	bl	8005c88 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 8005302:	79fb      	ldrb	r3, [r7, #7]
 8005304:	4906      	ldr	r1, [pc, #24]	; (8005320 <CDC_Transmit+0x60>)
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fcfe 	bl	8005d08 <USBD_CDC_TransmitPacket>
 800530c:	4603      	mov	r3, r0
 800530e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005310:	7bfb      	ldrb	r3, [r7, #15]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3710      	adds	r7, #16
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20001034 	.word	0x20001034
 8005320:	200009f0 	.word	0x200009f0

08005324 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	4603      	mov	r3, r0
 800532c:	6039      	str	r1, [r7, #0]
 800532e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	2212      	movs	r2, #18
 8005334:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 8005336:	4b03      	ldr	r3, [pc, #12]	; (8005344 <USBD_DeviceDescriptor+0x20>)
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	20000040 	.word	0x20000040

08005348 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	4603      	mov	r3, r0
 8005350:	6039      	str	r1, [r7, #0]
 8005352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2204      	movs	r2, #4
 8005358:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800535a:	4b03      	ldr	r3, [pc, #12]	; (8005368 <USBD_LangIDStrDescriptor+0x20>)
}
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	bc80      	pop	{r7}
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	20000054 	.word	0x20000054

0800536c <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	6039      	str	r1, [r7, #0]
 8005376:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005378:	79fb      	ldrb	r3, [r7, #7]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d105      	bne.n	800538a <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	4907      	ldr	r1, [pc, #28]	; (80053a0 <USBD_ProductStrDescriptor+0x34>)
 8005382:	4808      	ldr	r0, [pc, #32]	; (80053a4 <USBD_ProductStrDescriptor+0x38>)
 8005384:	f001 f875 	bl	8006472 <USBD_GetString>
 8005388:	e004      	b.n	8005394 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	4904      	ldr	r1, [pc, #16]	; (80053a0 <USBD_ProductStrDescriptor+0x34>)
 800538e:	4805      	ldr	r0, [pc, #20]	; (80053a4 <USBD_ProductStrDescriptor+0x38>)
 8005390:	f001 f86f 	bl	8006472 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005394:	4b02      	ldr	r3, [pc, #8]	; (80053a0 <USBD_ProductStrDescriptor+0x34>)
}
 8005396:	4618      	mov	r0, r3
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	20000e1c 	.word	0x20000e1c
 80053a4:	08007c2c 	.word	0x08007c2c

080053a8 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	4603      	mov	r3, r0
 80053b0:	6039      	str	r1, [r7, #0]
 80053b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	4904      	ldr	r1, [pc, #16]	; (80053c8 <USBD_ManufacturerStrDescriptor+0x20>)
 80053b8:	4804      	ldr	r0, [pc, #16]	; (80053cc <USBD_ManufacturerStrDescriptor+0x24>)
 80053ba:	f001 f85a 	bl	8006472 <USBD_GetString>
  return USBD_StrDesc;
 80053be:	4b02      	ldr	r3, [pc, #8]	; (80053c8 <USBD_ManufacturerStrDescriptor+0x20>)
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	20000e1c 	.word	0x20000e1c
 80053cc:	08007c44 	.word	0x08007c44

080053d0 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	4603      	mov	r3, r0
 80053d8:	6039      	str	r1, [r7, #0]
 80053da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	221a      	movs	r2, #26
 80053e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80053e2:	f000 f843 	bl	800546c <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80053e6:	4b02      	ldr	r3, [pc, #8]	; (80053f0 <USBD_SerialStrDescriptor+0x20>)
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	20000058 	.word	0x20000058

080053f4 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	4603      	mov	r3, r0
 80053fc:	6039      	str	r1, [r7, #0]
 80053fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d105      	bne.n	8005412 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	4907      	ldr	r1, [pc, #28]	; (8005428 <USBD_ConfigStrDescriptor+0x34>)
 800540a:	4808      	ldr	r0, [pc, #32]	; (800542c <USBD_ConfigStrDescriptor+0x38>)
 800540c:	f001 f831 	bl	8006472 <USBD_GetString>
 8005410:	e004      	b.n	800541c <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	4904      	ldr	r1, [pc, #16]	; (8005428 <USBD_ConfigStrDescriptor+0x34>)
 8005416:	4805      	ldr	r0, [pc, #20]	; (800542c <USBD_ConfigStrDescriptor+0x38>)
 8005418:	f001 f82b 	bl	8006472 <USBD_GetString>
  }
  return USBD_StrDesc;
 800541c:	4b02      	ldr	r3, [pc, #8]	; (8005428 <USBD_ConfigStrDescriptor+0x34>)
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000e1c 	.word	0x20000e1c
 800542c:	08007c58 	.word	0x08007c58

08005430 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	4603      	mov	r3, r0
 8005438:	6039      	str	r1, [r7, #0]
 800543a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d105      	bne.n	800544e <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8005442:	683a      	ldr	r2, [r7, #0]
 8005444:	4907      	ldr	r1, [pc, #28]	; (8005464 <USBD_InterfaceStrDescriptor+0x34>)
 8005446:	4808      	ldr	r0, [pc, #32]	; (8005468 <USBD_InterfaceStrDescriptor+0x38>)
 8005448:	f001 f813 	bl	8006472 <USBD_GetString>
 800544c:	e004      	b.n	8005458 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	4904      	ldr	r1, [pc, #16]	; (8005464 <USBD_InterfaceStrDescriptor+0x34>)
 8005452:	4805      	ldr	r0, [pc, #20]	; (8005468 <USBD_InterfaceStrDescriptor+0x38>)
 8005454:	f001 f80d 	bl	8006472 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005458:	4b02      	ldr	r3, [pc, #8]	; (8005464 <USBD_InterfaceStrDescriptor+0x34>)
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	20000e1c 	.word	0x20000e1c
 8005468:	08007c68 	.word	0x08007c68

0800546c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005472:	4b0f      	ldr	r3, [pc, #60]	; (80054b0 <Get_SerialNum+0x44>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005478:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <Get_SerialNum+0x48>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800547e:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <Get_SerialNum+0x4c>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4413      	add	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d009      	beq.n	80054a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005492:	2208      	movs	r2, #8
 8005494:	4909      	ldr	r1, [pc, #36]	; (80054bc <Get_SerialNum+0x50>)
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f814 	bl	80054c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800549c:	2204      	movs	r2, #4
 800549e:	4908      	ldr	r1, [pc, #32]	; (80054c0 <Get_SerialNum+0x54>)
 80054a0:	68b8      	ldr	r0, [r7, #8]
 80054a2:	f000 f80f 	bl	80054c4 <IntToUnicode>
  }
}
 80054a6:	bf00      	nop
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	1ffff7e8 	.word	0x1ffff7e8
 80054b4:	1ffff7ec 	.word	0x1ffff7ec
 80054b8:	1ffff7f0 	.word	0x1ffff7f0
 80054bc:	2000005a 	.word	0x2000005a
 80054c0:	2000006a 	.word	0x2000006a

080054c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b087      	sub	sp, #28
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	4613      	mov	r3, r2
 80054d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80054d6:	2300      	movs	r3, #0
 80054d8:	75fb      	strb	r3, [r7, #23]
 80054da:	e027      	b.n	800552c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	0f1b      	lsrs	r3, r3, #28
 80054e0:	2b09      	cmp	r3, #9
 80054e2:	d80b      	bhi.n	80054fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	0f1b      	lsrs	r3, r3, #28
 80054e8:	b2da      	uxtb	r2, r3
 80054ea:	7dfb      	ldrb	r3, [r7, #23]
 80054ec:	005b      	lsls	r3, r3, #1
 80054ee:	4619      	mov	r1, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	440b      	add	r3, r1
 80054f4:	3230      	adds	r2, #48	; 0x30
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e00a      	b.n	8005512 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	0f1b      	lsrs	r3, r3, #28
 8005500:	b2da      	uxtb	r2, r3
 8005502:	7dfb      	ldrb	r3, [r7, #23]
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	4619      	mov	r1, r3
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	440b      	add	r3, r1
 800550c:	3237      	adds	r2, #55	; 0x37
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005518:	7dfb      	ldrb	r3, [r7, #23]
 800551a:	005b      	lsls	r3, r3, #1
 800551c:	3301      	adds	r3, #1
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	4413      	add	r3, r2
 8005522:	2200      	movs	r2, #0
 8005524:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005526:	7dfb      	ldrb	r3, [r7, #23]
 8005528:	3301      	adds	r3, #1
 800552a:	75fb      	strb	r3, [r7, #23]
 800552c:	7dfa      	ldrb	r2, [r7, #23]
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	429a      	cmp	r2, r3
 8005532:	d3d3      	bcc.n	80054dc <IntToUnicode+0x18>
  }
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	371c      	adds	r7, #28
 800553a:	46bd      	mov	sp, r7
 800553c:	bc80      	pop	{r7}
 800553e:	4770      	bx	lr

08005540 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 800554c:	2300      	movs	r3, #0
 800554e:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005550:	2300      	movs	r3, #0
 8005552:	73fb      	strb	r3, [r7, #15]
 8005554:	e0c6      	b.n	80056e4 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8005556:	7bfb      	ldrb	r3, [r7, #15]
 8005558:	f240 421c 	movw	r2, #1052	; 0x41c
 800555c:	fb02 f303 	mul.w	r3, r2, r3
 8005560:	4a65      	ldr	r2, [pc, #404]	; (80056f8 <USBD_CDC_Init+0x1b8>)
 8005562:	4413      	add	r3, r2
 8005564:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	7c1b      	ldrb	r3, [r3, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d13d      	bne.n	80055ea <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	4a62      	ldr	r2, [pc, #392]	; (80056fc <USBD_CDC_Init+0x1bc>)
 8005572:	5cd1      	ldrb	r1, [r2, r3]
 8005574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005578:	2202      	movs	r2, #2
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f001 f89b 	bl	80066b6 <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8005580:	7bfb      	ldrb	r3, [r7, #15]
 8005582:	4a5e      	ldr	r2, [pc, #376]	; (80056fc <USBD_CDC_Init+0x1bc>)
 8005584:	5cd3      	ldrb	r3, [r2, r3]
 8005586:	f003 020f 	and.w	r2, r3, #15
 800558a:	6879      	ldr	r1, [r7, #4]
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	440b      	add	r3, r1
 8005596:	3324      	adds	r3, #36	; 0x24
 8005598:	2201      	movs	r2, #1
 800559a:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	4a58      	ldr	r2, [pc, #352]	; (8005700 <USBD_CDC_Init+0x1c0>)
 80055a0:	5cd1      	ldrb	r1, [r2, r3]
 80055a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055a6:	2202      	movs	r2, #2
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f001 f884 	bl	80066b6 <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	4a53      	ldr	r2, [pc, #332]	; (8005700 <USBD_CDC_Init+0x1c0>)
 80055b2:	5cd3      	ldrb	r3, [r2, r3]
 80055b4:	f003 020f 	and.w	r2, r3, #15
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055c8:	2201      	movs	r2, #1
 80055ca:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	4a4d      	ldr	r2, [pc, #308]	; (8005704 <USBD_CDC_Init+0x1c4>)
 80055d0:	5cd3      	ldrb	r3, [r2, r3]
 80055d2:	f003 020f 	and.w	r2, r3, #15
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	3326      	adds	r3, #38	; 0x26
 80055e4:	2210      	movs	r2, #16
 80055e6:	801a      	strh	r2, [r3, #0]
 80055e8:	e03a      	b.n	8005660 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
 80055ec:	4a43      	ldr	r2, [pc, #268]	; (80056fc <USBD_CDC_Init+0x1bc>)
 80055ee:	5cd1      	ldrb	r1, [r2, r3]
 80055f0:	2340      	movs	r3, #64	; 0x40
 80055f2:	2202      	movs	r2, #2
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f001 f85e 	bl	80066b6 <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80055fa:	7bfb      	ldrb	r3, [r7, #15]
 80055fc:	4a3f      	ldr	r2, [pc, #252]	; (80056fc <USBD_CDC_Init+0x1bc>)
 80055fe:	5cd3      	ldrb	r3, [r2, r3]
 8005600:	f003 020f 	and.w	r2, r3, #15
 8005604:	6879      	ldr	r1, [r7, #4]
 8005606:	4613      	mov	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	3324      	adds	r3, #36	; 0x24
 8005612:	2201      	movs	r2, #1
 8005614:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	4a39      	ldr	r2, [pc, #228]	; (8005700 <USBD_CDC_Init+0x1c0>)
 800561a:	5cd1      	ldrb	r1, [r2, r3]
 800561c:	2340      	movs	r3, #64	; 0x40
 800561e:	2202      	movs	r2, #2
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f001 f848 	bl	80066b6 <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8005626:	7bfb      	ldrb	r3, [r7, #15]
 8005628:	4a35      	ldr	r2, [pc, #212]	; (8005700 <USBD_CDC_Init+0x1c0>)
 800562a:	5cd3      	ldrb	r3, [r2, r3]
 800562c:	f003 020f 	and.w	r2, r3, #15
 8005630:	6879      	ldr	r1, [r7, #4]
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	440b      	add	r3, r1
 800563c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005640:	2201      	movs	r2, #1
 8005642:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005644:	7bfb      	ldrb	r3, [r7, #15]
 8005646:	4a2f      	ldr	r2, [pc, #188]	; (8005704 <USBD_CDC_Init+0x1c4>)
 8005648:	5cd3      	ldrb	r3, [r2, r3]
 800564a:	f003 020f 	and.w	r2, r3, #15
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	3326      	adds	r3, #38	; 0x26
 800565c:	2210      	movs	r2, #16
 800565e:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	4a28      	ldr	r2, [pc, #160]	; (8005704 <USBD_CDC_Init+0x1c4>)
 8005664:	5cd1      	ldrb	r1, [r2, r3]
 8005666:	2308      	movs	r3, #8
 8005668:	2203      	movs	r2, #3
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f001 f823 	bl	80066b6 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	4a24      	ldr	r2, [pc, #144]	; (8005704 <USBD_CDC_Init+0x1c4>)
 8005674:	5cd3      	ldrb	r3, [r2, r3]
 8005676:	f003 020f 	and.w	r2, r3, #15
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	3324      	adds	r3, #36	; 0x24
 8005688:	2201      	movs	r2, #1
 800568a:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	7bfa      	ldrb	r2, [r7, #15]
 8005696:	4610      	mov	r0, r2
 8005698:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	2200      	movs	r2, #0
 800569e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    hcdc->RxState = 0U;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	7c1b      	ldrb	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10b      	bne.n	80056ca <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
 80056b4:	4a12      	ldr	r2, [pc, #72]	; (8005700 <USBD_CDC_Init+0x1c0>)
 80056b6:	5cd1      	ldrb	r1, [r2, r3]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80056be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 f87c 	bl	80067c0 <USBD_LL_PrepareReceive>
 80056c8:	e009      	b.n	80056de <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	4a0c      	ldr	r2, [pc, #48]	; (8005700 <USBD_CDC_Init+0x1c0>)
 80056ce:	5cd1      	ldrb	r1, [r2, r3]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80056d6:	2340      	movs	r3, #64	; 0x40
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f001 f871 	bl	80067c0 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80056de:	7bfb      	ldrb	r3, [r7, #15]
 80056e0:	3301      	adds	r3, #1
 80056e2:	73fb      	strb	r3, [r7, #15]
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	f67f af35 	bls.w	8005556 <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20001034 	.word	0x20001034
 80056fc:	2000101c 	.word	0x2000101c
 8005700:	20001020 	.word	0x20001020
 8005704:	20001024 	.word	0x20001024

08005708 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005714:	2300      	movs	r3, #0
 8005716:	73fb      	strb	r3, [r7, #15]
 8005718:	e057      	b.n	80057ca <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 800571a:	7bfb      	ldrb	r3, [r7, #15]
 800571c:	4a2f      	ldr	r2, [pc, #188]	; (80057dc <USBD_CDC_DeInit+0xd4>)
 800571e:	5cd3      	ldrb	r3, [r2, r3]
 8005720:	4619      	mov	r1, r3
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f000 ffed 	bl	8006702 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	4a2c      	ldr	r2, [pc, #176]	; (80057dc <USBD_CDC_DeInit+0xd4>)
 800572c:	5cd3      	ldrb	r3, [r2, r3]
 800572e:	f003 020f 	and.w	r2, r3, #15
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	3324      	adds	r3, #36	; 0x24
 8005740:	2200      	movs	r2, #0
 8005742:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	4a26      	ldr	r2, [pc, #152]	; (80057e0 <USBD_CDC_DeInit+0xd8>)
 8005748:	5cd3      	ldrb	r3, [r2, r3]
 800574a:	4619      	mov	r1, r3
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f000 ffd8 	bl	8006702 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
 8005754:	4a22      	ldr	r2, [pc, #136]	; (80057e0 <USBD_CDC_DeInit+0xd8>)
 8005756:	5cd3      	ldrb	r3, [r2, r3]
 8005758:	f003 020f 	and.w	r2, r3, #15
 800575c:	6879      	ldr	r1, [r7, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	440b      	add	r3, r1
 8005768:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800576c:	2200      	movs	r2, #0
 800576e:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	4a1c      	ldr	r2, [pc, #112]	; (80057e4 <USBD_CDC_DeInit+0xdc>)
 8005774:	5cd3      	ldrb	r3, [r2, r3]
 8005776:	4619      	mov	r1, r3
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 ffc2 	bl	8006702 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	4a18      	ldr	r2, [pc, #96]	; (80057e4 <USBD_CDC_DeInit+0xdc>)
 8005782:	5cd3      	ldrb	r3, [r2, r3]
 8005784:	f003 020f 	and.w	r2, r3, #15
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	440b      	add	r3, r1
 8005794:	3324      	adds	r3, #36	; 0x24
 8005796:	2200      	movs	r2, #0
 8005798:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	4a11      	ldr	r2, [pc, #68]	; (80057e4 <USBD_CDC_DeInit+0xdc>)
 800579e:	5cd3      	ldrb	r3, [r2, r3]
 80057a0:	f003 020f 	and.w	r2, r3, #15
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4413      	add	r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	3326      	adds	r3, #38	; 0x26
 80057b2:	2200      	movs	r2, #0
 80057b4:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	7bfa      	ldrb	r2, [r7, #15]
 80057c0:	4610      	mov	r0, r2
 80057c2:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	3301      	adds	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d9a4      	bls.n	800571a <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	2000101c 	.word	0x2000101c
 80057e0:	20001020 	.word	0x20001020
 80057e4:	20001024 	.word	0x20001024

080057e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80057e8:	b590      	push	{r4, r7, lr}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005806:	2300      	movs	r3, #0
 8005808:	757b      	strb	r3, [r7, #21]
 800580a:	e015      	b.n	8005838 <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	889b      	ldrh	r3, [r3, #4]
 8005810:	b2da      	uxtb	r2, r3
 8005812:	7d7b      	ldrb	r3, [r7, #21]
 8005814:	496d      	ldr	r1, [pc, #436]	; (80059cc <USBD_CDC_Setup+0x1e4>)
 8005816:	5ccb      	ldrb	r3, [r1, r3]
 8005818:	429a      	cmp	r2, r3
 800581a:	d007      	beq.n	800582c <USBD_CDC_Setup+0x44>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	889b      	ldrh	r3, [r3, #4]
 8005820:	b2da      	uxtb	r2, r3
 8005822:	7d7b      	ldrb	r3, [r7, #21]
 8005824:	496a      	ldr	r1, [pc, #424]	; (80059d0 <USBD_CDC_Setup+0x1e8>)
 8005826:	5ccb      	ldrb	r3, [r1, r3]
 8005828:	429a      	cmp	r2, r3
 800582a:	d102      	bne.n	8005832 <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 800582c:	7d7b      	ldrb	r3, [r7, #21]
 800582e:	75bb      	strb	r3, [r7, #22]
      break;
 8005830:	e005      	b.n	800583e <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005832:	7d7b      	ldrb	r3, [r7, #21]
 8005834:	3301      	adds	r3, #1
 8005836:	757b      	strb	r3, [r7, #21]
 8005838:	7d7b      	ldrb	r3, [r7, #21]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d9e6      	bls.n	800580c <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 800583e:	7dbb      	ldrb	r3, [r7, #22]
 8005840:	f240 421c 	movw	r2, #1052	; 0x41c
 8005844:	fb02 f303 	mul.w	r3, r2, r3
 8005848:	4a62      	ldr	r2, [pc, #392]	; (80059d4 <USBD_CDC_Setup+0x1ec>)
 800584a:	4413      	add	r3, r2
 800584c:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005856:	2b00      	cmp	r3, #0
 8005858:	d04a      	beq.n	80058f0 <USBD_CDC_Setup+0x108>
 800585a:	2b20      	cmp	r3, #32
 800585c:	f040 80aa 	bne.w	80059b4 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	88db      	ldrh	r3, [r3, #6]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d038      	beq.n	80058da <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	b25b      	sxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	da1d      	bge.n	80058ae <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005878:	689c      	ldr	r4, [r3, #8]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	7859      	ldrb	r1, [r3, #1]
 800587e:	7dbb      	ldrb	r3, [r7, #22]
 8005880:	025b      	lsls	r3, r3, #9
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	441a      	add	r2, r3
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	88db      	ldrh	r3, [r3, #6]
 800588a:	7db8      	ldrb	r0, [r7, #22]
 800588c:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	88db      	ldrh	r3, [r3, #6]
 8005892:	2b07      	cmp	r3, #7
 8005894:	bf28      	it	cs
 8005896:	2307      	movcs	r3, #7
 8005898:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 800589a:	7dbb      	ldrb	r3, [r7, #22]
 800589c:	025b      	lsls	r3, r3, #9
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	4413      	add	r3, r2
 80058a2:	89fa      	ldrh	r2, [r7, #14]
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 fe42 	bl	8006530 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 80058ac:	e089      	b.n	80059c2 <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	785a      	ldrb	r2, [r3, #1]
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
        hcdc->CmdLength = (uint8_t)req->wLength;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	88db      	ldrh	r3, [r3, #6]
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 80058c4:	7dbb      	ldrb	r3, [r7, #22]
 80058c6:	025b      	lsls	r3, r3, #9
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	18d1      	adds	r1, r2, r3
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	88db      	ldrh	r3, [r3, #6]
 80058d0:	461a      	mov	r2, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fe47 	bl	8006566 <USBD_CtlPrepareRx>
    break;
 80058d8:	e073      	b.n	80059c2 <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80058e0:	689c      	ldr	r4, [r3, #8]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	7859      	ldrb	r1, [r3, #1]
 80058e6:	7db8      	ldrb	r0, [r7, #22]
 80058e8:	2300      	movs	r3, #0
 80058ea:	683a      	ldr	r2, [r7, #0]
 80058ec:	47a0      	blx	r4
    break;
 80058ee:	e068      	b.n	80059c2 <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	785b      	ldrb	r3, [r3, #1]
 80058f4:	2b0b      	cmp	r3, #11
 80058f6:	d852      	bhi.n	800599e <USBD_CDC_Setup+0x1b6>
 80058f8:	a201      	add	r2, pc, #4	; (adr r2, 8005900 <USBD_CDC_Setup+0x118>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	08005931 	.word	0x08005931
 8005904:	080059ad 	.word	0x080059ad
 8005908:	0800599f 	.word	0x0800599f
 800590c:	0800599f 	.word	0x0800599f
 8005910:	0800599f 	.word	0x0800599f
 8005914:	0800599f 	.word	0x0800599f
 8005918:	0800599f 	.word	0x0800599f
 800591c:	0800599f 	.word	0x0800599f
 8005920:	0800599f 	.word	0x0800599f
 8005924:	0800599f 	.word	0x0800599f
 8005928:	0800595b 	.word	0x0800595b
 800592c:	08005985 	.word	0x08005985
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b03      	cmp	r3, #3
 800593a:	d107      	bne.n	800594c <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800593c:	f107 030a 	add.w	r3, r7, #10
 8005940:	2202      	movs	r2, #2
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 fdf3 	bl	8006530 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800594a:	e032      	b.n	80059b2 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fd7e 	bl	8006450 <USBD_CtlError>
        ret = USBD_FAIL;
 8005954:	2303      	movs	r3, #3
 8005956:	75fb      	strb	r3, [r7, #23]
      break;
 8005958:	e02b      	b.n	80059b2 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b03      	cmp	r3, #3
 8005964:	d107      	bne.n	8005976 <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005966:	f107 030d 	add.w	r3, r7, #13
 800596a:	2201      	movs	r2, #1
 800596c:	4619      	mov	r1, r3
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fdde 	bl	8006530 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8005974:	e01d      	b.n	80059b2 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fd69 	bl	8006450 <USBD_CtlError>
        ret = USBD_FAIL;
 800597e:	2303      	movs	r3, #3
 8005980:	75fb      	strb	r3, [r7, #23]
      break;
 8005982:	e016      	b.n	80059b2 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2b03      	cmp	r3, #3
 800598e:	d00f      	beq.n	80059b0 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8005990:	6839      	ldr	r1, [r7, #0]
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 fd5c 	bl	8006450 <USBD_CtlError>
        ret = USBD_FAIL;
 8005998:	2303      	movs	r3, #3
 800599a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800599c:	e008      	b.n	80059b0 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fd55 	bl	8006450 <USBD_CtlError>
      ret = USBD_FAIL;
 80059a6:	2303      	movs	r3, #3
 80059a8:	75fb      	strb	r3, [r7, #23]
      break;
 80059aa:	e002      	b.n	80059b2 <USBD_CDC_Setup+0x1ca>
      break;
 80059ac:	bf00      	nop
 80059ae:	e008      	b.n	80059c2 <USBD_CDC_Setup+0x1da>
      break;
 80059b0:	bf00      	nop
    }
    break;
 80059b2:	e006      	b.n	80059c2 <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fd4a 	bl	8006450 <USBD_CtlError>
    ret = USBD_FAIL;
 80059bc:	2303      	movs	r3, #3
 80059be:	75fb      	strb	r3, [r7, #23]
    break;
 80059c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80059c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	371c      	adds	r7, #28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd90      	pop	{r4, r7, pc}
 80059cc:	20001028 	.word	0x20001028
 80059d0:	2000102c 	.word	0x2000102c
 80059d4:	20001034 	.word	0x20001034

080059d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059d8:	b590      	push	{r4, r7, lr}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	460b      	mov	r3, r1
 80059e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80059e4:	2300      	movs	r3, #0
 80059e6:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 80059ee:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80059f4:	2300      	movs	r3, #0
 80059f6:	75bb      	strb	r3, [r7, #22]
 80059f8:	e00d      	b.n	8005a16 <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 80059fa:	78fa      	ldrb	r2, [r7, #3]
 80059fc:	7dbb      	ldrb	r3, [r7, #22]
 80059fe:	4934      	ldr	r1, [pc, #208]	; (8005ad0 <USBD_CDC_DataIn+0xf8>)
 8005a00:	5ccb      	ldrb	r3, [r1, r3]
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d102      	bne.n	8005a10 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8005a0a:	7dbb      	ldrb	r3, [r7, #22]
 8005a0c:	75fb      	strb	r3, [r7, #23]
      break;
 8005a0e:	e005      	b.n	8005a1c <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005a10:	7dbb      	ldrb	r3, [r7, #22]
 8005a12:	3301      	adds	r3, #1
 8005a14:	75bb      	strb	r3, [r7, #22]
 8005a16:	7dbb      	ldrb	r3, [r7, #22]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d9ee      	bls.n	80059fa <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8005a1c:	7dfb      	ldrb	r3, [r7, #23]
 8005a1e:	f240 421c 	movw	r2, #1052	; 0x41c
 8005a22:	fb02 f303 	mul.w	r3, r2, r3
 8005a26:	4a2b      	ldr	r2, [pc, #172]	; (8005ad4 <USBD_CDC_DataIn+0xfc>)
 8005a28:	4413      	add	r3, r2
 8005a2a:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005a2c:	78fa      	ldrb	r2, [r7, #3]
 8005a2e:	6879      	ldr	r1, [r7, #4]
 8005a30:	4613      	mov	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	440b      	add	r3, r1
 8005a3a:	3318      	adds	r3, #24
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d029      	beq.n	8005a96 <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005a42:	78fa      	ldrb	r2, [r7, #3]
 8005a44:	6879      	ldr	r1, [r7, #4]
 8005a46:	4613      	mov	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	440b      	add	r3, r1
 8005a50:	3318      	adds	r3, #24
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	78f9      	ldrb	r1, [r7, #3]
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	440b      	add	r3, r1
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	4403      	add	r3, r0
 8005a62:	3338      	adds	r3, #56	; 0x38
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	fbb2 f1f3 	udiv	r1, r2, r3
 8005a6a:	fb01 f303 	mul.w	r3, r1, r3
 8005a6e:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d110      	bne.n	8005a96 <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005a74:	78fa      	ldrb	r2, [r7, #3]
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	3318      	adds	r3, #24
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005a88:	78f9      	ldrb	r1, [r7, #3]
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fe75 	bl	800677e <USBD_LL_Transmit>
 8005a94:	e016      	b.n	8005ac4 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00c      	beq.n	8005ac4 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ab0:	691c      	ldr	r4, [r3, #16]
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f503 6282 	add.w	r2, r3, #1040	; 0x410
 8005abe:	78fb      	ldrb	r3, [r7, #3]
 8005ac0:	7df8      	ldrb	r0, [r7, #23]
 8005ac2:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd90      	pop	{r4, r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	2000101c 	.word	0x2000101c
 8005ad4:	20001034 	.word	0x20001034

08005ad8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005aec:	2300      	movs	r3, #0
 8005aee:	73bb      	strb	r3, [r7, #14]
 8005af0:	e00b      	b.n	8005b0a <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8005af2:	7bbb      	ldrb	r3, [r7, #14]
 8005af4:	4a17      	ldr	r2, [pc, #92]	; (8005b54 <USBD_CDC_DataOut+0x7c>)
 8005af6:	5cd3      	ldrb	r3, [r2, r3]
 8005af8:	78fa      	ldrb	r2, [r7, #3]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d102      	bne.n	8005b04 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8005afe:	7bbb      	ldrb	r3, [r7, #14]
 8005b00:	73fb      	strb	r3, [r7, #15]
      break;
 8005b02:	e005      	b.n	8005b10 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005b04:	7bbb      	ldrb	r3, [r7, #14]
 8005b06:	3301      	adds	r3, #1
 8005b08:	73bb      	strb	r3, [r7, #14]
 8005b0a:	7bbb      	ldrb	r3, [r7, #14]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d9f0      	bls.n	8005af2 <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	f240 421c 	movw	r2, #1052	; 0x41c
 8005b16:	fb02 f303 	mul.w	r3, r2, r3
 8005b1a:	4a0f      	ldr	r2, [pc, #60]	; (8005b58 <USBD_CDC_DataOut+0x80>)
 8005b1c:	4413      	add	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005b20:	78fb      	ldrb	r3, [r7, #3]
 8005b22:	4619      	mov	r1, r3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fe6c 	bl	8006802 <USBD_LL_GetRxDataSize>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8005b46:	7bf8      	ldrb	r0, [r7, #15]
 8005b48:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	20001020 	.word	0x20001020
 8005b58:	20001034 	.word	0x20001034

08005b5c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005b5c:	b590      	push	{r4, r7, lr}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005b64:	2300      	movs	r3, #0
 8005b66:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	73fb      	strb	r3, [r7, #15]
 8005b6c:	e02e      	b.n	8005bcc <USBD_CDC_EP0_RxReady+0x70>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	f240 421c 	movw	r2, #1052	; 0x41c
 8005b74:	fb02 f303 	mul.w	r3, r2, r3
 8005b78:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <USBD_CDC_EP0_RxReady+0x80>)
 8005b7a:	4413      	add	r3, r2
 8005b7c:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d101      	bne.n	8005b88 <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e025      	b.n	8005bd4 <USBD_CDC_EP0_RxReady+0x78>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d019      	beq.n	8005bc6 <USBD_CDC_EP0_RxReady+0x6a>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8005b98:	2bff      	cmp	r3, #255	; 0xff
 8005b9a:	d014      	beq.n	8005bc6 <USBD_CDC_EP0_RxReady+0x6a>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005ba2:	689c      	ldr	r4, [r3, #8]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f893 1400 	ldrb.w	r1, [r3, #1024]	; 0x400
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
 8005bac:	025b      	lsls	r3, r3, #9
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	441a      	add	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	7bf8      	ldrb	r0, [r7, #15]
 8005bbc:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	22ff      	movs	r2, #255	; 0xff
 8005bc2:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005bc6:	7bfb      	ldrb	r3, [r7, #15]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	73fb      	strb	r3, [r7, #15]
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d9cd      	bls.n	8005b6e <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd90      	pop	{r4, r7, pc}
 8005bdc:	20001034 	.word	0x20001034

08005be0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	228d      	movs	r2, #141	; 0x8d
 8005bec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005bee:	4b03      	ldr	r3, [pc, #12]	; (8005bfc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bc80      	pop	{r7}
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	2000014c 	.word	0x2000014c

08005c00 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	228d      	movs	r2, #141	; 0x8d
 8005c0c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005c0e:	4b03      	ldr	r3, [pc, #12]	; (8005c1c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bc80      	pop	{r7}
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	200000bc 	.word	0x200000bc

08005c20 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	228d      	movs	r2, #141	; 0x8d
 8005c2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005c2e:	4b03      	ldr	r3, [pc, #12]	; (8005c3c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bc80      	pop	{r7}
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	2000014c 	.word	0x2000014c

08005c40 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	220a      	movs	r2, #10
 8005c4c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c4e:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bc80      	pop	{r7}
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	20000074 	.word	0x20000074

08005c60 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e004      	b.n	8005c7e <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bc80      	pop	{r7}
 8005c86:	4770      	bx	lr

08005c88 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b087      	sub	sp, #28
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	607a      	str	r2, [r7, #4]
 8005c92:	603b      	str	r3, [r7, #0]
 8005c94:	4603      	mov	r3, r0
 8005c96:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
 8005c9e:	f240 421c 	movw	r2, #1052	; 0x41c
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
 8005ca6:	4a08      	ldr	r2, [pc, #32]	; (8005cc8 <USBD_CDC_SetTxBuffer+0x40>)
 8005ca8:	4413      	add	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hcdc->TxLength = length;
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410

  return (uint8_t)USBD_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bc80      	pop	{r7}
 8005cc6:	4770      	bx	lr
 8005cc8:	20001034 	.word	0x20001034

08005ccc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
 8005cd8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
 8005ce0:	f240 421c 	movw	r2, #1052	; 0x41c
 8005ce4:	fb02 f303 	mul.w	r3, r2, r3
 8005ce8:	4a06      	ldr	r2, [pc, #24]	; (8005d04 <USBD_CDC_SetRxBuffer+0x38>)
 8005cea:	4413      	add	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  return (uint8_t)USBD_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	371c      	adds	r7, #28
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bc80      	pop	{r7}
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	20001034 	.word	0x20001034

08005d08 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	4603      	mov	r3, r0
 8005d10:	6039      	str	r1, [r7, #0]
 8005d12:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	f240 421c 	movw	r2, #1052	; 0x41c
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	4a17      	ldr	r2, [pc, #92]	; (8005d84 <USBD_CDC_TransmitPacket+0x7c>)
 8005d28:	4413      	add	r3, r2
 8005d2a:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d121      	bne.n	8005d7a <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8005d3e:	79fb      	ldrb	r3, [r7, #7]
 8005d40:	4a11      	ldr	r2, [pc, #68]	; (8005d88 <USBD_CDC_TransmitPacket+0x80>)
 8005d42:	5cd3      	ldrb	r3, [r2, r3]
 8005d44:	f003 020f 	and.w	r2, r3, #15
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 8005d4e:	6838      	ldr	r0, [r7, #0]
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4403      	add	r3, r0
 8005d5a:	3318      	adds	r3, #24
 8005d5c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	4a09      	ldr	r2, [pc, #36]	; (8005d88 <USBD_CDC_TransmitPacket+0x80>)
 8005d62:	5cd1      	ldrb	r1, [r2, r3]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8005d70:	6838      	ldr	r0, [r7, #0]
 8005d72:	f000 fd04 	bl	800677e <USBD_LL_Transmit>

    ret = USBD_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20001034 	.word	0x20001034
 8005d88:	2000101c 	.word	0x2000101c

08005d8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	4603      	mov	r3, r0
 8005d94:	6039      	str	r1, [r7, #0]
 8005d96:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8005d9c:	79fb      	ldrb	r3, [r7, #7]
 8005d9e:	f240 421c 	movw	r2, #1052	; 0x41c
 8005da2:	fb02 f303 	mul.w	r3, r2, r3
 8005da6:	4a11      	ldr	r2, [pc, #68]	; (8005dec <USBD_CDC_ReceivePacket+0x60>)
 8005da8:	4413      	add	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	7c1b      	ldrb	r3, [r3, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10b      	bne.n	8005dcc <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	4a0e      	ldr	r2, [pc, #56]	; (8005df0 <USBD_CDC_ReceivePacket+0x64>)
 8005db8:	5cd1      	ldrb	r1, [r2, r3]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dc4:	6838      	ldr	r0, [r7, #0]
 8005dc6:	f000 fcfb 	bl	80067c0 <USBD_LL_PrepareReceive>
 8005dca:	e009      	b.n	8005de0 <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8005dcc:	79fb      	ldrb	r3, [r7, #7]
 8005dce:	4a08      	ldr	r2, [pc, #32]	; (8005df0 <USBD_CDC_ReceivePacket+0x64>)
 8005dd0:	5cd1      	ldrb	r1, [r2, r3]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005dd8:	2340      	movs	r3, #64	; 0x40
 8005dda:	6838      	ldr	r0, [r7, #0]
 8005ddc:	f000 fcf0 	bl	80067c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	20001034 	.word	0x20001034
 8005df0:	20001020 	.word	0x20001020

08005df4 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	4608      	mov	r0, r1
 8005dfe:	4611      	mov	r1, r2
 8005e00:	461a      	mov	r2, r3
 8005e02:	4603      	mov	r3, r0
 8005e04:	70fb      	strb	r3, [r7, #3]
 8005e06:	460b      	mov	r3, r1
 8005e08:	70bb      	strb	r3, [r7, #2]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	707b      	strb	r3, [r7, #1]
  desc += 9;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	3309      	adds	r3, #9
 8005e12:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005e14:	2300      	movs	r3, #0
 8005e16:	73fb      	strb	r3, [r7, #15]
 8005e18:	e05b      	b.n	8005ed2 <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3302      	adds	r3, #2
 8005e1e:	78fa      	ldrb	r2, [r7, #3]
 8005e20:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3310      	adds	r3, #16
 8005e26:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005e2a:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	330a      	adds	r3, #10
 8005e30:	78fa      	ldrb	r2, [r7, #3]
 8005e32:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	331a      	adds	r3, #26
 8005e38:	78ba      	ldrb	r2, [r7, #2]
 8005e3a:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3322      	adds	r3, #34	; 0x22
 8005e40:	78fa      	ldrb	r2, [r7, #3]
 8005e42:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3323      	adds	r3, #35	; 0x23
 8005e48:	78ba      	ldrb	r2, [r7, #2]
 8005e4a:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3326      	adds	r3, #38	; 0x26
 8005e50:	7e3a      	ldrb	r2, [r7, #24]
 8005e52:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	332d      	adds	r3, #45	; 0x2d
 8005e58:	78ba      	ldrb	r2, [r7, #2]
 8005e5a:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3336      	adds	r3, #54	; 0x36
 8005e60:	7f3a      	ldrb	r2, [r7, #28]
 8005e62:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	333d      	adds	r3, #61	; 0x3d
 8005e68:	787a      	ldrb	r2, [r7, #1]
 8005e6a:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	3342      	adds	r3, #66	; 0x42
 8005e70:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	491b      	ldr	r1, [pc, #108]	; (8005ee4 <USBD_Update_CDC_ACM_DESC+0xf0>)
 8005e76:	787a      	ldrb	r2, [r7, #1]
 8005e78:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	491a      	ldr	r1, [pc, #104]	; (8005ee8 <USBD_Update_CDC_ACM_DESC+0xf4>)
 8005e7e:	7f3a      	ldrb	r2, [r7, #28]
 8005e80:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
 8005e84:	4919      	ldr	r1, [pc, #100]	; (8005eec <USBD_Update_CDC_ACM_DESC+0xf8>)
 8005e86:	7e3a      	ldrb	r2, [r7, #24]
 8005e88:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	4918      	ldr	r1, [pc, #96]	; (8005ef0 <USBD_Update_CDC_ACM_DESC+0xfc>)
 8005e8e:	78fa      	ldrb	r2, [r7, #3]
 8005e90:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	4917      	ldr	r1, [pc, #92]	; (8005ef4 <USBD_Update_CDC_ACM_DESC+0x100>)
 8005e96:	78ba      	ldrb	r2, [r7, #2]
 8005e98:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	4916      	ldr	r1, [pc, #88]	; (8005ef8 <USBD_Update_CDC_ACM_DESC+0x104>)
 8005e9e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005ea2:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8005ea4:	787b      	ldrb	r3, [r7, #1]
 8005ea6:	3302      	adds	r3, #2
 8005ea8:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 8005eaa:	787b      	ldrb	r3, [r7, #1]
 8005eac:	3301      	adds	r3, #1
 8005eae:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8005eb0:	7f3b      	ldrb	r3, [r7, #28]
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8005eb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005eba:	3301      	adds	r3, #1
 8005ebc:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	3302      	adds	r3, #2
 8005ec4:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	73fb      	strb	r3, [r7, #15]
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d9a0      	bls.n	8005e1a <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 8005ed8:	bf00      	nop
 8005eda:	bf00      	nop
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bc80      	pop	{r7}
 8005ee2:	4770      	bx	lr
 8005ee4:	2000101c 	.word	0x2000101c
 8005ee8:	20001020 	.word	0x20001020
 8005eec:	20001024 	.word	0x20001024
 8005ef0:	20001028 	.word	0x20001028
 8005ef4:	2000102c 	.word	0x2000102c
 8005ef8:	20001030 	.word	0x20001030

08005efc <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	460b      	mov	r3, r1
 8005f06:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8005f08:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <USBD_COMPOSITE_Init+0x24>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	78fa      	ldrb	r2, [r7, #3]
 8005f0e:	4611      	mov	r1, r2
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000080 	.word	0x20000080

08005f24 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8005f30:	4b05      	ldr	r3, [pc, #20]	; (8005f48 <USBD_COMPOSITE_DeInit+0x24>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	78fa      	ldrb	r2, [r7, #3]
 8005f36:	4611      	mov	r1, r2
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3708      	adds	r7, #8
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	20000080 	.word	0x20000080

08005f4c <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005f56:	2300      	movs	r3, #0
 8005f58:	73fb      	strb	r3, [r7, #15]
 8005f5a:	e019      	b.n	8005f90 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	889b      	ldrh	r3, [r3, #4]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	7bfb      	ldrb	r3, [r7, #15]
 8005f64:	490e      	ldr	r1, [pc, #56]	; (8005fa0 <USBD_COMPOSITE_Setup+0x54>)
 8005f66:	5ccb      	ldrb	r3, [r1, r3]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d007      	beq.n	8005f7c <USBD_COMPOSITE_Setup+0x30>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	889b      	ldrh	r3, [r3, #4]
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	490b      	ldr	r1, [pc, #44]	; (8005fa4 <USBD_COMPOSITE_Setup+0x58>)
 8005f76:	5ccb      	ldrb	r3, [r1, r3]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d106      	bne.n	8005f8a <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 8005f7c:	4b0a      	ldr	r3, [pc, #40]	; (8005fa8 <USBD_COMPOSITE_Setup+0x5c>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	4798      	blx	r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	e006      	b.n	8005f98 <USBD_COMPOSITE_Setup+0x4c>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	73fb      	strb	r3, [r7, #15]
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d9e2      	bls.n	8005f5c <USBD_COMPOSITE_Setup+0x10>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 8005f96:	2303      	movs	r3, #3
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3710      	adds	r7, #16
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}
 8005fa0:	20001028 	.word	0x20001028
 8005fa4:	2000102c 	.word	0x2000102c
 8005fa8:	20000080 	.word	0x20000080

08005fac <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005fb8:	2300      	movs	r3, #0
 8005fba:	73fb      	strb	r3, [r7, #15]
 8005fbc:	e01a      	b.n	8005ff4 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 8005fbe:	78fa      	ldrb	r2, [r7, #3]
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
 8005fc2:	4910      	ldr	r1, [pc, #64]	; (8006004 <USBD_COMPOSITE_DataIn+0x58>)
 8005fc4:	5ccb      	ldrb	r3, [r1, r3]
 8005fc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d007      	beq.n	8005fde <USBD_COMPOSITE_DataIn+0x32>
 8005fce:	78fa      	ldrb	r2, [r7, #3]
 8005fd0:	7bfb      	ldrb	r3, [r7, #15]
 8005fd2:	490d      	ldr	r1, [pc, #52]	; (8006008 <USBD_COMPOSITE_DataIn+0x5c>)
 8005fd4:	5ccb      	ldrb	r3, [r1, r3]
 8005fd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d107      	bne.n	8005fee <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 8005fde:	4b0b      	ldr	r3, [pc, #44]	; (800600c <USBD_COMPOSITE_DataIn+0x60>)
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	78fa      	ldrb	r2, [r7, #3]
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	4798      	blx	r3
 8005fea:	4603      	mov	r3, r0
 8005fec:	e006      	b.n	8005ffc <USBD_COMPOSITE_DataIn+0x50>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8005fee:	7bfb      	ldrb	r3, [r7, #15]
 8005ff0:	3301      	adds	r3, #1
 8005ff2:	73fb      	strb	r3, [r7, #15]
 8005ff4:	7bfb      	ldrb	r3, [r7, #15]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d9e1      	bls.n	8005fbe <USBD_COMPOSITE_DataIn+0x12>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 8005ffa:	2303      	movs	r3, #3
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	2000101c 	.word	0x2000101c
 8006008:	20001024 	.word	0x20001024
 800600c:	20000080 	.word	0x20000080

08006010 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8006018:	4b04      	ldr	r3, [pc, #16]	; (800602c <USBD_COMPOSITE_EP0_RxReady+0x1c>)
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	4798      	blx	r3
  USBD_DFU.EP0_RxReady(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3708      	adds	r7, #8
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20000080 	.word	0x20000080

08006030 <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  USBD_DFU.EP0_TxSent(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	370c      	adds	r7, #12
 800603e:	46bd      	mov	sp, r7
 8006040:	bc80      	pop	{r7}
 8006042:	4770      	bx	lr

08006044 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  USBD_DFU.SOF(pdev);
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	bc80      	pop	{r7}
 8006056:	4770      	bx	lr

08006058 <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	bc80      	pop	{r7}
 800606e:	4770      	bx	lr

08006070 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	bc80      	pop	{r7}
 8006086:	4770      	bx	lr

08006088 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8006094:	2300      	movs	r3, #0
 8006096:	73fb      	strb	r3, [r7, #15]
 8006098:	e010      	b.n	80060bc <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	4a0b      	ldr	r2, [pc, #44]	; (80060cc <USBD_COMPOSITE_DataOut+0x44>)
 800609e:	5cd3      	ldrb	r3, [r2, r3]
 80060a0:	78fa      	ldrb	r2, [r7, #3]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d107      	bne.n	80060b6 <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 80060a6:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <USBD_COMPOSITE_DataOut+0x48>)
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	78fa      	ldrb	r2, [r7, #3]
 80060ac:	4611      	mov	r1, r2
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	4798      	blx	r3
 80060b2:	4603      	mov	r3, r0
 80060b4:	e006      	b.n	80060c4 <USBD_COMPOSITE_DataOut+0x3c>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
 80060b8:	3301      	adds	r3, #1
 80060ba:	73fb      	strb	r3, [r7, #15]
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d9eb      	bls.n	800609a <USBD_COMPOSITE_DataOut+0x12>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 80060c2:	2303      	movs	r3, #3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	20001020 	.word	0x20001020
 80060d0:	20000080 	.word	0x20000080

080060d4 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	228d      	movs	r2, #141	; 0x8d
 80060e0:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 80060e2:	4b03      	ldr	r3, [pc, #12]	; (80060f0 <USBD_COMPOSITE_GetHSCfgDesc+0x1c>)
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bc80      	pop	{r7}
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	200018fc 	.word	0x200018fc

080060f4 <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	228d      	movs	r2, #141	; 0x8d
 8006100:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 8006102:	4b03      	ldr	r3, [pc, #12]	; (8006110 <USBD_COMPOSITE_GetFSCfgDesc+0x1c>)
}
 8006104:	4618      	mov	r0, r3
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	bc80      	pop	{r7}
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	2000186c 	.word	0x2000186c

08006114 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	228d      	movs	r2, #141	; 0x8d
 8006120:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8006122:	4b03      	ldr	r3, [pc, #12]	; (8006130 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x1c>)
#endif
}
 8006124:	4618      	mov	r0, r3
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	bc80      	pop	{r7}
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	200018fc 	.word	0x200018fc

08006134 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	220a      	movs	r2, #10
 8006140:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8006142:	4b03      	ldr	r3, [pc, #12]	; (8006150 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8006144:	4618      	mov	r0, r3
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	bc80      	pop	{r7}
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	2000021c 	.word	0x2000021c

08006154 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08a      	sub	sp, #40	; 0x28
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	460b      	mov	r3, r1
 800615e:	607a      	str	r2, [r7, #4]
 8006160:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8006162:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <USBD_COMPOSITE_GetUsrStringDesc+0x7c>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	7afa      	ldrb	r2, [r7, #11]
 8006168:	429a      	cmp	r2, r3
 800616a:	d82c      	bhi.n	80061c6 <USBD_COMPOSITE_GetUsrStringDesc+0x72>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	f107 0318 	add.w	r3, r7, #24
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	605a      	str	r2, [r3, #4]
 800617a:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800617c:	2300      	movs	r3, #0
 800617e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006182:	e01a      	b.n	80061ba <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8006184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006188:	4a12      	ldr	r2, [pc, #72]	; (80061d4 <USBD_COMPOSITE_GetUsrStringDesc+0x80>)
 800618a:	5cd3      	ldrb	r3, [r2, r3]
 800618c:	7afa      	ldrb	r2, [r7, #11]
 800618e:	429a      	cmp	r2, r3
 8006190:	d10e      	bne.n	80061b0 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8006192:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006196:	f107 0014 	add.w	r0, r7, #20
 800619a:	4a0f      	ldr	r2, [pc, #60]	; (80061d8 <USBD_COMPOSITE_GetUsrStringDesc+0x84>)
 800619c:	2110      	movs	r1, #16
 800619e:	f000 fbaf 	bl	8006900 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 80061a2:	f107 0314 	add.w	r3, r7, #20
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	490c      	ldr	r1, [pc, #48]	; (80061dc <USBD_COMPOSITE_GetUsrStringDesc+0x88>)
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 f961 	bl	8006472 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80061b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061b4:	3301      	adds	r3, #1
 80061b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d9e0      	bls.n	8006184 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 80061c2:	4b06      	ldr	r3, [pc, #24]	; (80061dc <USBD_COMPOSITE_GetUsrStringDesc+0x88>)
 80061c4:	e000      	b.n	80061c8 <USBD_COMPOSITE_GetUsrStringDesc+0x74>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80061c6:	2300      	movs	r3, #0
  }
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3728      	adds	r7, #40	; 0x28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20000218 	.word	0x20000218
 80061d4:	20001030 	.word	0x20001030
 80061d8:	08007c7c 	.word	0x08007c7c
 80061dc:	2000198c 	.word	0x2000198c

080061e0 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 80061e0:	b590      	push	{r4, r7, lr}
 80061e2:	b089      	sub	sp, #36	; 0x24
 80061e4:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 80061e6:	2300      	movs	r3, #0
 80061e8:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 80061ee:	2381      	movs	r3, #129	; 0x81
 80061f0:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 80061f2:	2301      	movs	r3, #1
 80061f4:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 80061f6:	2300      	movs	r3, #0
 80061f8:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 80061fa:	4b54      	ldr	r3, [pc, #336]	; (800634c <USBD_COMPOSITE_Mount_Class+0x16c>)
 80061fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fe:	1d3a      	adds	r2, r7, #4
 8006200:	4610      	mov	r0, r2
 8006202:	4798      	blx	r3
 8006204:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8006206:	7a7b      	ldrb	r3, [r7, #9]
 8006208:	3301      	adds	r3, #1
 800620a:	b2d8      	uxtb	r0, r3
 800620c:	7afb      	ldrb	r3, [r7, #11]
 800620e:	3301      	adds	r3, #1
 8006210:	b2db      	uxtb	r3, r3
 8006212:	4a4f      	ldr	r2, [pc, #316]	; (8006350 <USBD_COMPOSITE_Mount_Class+0x170>)
 8006214:	7812      	ldrb	r2, [r2, #0]
 8006216:	7afc      	ldrb	r4, [r7, #11]
 8006218:	7a79      	ldrb	r1, [r7, #9]
 800621a:	9202      	str	r2, [sp, #8]
 800621c:	7aba      	ldrb	r2, [r7, #10]
 800621e:	9201      	str	r2, [sp, #4]
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	4623      	mov	r3, r4
 8006224:	4602      	mov	r2, r0
 8006226:	68f8      	ldr	r0, [r7, #12]
 8006228:	f7ff fde4 	bl	8005df4 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3309      	adds	r3, #9
 8006230:	88ba      	ldrh	r2, [r7, #4]
 8006232:	3a09      	subs	r2, #9
 8006234:	4619      	mov	r1, r3
 8006236:	4847      	ldr	r0, [pc, #284]	; (8006354 <USBD_COMPOSITE_Mount_Class+0x174>)
 8006238:	f000 fb4c 	bl	80068d4 <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 800623c:	4b43      	ldr	r3, [pc, #268]	; (800634c <USBD_COMPOSITE_Mount_Class+0x16c>)
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	1d3a      	adds	r2, r7, #4
 8006242:	4610      	mov	r0, r2
 8006244:	4798      	blx	r3
 8006246:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8006248:	7a7b      	ldrb	r3, [r7, #9]
 800624a:	3301      	adds	r3, #1
 800624c:	b2d8      	uxtb	r0, r3
 800624e:	7afb      	ldrb	r3, [r7, #11]
 8006250:	3301      	adds	r3, #1
 8006252:	b2db      	uxtb	r3, r3
 8006254:	4a3e      	ldr	r2, [pc, #248]	; (8006350 <USBD_COMPOSITE_Mount_Class+0x170>)
 8006256:	7812      	ldrb	r2, [r2, #0]
 8006258:	7afc      	ldrb	r4, [r7, #11]
 800625a:	7a79      	ldrb	r1, [r7, #9]
 800625c:	9202      	str	r2, [sp, #8]
 800625e:	7aba      	ldrb	r2, [r7, #10]
 8006260:	9201      	str	r2, [sp, #4]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	4623      	mov	r3, r4
 8006266:	4602      	mov	r2, r0
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f7ff fdc3 	bl	8005df4 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	3309      	adds	r3, #9
 8006272:	88ba      	ldrh	r2, [r7, #4]
 8006274:	3a09      	subs	r2, #9
 8006276:	4619      	mov	r1, r3
 8006278:	4837      	ldr	r0, [pc, #220]	; (8006358 <USBD_COMPOSITE_Mount_Class+0x178>)
 800627a:	f000 fb2b 	bl	80068d4 <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 800627e:	7afb      	ldrb	r3, [r7, #11]
 8006280:	3304      	adds	r3, #4
 8006282:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 8006284:	7abb      	ldrb	r3, [r7, #10]
 8006286:	3302      	adds	r3, #2
 8006288:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 800628a:	7a7b      	ldrb	r3, [r7, #9]
 800628c:	3304      	adds	r3, #4
 800628e:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 8006290:	4b2f      	ldr	r3, [pc, #188]	; (8006350 <USBD_COMPOSITE_Mount_Class+0x170>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	3302      	adds	r3, #2
 8006296:	b2da      	uxtb	r2, r3
 8006298:	4b2d      	ldr	r3, [pc, #180]	; (8006350 <USBD_COMPOSITE_Mount_Class+0x170>)
 800629a:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 800629c:	238d      	movs	r3, #141	; 0x8d
 800629e:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 80062a0:	4b2e      	ldr	r3, [pc, #184]	; (800635c <USBD_COMPOSITE_Mount_Class+0x17c>)
 80062a2:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2209      	movs	r2, #9
 80062a8:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3301      	adds	r3, #1
 80062ae:	2202      	movs	r2, #2
 80062b0:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3302      	adds	r3, #2
 80062b6:	88fa      	ldrh	r2, [r7, #6]
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 80062bc:	88fb      	ldrh	r3, [r7, #6]
 80062be:	0a1b      	lsrs	r3, r3, #8
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3303      	adds	r3, #3
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3304      	adds	r3, #4
 80062ce:	7a7a      	ldrb	r2, [r7, #9]
 80062d0:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	3305      	adds	r3, #5
 80062d6:	2201      	movs	r2, #1
 80062d8:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3306      	adds	r3, #6
 80062de:	2200      	movs	r2, #0
 80062e0:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3307      	adds	r3, #7
 80062e6:	22c0      	movs	r2, #192	; 0xc0
 80062e8:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	3308      	adds	r3, #8
 80062ee:	2232      	movs	r2, #50	; 0x32
 80062f0:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 80062f2:	4b1b      	ldr	r3, [pc, #108]	; (8006360 <USBD_COMPOSITE_Mount_Class+0x180>)
 80062f4:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2209      	movs	r2, #9
 80062fa:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3301      	adds	r3, #1
 8006300:	2202      	movs	r2, #2
 8006302:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3302      	adds	r3, #2
 8006308:	88fa      	ldrh	r2, [r7, #6]
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800630e:	88fb      	ldrh	r3, [r7, #6]
 8006310:	0a1b      	lsrs	r3, r3, #8
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	3303      	adds	r3, #3
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3304      	adds	r3, #4
 8006320:	7a7a      	ldrb	r2, [r7, #9]
 8006322:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3305      	adds	r3, #5
 8006328:	2201      	movs	r2, #1
 800632a:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	3306      	adds	r3, #6
 8006330:	2200      	movs	r2, #0
 8006332:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	3307      	adds	r3, #7
 8006338:	22c0      	movs	r2, #192	; 0xc0
 800633a:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	3308      	adds	r3, #8
 8006340:	2232      	movs	r2, #50	; 0x32
 8006342:	701a      	strb	r2, [r3, #0]

  (void)out_ep_track;
  (void)in_ep_track;
}
 8006344:	bf00      	nop
 8006346:	3714      	adds	r7, #20
 8006348:	46bd      	mov	sp, r7
 800634a:	bd90      	pop	{r4, r7, pc}
 800634c:	20000080 	.word	0x20000080
 8006350:	20000218 	.word	0x20000218
 8006354:	20001875 	.word	0x20001875
 8006358:	20001905 	.word	0x20001905
 800635c:	200018fc 	.word	0x200018fc
 8006360:	2000186c 	.word	0x2000186c

08006364 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	4613      	mov	r3, r2
 8006370:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d101      	bne.n	800637c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006378:	2303      	movs	r3, #3
 800637a:	e01b      	b.n	80063b4 <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pConfDesc = NULL;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	79fa      	ldrb	r2, [r7, #7]
 80063a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 f8f9 	bl	80065a0 <USBD_LL_Init>
 80063ae:	4603      	mov	r3, r0
 80063b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80063b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d101      	bne.n	80063d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e02d      	b.n	8006430 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	7c1b      	ldrb	r3, [r3, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d112      	bne.n	800640a <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01e      	beq.n	800642e <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f8:	f107 020e 	add.w	r2, r7, #14
 80063fc:	4610      	mov	r0, r2
 80063fe:	4798      	blx	r3
 8006400:	4602      	mov	r2, r0
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 8006408:	e011      	b.n	800642e <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00b      	beq.n	800642e <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800641c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641e:	f107 020e 	add.w	r2, r7, #14
 8006422:	4610      	mov	r0, r2
 8006424:	4798      	blx	r3
 8006426:	4602      	mov	r2, r0
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
  }

  return USBD_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f91d 	bl	8006680 <USBD_LL_Start>
 8006446:	4603      	mov	r3, r0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3708      	adds	r7, #8
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800645a:	2180      	movs	r1, #128	; 0x80
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f96f 	bl	8006740 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006462:	2100      	movs	r1, #0
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f000 f96b 	bl	8006740 <USBD_LL_StallEP>
}
 800646a:	bf00      	nop
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b086      	sub	sp, #24
 8006476:	af00      	add	r7, sp, #0
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d036      	beq.n	80064f6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800648c:	6938      	ldr	r0, [r7, #16]
 800648e:	f000 f836 	bl	80064fe <USBD_GetLen>
 8006492:	4603      	mov	r3, r0
 8006494:	3301      	adds	r3, #1
 8006496:	b29b      	uxth	r3, r3
 8006498:	005b      	lsls	r3, r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	4413      	add	r3, r2
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	7812      	ldrb	r2, [r2, #0]
 80064aa:	701a      	strb	r2, [r3, #0]
  idx++;
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	3301      	adds	r3, #1
 80064b0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80064b2:	7dfb      	ldrb	r3, [r7, #23]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	4413      	add	r3, r2
 80064b8:	2203      	movs	r2, #3
 80064ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	3301      	adds	r3, #1
 80064c0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80064c2:	e013      	b.n	80064ec <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	4413      	add	r3, r2
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	7812      	ldrb	r2, [r2, #0]
 80064ce:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	3301      	adds	r3, #1
 80064d4:	613b      	str	r3, [r7, #16]
    idx++;
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
 80064d8:	3301      	adds	r3, #1
 80064da:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	4413      	add	r3, r2
 80064e2:	2200      	movs	r2, #0
 80064e4:	701a      	strb	r2, [r3, #0]
    idx++;
 80064e6:	7dfb      	ldrb	r3, [r7, #23]
 80064e8:	3301      	adds	r3, #1
 80064ea:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e7      	bne.n	80064c4 <USBD_GetString+0x52>
 80064f4:	e000      	b.n	80064f8 <USBD_GetString+0x86>
    return;
 80064f6:	bf00      	nop
  }
}
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80064fe:	b480      	push	{r7}
 8006500:	b085      	sub	sp, #20
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800650e:	e005      	b.n	800651c <USBD_GetLen+0x1e>
  {
    len++;
 8006510:	7bfb      	ldrb	r3, [r7, #15]
 8006512:	3301      	adds	r3, #1
 8006514:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	3301      	adds	r3, #1
 800651a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1f5      	bne.n	8006510 <USBD_GetLen+0x12>
  }

  return len;
 8006524:	7bfb      	ldrb	r3, [r7, #15]
}
 8006526:	4618      	mov	r0, r3
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr

08006530 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2202      	movs	r2, #2
 8006540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	68ba      	ldr	r2, [r7, #8]
 8006554:	2100      	movs	r1, #0
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 f911 	bl	800677e <USBD_LL_Transmit>

  return USBD_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	60f8      	str	r0, [r7, #12]
 800656e:	60b9      	str	r1, [r7, #8]
 8006570:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2203      	movs	r2, #3
 8006576:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	2100      	movs	r1, #0
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 f915 	bl	80067c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
#endif
  }
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 80065a8:	4b30      	ldr	r3, [pc, #192]	; (800666c <USBD_LL_Init+0xcc>)
 80065aa:	4a31      	ldr	r2, [pc, #196]	; (8006670 <USBD_LL_Init+0xd0>)
 80065ac:	601a      	str	r2, [r3, #0]
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#endif

  if (pdev->id == DEVICE_FS)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d154      	bne.n	8006660 <USBD_LL_Init+0xc0>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 80065b6:	4b2d      	ldr	r3, [pc, #180]	; (800666c <USBD_LL_Init+0xcc>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
    pdev->pData = hpcd_USB_OTG_PTR;
 80065c0:	4b2a      	ldr	r3, [pc, #168]	; (800666c <USBD_LL_Init+0xcc>)
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310

    /* @see HAL_PCD_Init() usb_otg.c generated by cube **/

#if (STM32F1_DEVICE)
    /** Device is F1 or similar or if HAL_PCDEx_PMAConfig() is used by HAL driver */
    uint16_t pma_track = 0x40; /** PMA offset*/
 80065ca:	2340      	movs	r3, #64	; 0x40
 80065cc:	81fb      	strh	r3, [r7, #14]

    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x00, PCD_SNG_BUF, pma_track);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 80065d4:	89fb      	ldrh	r3, [r7, #14]
 80065d6:	2200      	movs	r2, #0
 80065d8:	2100      	movs	r1, #0
 80065da:	f7fb f912 	bl	8001802 <HAL_PCDEx_PMAConfig>
    pma_track += 0x40;
 80065de:	89fb      	ldrh	r3, [r7, #14]
 80065e0:	3340      	adds	r3, #64	; 0x40
 80065e2:	81fb      	strh	r3, [r7, #14]

    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, 0x80, PCD_SNG_BUF, pma_track);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 80065ea:	89fb      	ldrh	r3, [r7, #14]
 80065ec:	2200      	movs	r2, #0
 80065ee:	2180      	movs	r1, #128	; 0x80
 80065f0:	f7fb f907 	bl	8001802 <HAL_PCDEx_PMAConfig>
    pma_track += 0x40;
 80065f4:	89fb      	ldrh	r3, [r7, #14]
 80065f6:	3340      	adds	r3, #64	; 0x40
 80065f8:	81fb      	strh	r3, [r7, #14]
    pma_track += 128;
    HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, PRNT_OUT_EP, PCD_SNG_BUF, pma_track);
    pma_track += 128;
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80065fa:	2300      	movs	r3, #0
 80065fc:	737b      	strb	r3, [r7, #13]
 80065fe:	e02c      	b.n	800665a <USBD_LL_Init+0xba>
    {
      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_IN_EP[i], PCD_SNG_BUF, pma_track);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8006606:	7b7b      	ldrb	r3, [r7, #13]
 8006608:	4a1a      	ldr	r2, [pc, #104]	; (8006674 <USBD_LL_Init+0xd4>)
 800660a:	5cd3      	ldrb	r3, [r2, r3]
 800660c:	b299      	uxth	r1, r3
 800660e:	89fb      	ldrh	r3, [r7, #14]
 8006610:	2200      	movs	r2, #0
 8006612:	f7fb f8f6 	bl	8001802 <HAL_PCDEx_PMAConfig>
      pma_track += 48;
 8006616:	89fb      	ldrh	r3, [r7, #14]
 8006618:	3330      	adds	r3, #48	; 0x30
 800661a:	81fb      	strh	r3, [r7, #14]

      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_OUT_EP[i], PCD_SNG_BUF, pma_track);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 8006622:	7b7b      	ldrb	r3, [r7, #13]
 8006624:	4a14      	ldr	r2, [pc, #80]	; (8006678 <USBD_LL_Init+0xd8>)
 8006626:	5cd3      	ldrb	r3, [r2, r3]
 8006628:	b299      	uxth	r1, r3
 800662a:	89fb      	ldrh	r3, [r7, #14]
 800662c:	2200      	movs	r2, #0
 800662e:	f7fb f8e8 	bl	8001802 <HAL_PCDEx_PMAConfig>
      pma_track += 48;
 8006632:	89fb      	ldrh	r3, [r7, #14]
 8006634:	3330      	adds	r3, #48	; 0x30
 8006636:	81fb      	strh	r3, [r7, #14]

      HAL_PCDEx_PMAConfig((PCD_HandleTypeDef *)pdev->pData, CDC_CMD_EP[i], PCD_SNG_BUF, pma_track);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800663e:	7b7b      	ldrb	r3, [r7, #13]
 8006640:	4a0e      	ldr	r2, [pc, #56]	; (800667c <USBD_LL_Init+0xdc>)
 8006642:	5cd3      	ldrb	r3, [r2, r3]
 8006644:	b299      	uxth	r1, r3
 8006646:	89fb      	ldrh	r3, [r7, #14]
 8006648:	2200      	movs	r2, #0
 800664a:	f7fb f8da 	bl	8001802 <HAL_PCDEx_PMAConfig>
      pma_track += 8;
 800664e:	89fb      	ldrh	r3, [r7, #14]
 8006650:	3308      	adds	r3, #8
 8006652:	81fb      	strh	r3, [r7, #14]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8006654:	7b7b      	ldrb	r3, [r7, #13]
 8006656:	3301      	adds	r3, #1
 8006658:	737b      	strb	r3, [r7, #13]
 800665a:	7b7b      	ldrb	r3, [r7, #13]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d9cf      	bls.n	8006600 <USBD_LL_Init+0x60>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3710      	adds	r7, #16
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	200019cc 	.word	0x200019cc
 8006670:	200002c8 	.word	0x200002c8
 8006674:	2000101c 	.word	0x2000101c
 8006678:	20001020 	.word	0x20001020
 800667c:	20001024 	.word	0x20001024

08006680 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8006696:	4618      	mov	r0, r3
 8006698:	f7fa ff09 	bl	80014ae <HAL_PCD_Start>
 800669c:	4603      	mov	r3, r0
 800669e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80066a0:	7bfb      	ldrb	r3, [r7, #15]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 f8c0 	bl	8006828 <USBD_Get_USB_Status>
 80066a8:	4603      	mov	r3, r0
 80066aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	4608      	mov	r0, r1
 80066c0:	4611      	mov	r1, r2
 80066c2:	461a      	mov	r2, r3
 80066c4:	4603      	mov	r3, r0
 80066c6:	70fb      	strb	r3, [r7, #3]
 80066c8:	460b      	mov	r3, r1
 80066ca:	70bb      	strb	r3, [r7, #2]
 80066cc:	4613      	mov	r3, r2
 80066ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066d0:	2300      	movs	r3, #0
 80066d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 80066de:	78bb      	ldrb	r3, [r7, #2]
 80066e0:	883a      	ldrh	r2, [r7, #0]
 80066e2:	78f9      	ldrb	r1, [r7, #3]
 80066e4:	f7fa ff09 	bl	80014fa <HAL_PCD_EP_Open>
 80066e8:	4603      	mov	r3, r0
 80066ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 f89a 	bl	8006828 <USBD_Get_USB_Status>
 80066f4:	4603      	mov	r3, r0
 80066f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b084      	sub	sp, #16
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	460b      	mov	r3, r1
 800670c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800671c:	78fa      	ldrb	r2, [r7, #3]
 800671e:	4611      	mov	r1, r2
 8006720:	4618      	mov	r0, r3
 8006722:	f7fa ff47 	bl	80015b4 <HAL_PCD_EP_Close>
 8006726:	4603      	mov	r3, r0
 8006728:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	4618      	mov	r0, r3
 800672e:	f000 f87b 	bl	8006828 <USBD_Get_USB_Status>
 8006732:	4603      	mov	r3, r0
 8006734:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006736:	7bbb      	ldrb	r3, [r7, #14]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	460b      	mov	r3, r1
 800674a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006750:	2300      	movs	r3, #0
 8006752:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800675a:	78fa      	ldrb	r2, [r7, #3]
 800675c:	4611      	mov	r1, r2
 800675e:	4618      	mov	r0, r3
 8006760:	f7fa ffef 	bl	8001742 <HAL_PCD_EP_SetStall>
 8006764:	4603      	mov	r3, r0
 8006766:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 8006768:	7bfb      	ldrb	r3, [r7, #15]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 f85c 	bl	8006828 <USBD_Get_USB_Status>
 8006770:	4603      	mov	r3, r0
 8006772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006774:	7bbb      	ldrb	r3, [r7, #14]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3710      	adds	r7, #16
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}

0800677e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800677e:	b580      	push	{r7, lr}
 8006780:	b086      	sub	sp, #24
 8006782:	af00      	add	r7, sp, #0
 8006784:	60f8      	str	r0, [r7, #12]
 8006786:	607a      	str	r2, [r7, #4]
 8006788:	603b      	str	r3, [r7, #0]
 800678a:	460b      	mov	r3, r1
 800678c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006792:	2300      	movs	r3, #0
 8006794:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800679c:	7af9      	ldrb	r1, [r7, #11]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	687a      	ldr	r2, [r7, #4]
 80067a2:	f7fa ff97 	bl	80016d4 <HAL_PCD_EP_Transmit>
 80067a6:	4603      	mov	r3, r0
 80067a8:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 f83b 	bl	8006828 <USBD_Get_USB_Status>
 80067b2:	4603      	mov	r3, r0
 80067b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80067b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	607a      	str	r2, [r7, #4]
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	460b      	mov	r3, r1
 80067ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80067d0:	2300      	movs	r3, #0
 80067d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 80067de:	7af9      	ldrb	r1, [r7, #11]
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	f7fa ff2e 	bl	8001644 <HAL_PCD_EP_Receive>
 80067e8:	4603      	mov	r3, r0
 80067ea:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 80067ec:	7dfb      	ldrb	r3, [r7, #23]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 f81a 	bl	8006828 <USBD_Get_USB_Status>
 80067f4:	4603      	mov	r3, r0
 80067f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80067f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8006814:	78fa      	ldrb	r2, [r7, #3]
 8006816:	4611      	mov	r1, r2
 8006818:	4618      	mov	r0, r3
 800681a:	f7fa ff44 	bl	80016a6 <HAL_PCD_EP_GetRxCount>
 800681e:	4603      	mov	r3, r0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	4603      	mov	r3, r0
 8006830:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	2b03      	cmp	r3, #3
 800683a:	d817      	bhi.n	800686c <USBD_Get_USB_Status+0x44>
 800683c:	a201      	add	r2, pc, #4	; (adr r2, 8006844 <USBD_Get_USB_Status+0x1c>)
 800683e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006842:	bf00      	nop
 8006844:	08006855 	.word	0x08006855
 8006848:	0800685b 	.word	0x0800685b
 800684c:	08006861 	.word	0x08006861
 8006850:	08006867 	.word	0x08006867
  {
  case HAL_OK:
    usb_status = USBD_OK;
 8006854:	2300      	movs	r3, #0
 8006856:	73fb      	strb	r3, [r7, #15]
    break;
 8006858:	e00b      	b.n	8006872 <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800685a:	2303      	movs	r3, #3
 800685c:	73fb      	strb	r3, [r7, #15]
    break;
 800685e:	e008      	b.n	8006872 <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 8006860:	2301      	movs	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]
    break;
 8006864:	e005      	b.n	8006872 <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 8006866:	2303      	movs	r3, #3
 8006868:	73fb      	strb	r3, [r7, #15]
    break;
 800686a:	e002      	b.n	8006872 <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800686c:	2303      	movs	r3, #3
 800686e:	73fb      	strb	r3, [r7, #15]
    break;
 8006870:	bf00      	nop
  }
  return usb_status;
 8006872:	7bfb      	ldrb	r3, [r7, #15]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	bc80      	pop	{r7}
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop

08006880 <__errno>:
 8006880:	4b01      	ldr	r3, [pc, #4]	; (8006888 <__errno+0x8>)
 8006882:	6818      	ldr	r0, [r3, #0]
 8006884:	4770      	bx	lr
 8006886:	bf00      	nop
 8006888:	20000228 	.word	0x20000228

0800688c <__libc_init_array>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	2600      	movs	r6, #0
 8006890:	4d0c      	ldr	r5, [pc, #48]	; (80068c4 <__libc_init_array+0x38>)
 8006892:	4c0d      	ldr	r4, [pc, #52]	; (80068c8 <__libc_init_array+0x3c>)
 8006894:	1b64      	subs	r4, r4, r5
 8006896:	10a4      	asrs	r4, r4, #2
 8006898:	42a6      	cmp	r6, r4
 800689a:	d109      	bne.n	80068b0 <__libc_init_array+0x24>
 800689c:	f001 f984 	bl	8007ba8 <_init>
 80068a0:	2600      	movs	r6, #0
 80068a2:	4d0a      	ldr	r5, [pc, #40]	; (80068cc <__libc_init_array+0x40>)
 80068a4:	4c0a      	ldr	r4, [pc, #40]	; (80068d0 <__libc_init_array+0x44>)
 80068a6:	1b64      	subs	r4, r4, r5
 80068a8:	10a4      	asrs	r4, r4, #2
 80068aa:	42a6      	cmp	r6, r4
 80068ac:	d105      	bne.n	80068ba <__libc_init_array+0x2e>
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
 80068b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80068b4:	4798      	blx	r3
 80068b6:	3601      	adds	r6, #1
 80068b8:	e7ee      	b.n	8006898 <__libc_init_array+0xc>
 80068ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80068be:	4798      	blx	r3
 80068c0:	3601      	adds	r6, #1
 80068c2:	e7f2      	b.n	80068aa <__libc_init_array+0x1e>
 80068c4:	08007e6c 	.word	0x08007e6c
 80068c8:	08007e6c 	.word	0x08007e6c
 80068cc:	08007e6c 	.word	0x08007e6c
 80068d0:	08007e70 	.word	0x08007e70

080068d4 <memcpy>:
 80068d4:	440a      	add	r2, r1
 80068d6:	4291      	cmp	r1, r2
 80068d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80068dc:	d100      	bne.n	80068e0 <memcpy+0xc>
 80068de:	4770      	bx	lr
 80068e0:	b510      	push	{r4, lr}
 80068e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068e6:	4291      	cmp	r1, r2
 80068e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068ec:	d1f9      	bne.n	80068e2 <memcpy+0xe>
 80068ee:	bd10      	pop	{r4, pc}

080068f0 <memset>:
 80068f0:	4603      	mov	r3, r0
 80068f2:	4402      	add	r2, r0
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d100      	bne.n	80068fa <memset+0xa>
 80068f8:	4770      	bx	lr
 80068fa:	f803 1b01 	strb.w	r1, [r3], #1
 80068fe:	e7f9      	b.n	80068f4 <memset+0x4>

08006900 <sniprintf>:
 8006900:	b40c      	push	{r2, r3}
 8006902:	b530      	push	{r4, r5, lr}
 8006904:	4b17      	ldr	r3, [pc, #92]	; (8006964 <sniprintf+0x64>)
 8006906:	1e0c      	subs	r4, r1, #0
 8006908:	681d      	ldr	r5, [r3, #0]
 800690a:	b09d      	sub	sp, #116	; 0x74
 800690c:	da08      	bge.n	8006920 <sniprintf+0x20>
 800690e:	238b      	movs	r3, #139	; 0x8b
 8006910:	f04f 30ff 	mov.w	r0, #4294967295
 8006914:	602b      	str	r3, [r5, #0]
 8006916:	b01d      	add	sp, #116	; 0x74
 8006918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800691c:	b002      	add	sp, #8
 800691e:	4770      	bx	lr
 8006920:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006924:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006928:	bf0c      	ite	eq
 800692a:	4623      	moveq	r3, r4
 800692c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006930:	9304      	str	r3, [sp, #16]
 8006932:	9307      	str	r3, [sp, #28]
 8006934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006938:	9002      	str	r0, [sp, #8]
 800693a:	9006      	str	r0, [sp, #24]
 800693c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006940:	4628      	mov	r0, r5
 8006942:	ab21      	add	r3, sp, #132	; 0x84
 8006944:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006946:	a902      	add	r1, sp, #8
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	f000 f8b5 	bl	8006ab8 <_svfiprintf_r>
 800694e:	1c43      	adds	r3, r0, #1
 8006950:	bfbc      	itt	lt
 8006952:	238b      	movlt	r3, #139	; 0x8b
 8006954:	602b      	strlt	r3, [r5, #0]
 8006956:	2c00      	cmp	r4, #0
 8006958:	d0dd      	beq.n	8006916 <sniprintf+0x16>
 800695a:	2200      	movs	r2, #0
 800695c:	9b02      	ldr	r3, [sp, #8]
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	e7d9      	b.n	8006916 <sniprintf+0x16>
 8006962:	bf00      	nop
 8006964:	20000228 	.word	0x20000228

08006968 <siscanf>:
 8006968:	b40e      	push	{r1, r2, r3}
 800696a:	f44f 7201 	mov.w	r2, #516	; 0x204
 800696e:	b530      	push	{r4, r5, lr}
 8006970:	b09c      	sub	sp, #112	; 0x70
 8006972:	ac1f      	add	r4, sp, #124	; 0x7c
 8006974:	f854 5b04 	ldr.w	r5, [r4], #4
 8006978:	f8ad 2014 	strh.w	r2, [sp, #20]
 800697c:	9002      	str	r0, [sp, #8]
 800697e:	9006      	str	r0, [sp, #24]
 8006980:	f7f9 fbe4 	bl	800014c <strlen>
 8006984:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <siscanf+0x4c>)
 8006986:	9003      	str	r0, [sp, #12]
 8006988:	930b      	str	r3, [sp, #44]	; 0x2c
 800698a:	2300      	movs	r3, #0
 800698c:	930f      	str	r3, [sp, #60]	; 0x3c
 800698e:	9314      	str	r3, [sp, #80]	; 0x50
 8006990:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006994:	9007      	str	r0, [sp, #28]
 8006996:	4808      	ldr	r0, [pc, #32]	; (80069b8 <siscanf+0x50>)
 8006998:	f8ad 3016 	strh.w	r3, [sp, #22]
 800699c:	462a      	mov	r2, r5
 800699e:	4623      	mov	r3, r4
 80069a0:	a902      	add	r1, sp, #8
 80069a2:	6800      	ldr	r0, [r0, #0]
 80069a4:	9401      	str	r4, [sp, #4]
 80069a6:	f000 f9e1 	bl	8006d6c <__ssvfiscanf_r>
 80069aa:	b01c      	add	sp, #112	; 0x70
 80069ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069b0:	b003      	add	sp, #12
 80069b2:	4770      	bx	lr
 80069b4:	080069bd 	.word	0x080069bd
 80069b8:	20000228 	.word	0x20000228

080069bc <__seofread>:
 80069bc:	2000      	movs	r0, #0
 80069be:	4770      	bx	lr

080069c0 <_vsiprintf_r>:
 80069c0:	b500      	push	{lr}
 80069c2:	b09b      	sub	sp, #108	; 0x6c
 80069c4:	9100      	str	r1, [sp, #0]
 80069c6:	9104      	str	r1, [sp, #16]
 80069c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80069cc:	9105      	str	r1, [sp, #20]
 80069ce:	9102      	str	r1, [sp, #8]
 80069d0:	4905      	ldr	r1, [pc, #20]	; (80069e8 <_vsiprintf_r+0x28>)
 80069d2:	9103      	str	r1, [sp, #12]
 80069d4:	4669      	mov	r1, sp
 80069d6:	f000 f86f 	bl	8006ab8 <_svfiprintf_r>
 80069da:	2200      	movs	r2, #0
 80069dc:	9b00      	ldr	r3, [sp, #0]
 80069de:	701a      	strb	r2, [r3, #0]
 80069e0:	b01b      	add	sp, #108	; 0x6c
 80069e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80069e6:	bf00      	nop
 80069e8:	ffff0208 	.word	0xffff0208

080069ec <vsiprintf>:
 80069ec:	4613      	mov	r3, r2
 80069ee:	460a      	mov	r2, r1
 80069f0:	4601      	mov	r1, r0
 80069f2:	4802      	ldr	r0, [pc, #8]	; (80069fc <vsiprintf+0x10>)
 80069f4:	6800      	ldr	r0, [r0, #0]
 80069f6:	f7ff bfe3 	b.w	80069c0 <_vsiprintf_r>
 80069fa:	bf00      	nop
 80069fc:	20000228 	.word	0x20000228

08006a00 <__ssputs_r>:
 8006a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a04:	688e      	ldr	r6, [r1, #8]
 8006a06:	4682      	mov	sl, r0
 8006a08:	429e      	cmp	r6, r3
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	4690      	mov	r8, r2
 8006a0e:	461f      	mov	r7, r3
 8006a10:	d838      	bhi.n	8006a84 <__ssputs_r+0x84>
 8006a12:	898a      	ldrh	r2, [r1, #12]
 8006a14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a18:	d032      	beq.n	8006a80 <__ssputs_r+0x80>
 8006a1a:	6825      	ldr	r5, [r4, #0]
 8006a1c:	6909      	ldr	r1, [r1, #16]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	eba5 0901 	sub.w	r9, r5, r1
 8006a24:	6965      	ldr	r5, [r4, #20]
 8006a26:	444b      	add	r3, r9
 8006a28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a30:	106d      	asrs	r5, r5, #1
 8006a32:	429d      	cmp	r5, r3
 8006a34:	bf38      	it	cc
 8006a36:	461d      	movcc	r5, r3
 8006a38:	0553      	lsls	r3, r2, #21
 8006a3a:	d531      	bpl.n	8006aa0 <__ssputs_r+0xa0>
 8006a3c:	4629      	mov	r1, r5
 8006a3e:	f000 ffeb 	bl	8007a18 <_malloc_r>
 8006a42:	4606      	mov	r6, r0
 8006a44:	b950      	cbnz	r0, 8006a5c <__ssputs_r+0x5c>
 8006a46:	230c      	movs	r3, #12
 8006a48:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4c:	f8ca 3000 	str.w	r3, [sl]
 8006a50:	89a3      	ldrh	r3, [r4, #12]
 8006a52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a56:	81a3      	strh	r3, [r4, #12]
 8006a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a5c:	464a      	mov	r2, r9
 8006a5e:	6921      	ldr	r1, [r4, #16]
 8006a60:	f7ff ff38 	bl	80068d4 <memcpy>
 8006a64:	89a3      	ldrh	r3, [r4, #12]
 8006a66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a6e:	81a3      	strh	r3, [r4, #12]
 8006a70:	6126      	str	r6, [r4, #16]
 8006a72:	444e      	add	r6, r9
 8006a74:	6026      	str	r6, [r4, #0]
 8006a76:	463e      	mov	r6, r7
 8006a78:	6165      	str	r5, [r4, #20]
 8006a7a:	eba5 0509 	sub.w	r5, r5, r9
 8006a7e:	60a5      	str	r5, [r4, #8]
 8006a80:	42be      	cmp	r6, r7
 8006a82:	d900      	bls.n	8006a86 <__ssputs_r+0x86>
 8006a84:	463e      	mov	r6, r7
 8006a86:	4632      	mov	r2, r6
 8006a88:	4641      	mov	r1, r8
 8006a8a:	6820      	ldr	r0, [r4, #0]
 8006a8c:	f000 ff42 	bl	8007914 <memmove>
 8006a90:	68a3      	ldr	r3, [r4, #8]
 8006a92:	2000      	movs	r0, #0
 8006a94:	1b9b      	subs	r3, r3, r6
 8006a96:	60a3      	str	r3, [r4, #8]
 8006a98:	6823      	ldr	r3, [r4, #0]
 8006a9a:	4433      	add	r3, r6
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	e7db      	b.n	8006a58 <__ssputs_r+0x58>
 8006aa0:	462a      	mov	r2, r5
 8006aa2:	f001 f82d 	bl	8007b00 <_realloc_r>
 8006aa6:	4606      	mov	r6, r0
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	d1e1      	bne.n	8006a70 <__ssputs_r+0x70>
 8006aac:	4650      	mov	r0, sl
 8006aae:	6921      	ldr	r1, [r4, #16]
 8006ab0:	f000 ff4a 	bl	8007948 <_free_r>
 8006ab4:	e7c7      	b.n	8006a46 <__ssputs_r+0x46>
	...

08006ab8 <_svfiprintf_r>:
 8006ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006abc:	4698      	mov	r8, r3
 8006abe:	898b      	ldrh	r3, [r1, #12]
 8006ac0:	4607      	mov	r7, r0
 8006ac2:	061b      	lsls	r3, r3, #24
 8006ac4:	460d      	mov	r5, r1
 8006ac6:	4614      	mov	r4, r2
 8006ac8:	b09d      	sub	sp, #116	; 0x74
 8006aca:	d50e      	bpl.n	8006aea <_svfiprintf_r+0x32>
 8006acc:	690b      	ldr	r3, [r1, #16]
 8006ace:	b963      	cbnz	r3, 8006aea <_svfiprintf_r+0x32>
 8006ad0:	2140      	movs	r1, #64	; 0x40
 8006ad2:	f000 ffa1 	bl	8007a18 <_malloc_r>
 8006ad6:	6028      	str	r0, [r5, #0]
 8006ad8:	6128      	str	r0, [r5, #16]
 8006ada:	b920      	cbnz	r0, 8006ae6 <_svfiprintf_r+0x2e>
 8006adc:	230c      	movs	r3, #12
 8006ade:	603b      	str	r3, [r7, #0]
 8006ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae4:	e0d1      	b.n	8006c8a <_svfiprintf_r+0x1d2>
 8006ae6:	2340      	movs	r3, #64	; 0x40
 8006ae8:	616b      	str	r3, [r5, #20]
 8006aea:	2300      	movs	r3, #0
 8006aec:	9309      	str	r3, [sp, #36]	; 0x24
 8006aee:	2320      	movs	r3, #32
 8006af0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006af4:	2330      	movs	r3, #48	; 0x30
 8006af6:	f04f 0901 	mov.w	r9, #1
 8006afa:	f8cd 800c 	str.w	r8, [sp, #12]
 8006afe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006ca4 <_svfiprintf_r+0x1ec>
 8006b02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b06:	4623      	mov	r3, r4
 8006b08:	469a      	mov	sl, r3
 8006b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b0e:	b10a      	cbz	r2, 8006b14 <_svfiprintf_r+0x5c>
 8006b10:	2a25      	cmp	r2, #37	; 0x25
 8006b12:	d1f9      	bne.n	8006b08 <_svfiprintf_r+0x50>
 8006b14:	ebba 0b04 	subs.w	fp, sl, r4
 8006b18:	d00b      	beq.n	8006b32 <_svfiprintf_r+0x7a>
 8006b1a:	465b      	mov	r3, fp
 8006b1c:	4622      	mov	r2, r4
 8006b1e:	4629      	mov	r1, r5
 8006b20:	4638      	mov	r0, r7
 8006b22:	f7ff ff6d 	bl	8006a00 <__ssputs_r>
 8006b26:	3001      	adds	r0, #1
 8006b28:	f000 80aa 	beq.w	8006c80 <_svfiprintf_r+0x1c8>
 8006b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b2e:	445a      	add	r2, fp
 8006b30:	9209      	str	r2, [sp, #36]	; 0x24
 8006b32:	f89a 3000 	ldrb.w	r3, [sl]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 80a2 	beq.w	8006c80 <_svfiprintf_r+0x1c8>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b46:	f10a 0a01 	add.w	sl, sl, #1
 8006b4a:	9304      	str	r3, [sp, #16]
 8006b4c:	9307      	str	r3, [sp, #28]
 8006b4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b52:	931a      	str	r3, [sp, #104]	; 0x68
 8006b54:	4654      	mov	r4, sl
 8006b56:	2205      	movs	r2, #5
 8006b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b5c:	4851      	ldr	r0, [pc, #324]	; (8006ca4 <_svfiprintf_r+0x1ec>)
 8006b5e:	f000 fecb 	bl	80078f8 <memchr>
 8006b62:	9a04      	ldr	r2, [sp, #16]
 8006b64:	b9d8      	cbnz	r0, 8006b9e <_svfiprintf_r+0xe6>
 8006b66:	06d0      	lsls	r0, r2, #27
 8006b68:	bf44      	itt	mi
 8006b6a:	2320      	movmi	r3, #32
 8006b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b70:	0711      	lsls	r1, r2, #28
 8006b72:	bf44      	itt	mi
 8006b74:	232b      	movmi	r3, #43	; 0x2b
 8006b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8006b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b80:	d015      	beq.n	8006bae <_svfiprintf_r+0xf6>
 8006b82:	4654      	mov	r4, sl
 8006b84:	2000      	movs	r0, #0
 8006b86:	f04f 0c0a 	mov.w	ip, #10
 8006b8a:	9a07      	ldr	r2, [sp, #28]
 8006b8c:	4621      	mov	r1, r4
 8006b8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b92:	3b30      	subs	r3, #48	; 0x30
 8006b94:	2b09      	cmp	r3, #9
 8006b96:	d94e      	bls.n	8006c36 <_svfiprintf_r+0x17e>
 8006b98:	b1b0      	cbz	r0, 8006bc8 <_svfiprintf_r+0x110>
 8006b9a:	9207      	str	r2, [sp, #28]
 8006b9c:	e014      	b.n	8006bc8 <_svfiprintf_r+0x110>
 8006b9e:	eba0 0308 	sub.w	r3, r0, r8
 8006ba2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	46a2      	mov	sl, r4
 8006baa:	9304      	str	r3, [sp, #16]
 8006bac:	e7d2      	b.n	8006b54 <_svfiprintf_r+0x9c>
 8006bae:	9b03      	ldr	r3, [sp, #12]
 8006bb0:	1d19      	adds	r1, r3, #4
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	9103      	str	r1, [sp, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	bfbb      	ittet	lt
 8006bba:	425b      	neglt	r3, r3
 8006bbc:	f042 0202 	orrlt.w	r2, r2, #2
 8006bc0:	9307      	strge	r3, [sp, #28]
 8006bc2:	9307      	strlt	r3, [sp, #28]
 8006bc4:	bfb8      	it	lt
 8006bc6:	9204      	strlt	r2, [sp, #16]
 8006bc8:	7823      	ldrb	r3, [r4, #0]
 8006bca:	2b2e      	cmp	r3, #46	; 0x2e
 8006bcc:	d10c      	bne.n	8006be8 <_svfiprintf_r+0x130>
 8006bce:	7863      	ldrb	r3, [r4, #1]
 8006bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8006bd2:	d135      	bne.n	8006c40 <_svfiprintf_r+0x188>
 8006bd4:	9b03      	ldr	r3, [sp, #12]
 8006bd6:	3402      	adds	r4, #2
 8006bd8:	1d1a      	adds	r2, r3, #4
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	9203      	str	r2, [sp, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	bfb8      	it	lt
 8006be2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006be6:	9305      	str	r3, [sp, #20]
 8006be8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006ca8 <_svfiprintf_r+0x1f0>
 8006bec:	2203      	movs	r2, #3
 8006bee:	4650      	mov	r0, sl
 8006bf0:	7821      	ldrb	r1, [r4, #0]
 8006bf2:	f000 fe81 	bl	80078f8 <memchr>
 8006bf6:	b140      	cbz	r0, 8006c0a <_svfiprintf_r+0x152>
 8006bf8:	2340      	movs	r3, #64	; 0x40
 8006bfa:	eba0 000a 	sub.w	r0, r0, sl
 8006bfe:	fa03 f000 	lsl.w	r0, r3, r0
 8006c02:	9b04      	ldr	r3, [sp, #16]
 8006c04:	3401      	adds	r4, #1
 8006c06:	4303      	orrs	r3, r0
 8006c08:	9304      	str	r3, [sp, #16]
 8006c0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c0e:	2206      	movs	r2, #6
 8006c10:	4826      	ldr	r0, [pc, #152]	; (8006cac <_svfiprintf_r+0x1f4>)
 8006c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c16:	f000 fe6f 	bl	80078f8 <memchr>
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d038      	beq.n	8006c90 <_svfiprintf_r+0x1d8>
 8006c1e:	4b24      	ldr	r3, [pc, #144]	; (8006cb0 <_svfiprintf_r+0x1f8>)
 8006c20:	bb1b      	cbnz	r3, 8006c6a <_svfiprintf_r+0x1b2>
 8006c22:	9b03      	ldr	r3, [sp, #12]
 8006c24:	3307      	adds	r3, #7
 8006c26:	f023 0307 	bic.w	r3, r3, #7
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	9303      	str	r3, [sp, #12]
 8006c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c30:	4433      	add	r3, r6
 8006c32:	9309      	str	r3, [sp, #36]	; 0x24
 8006c34:	e767      	b.n	8006b06 <_svfiprintf_r+0x4e>
 8006c36:	460c      	mov	r4, r1
 8006c38:	2001      	movs	r0, #1
 8006c3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c3e:	e7a5      	b.n	8006b8c <_svfiprintf_r+0xd4>
 8006c40:	2300      	movs	r3, #0
 8006c42:	f04f 0c0a 	mov.w	ip, #10
 8006c46:	4619      	mov	r1, r3
 8006c48:	3401      	adds	r4, #1
 8006c4a:	9305      	str	r3, [sp, #20]
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c52:	3a30      	subs	r2, #48	; 0x30
 8006c54:	2a09      	cmp	r2, #9
 8006c56:	d903      	bls.n	8006c60 <_svfiprintf_r+0x1a8>
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d0c5      	beq.n	8006be8 <_svfiprintf_r+0x130>
 8006c5c:	9105      	str	r1, [sp, #20]
 8006c5e:	e7c3      	b.n	8006be8 <_svfiprintf_r+0x130>
 8006c60:	4604      	mov	r4, r0
 8006c62:	2301      	movs	r3, #1
 8006c64:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c68:	e7f0      	b.n	8006c4c <_svfiprintf_r+0x194>
 8006c6a:	ab03      	add	r3, sp, #12
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	462a      	mov	r2, r5
 8006c70:	4638      	mov	r0, r7
 8006c72:	4b10      	ldr	r3, [pc, #64]	; (8006cb4 <_svfiprintf_r+0x1fc>)
 8006c74:	a904      	add	r1, sp, #16
 8006c76:	f3af 8000 	nop.w
 8006c7a:	1c42      	adds	r2, r0, #1
 8006c7c:	4606      	mov	r6, r0
 8006c7e:	d1d6      	bne.n	8006c2e <_svfiprintf_r+0x176>
 8006c80:	89ab      	ldrh	r3, [r5, #12]
 8006c82:	065b      	lsls	r3, r3, #25
 8006c84:	f53f af2c 	bmi.w	8006ae0 <_svfiprintf_r+0x28>
 8006c88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c8a:	b01d      	add	sp, #116	; 0x74
 8006c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c90:	ab03      	add	r3, sp, #12
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	462a      	mov	r2, r5
 8006c96:	4638      	mov	r0, r7
 8006c98:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <_svfiprintf_r+0x1fc>)
 8006c9a:	a904      	add	r1, sp, #16
 8006c9c:	f000 fa50 	bl	8007140 <_printf_i>
 8006ca0:	e7eb      	b.n	8006c7a <_svfiprintf_r+0x1c2>
 8006ca2:	bf00      	nop
 8006ca4:	08007dbb 	.word	0x08007dbb
 8006ca8:	08007dc1 	.word	0x08007dc1
 8006cac:	08007dc5 	.word	0x08007dc5
 8006cb0:	00000000 	.word	0x00000000
 8006cb4:	08006a01 	.word	0x08006a01

08006cb8 <_sungetc_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	1c4b      	adds	r3, r1, #1
 8006cbc:	4614      	mov	r4, r2
 8006cbe:	d103      	bne.n	8006cc8 <_sungetc_r+0x10>
 8006cc0:	f04f 35ff 	mov.w	r5, #4294967295
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	8993      	ldrh	r3, [r2, #12]
 8006cca:	b2cd      	uxtb	r5, r1
 8006ccc:	f023 0320 	bic.w	r3, r3, #32
 8006cd0:	8193      	strh	r3, [r2, #12]
 8006cd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cd4:	6852      	ldr	r2, [r2, #4]
 8006cd6:	b18b      	cbz	r3, 8006cfc <_sungetc_r+0x44>
 8006cd8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	dd08      	ble.n	8006cf0 <_sungetc_r+0x38>
 8006cde:	6823      	ldr	r3, [r4, #0]
 8006ce0:	1e5a      	subs	r2, r3, #1
 8006ce2:	6022      	str	r2, [r4, #0]
 8006ce4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006ce8:	6863      	ldr	r3, [r4, #4]
 8006cea:	3301      	adds	r3, #1
 8006cec:	6063      	str	r3, [r4, #4]
 8006cee:	e7e9      	b.n	8006cc4 <_sungetc_r+0xc>
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	f000 fdc7 	bl	8007884 <__submore>
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d0f1      	beq.n	8006cde <_sungetc_r+0x26>
 8006cfa:	e7e1      	b.n	8006cc0 <_sungetc_r+0x8>
 8006cfc:	6921      	ldr	r1, [r4, #16]
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	b151      	cbz	r1, 8006d18 <_sungetc_r+0x60>
 8006d02:	4299      	cmp	r1, r3
 8006d04:	d208      	bcs.n	8006d18 <_sungetc_r+0x60>
 8006d06:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006d0a:	42a9      	cmp	r1, r5
 8006d0c:	d104      	bne.n	8006d18 <_sungetc_r+0x60>
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	3201      	adds	r2, #1
 8006d12:	6023      	str	r3, [r4, #0]
 8006d14:	6062      	str	r2, [r4, #4]
 8006d16:	e7d5      	b.n	8006cc4 <_sungetc_r+0xc>
 8006d18:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006d1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d20:	6363      	str	r3, [r4, #52]	; 0x34
 8006d22:	2303      	movs	r3, #3
 8006d24:	63a3      	str	r3, [r4, #56]	; 0x38
 8006d26:	4623      	mov	r3, r4
 8006d28:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e7dc      	b.n	8006cec <_sungetc_r+0x34>

08006d32 <__ssrefill_r>:
 8006d32:	b510      	push	{r4, lr}
 8006d34:	460c      	mov	r4, r1
 8006d36:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006d38:	b169      	cbz	r1, 8006d56 <__ssrefill_r+0x24>
 8006d3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d3e:	4299      	cmp	r1, r3
 8006d40:	d001      	beq.n	8006d46 <__ssrefill_r+0x14>
 8006d42:	f000 fe01 	bl	8007948 <_free_r>
 8006d46:	2000      	movs	r0, #0
 8006d48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d4a:	6360      	str	r0, [r4, #52]	; 0x34
 8006d4c:	6063      	str	r3, [r4, #4]
 8006d4e:	b113      	cbz	r3, 8006d56 <__ssrefill_r+0x24>
 8006d50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006d52:	6023      	str	r3, [r4, #0]
 8006d54:	bd10      	pop	{r4, pc}
 8006d56:	6923      	ldr	r3, [r4, #16]
 8006d58:	f04f 30ff 	mov.w	r0, #4294967295
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	6063      	str	r3, [r4, #4]
 8006d62:	89a3      	ldrh	r3, [r4, #12]
 8006d64:	f043 0320 	orr.w	r3, r3, #32
 8006d68:	81a3      	strh	r3, [r4, #12]
 8006d6a:	e7f3      	b.n	8006d54 <__ssrefill_r+0x22>

08006d6c <__ssvfiscanf_r>:
 8006d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d70:	460c      	mov	r4, r1
 8006d72:	2100      	movs	r1, #0
 8006d74:	4606      	mov	r6, r0
 8006d76:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006d7a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006d7e:	49a7      	ldr	r1, [pc, #668]	; (800701c <__ssvfiscanf_r+0x2b0>)
 8006d80:	f10d 0804 	add.w	r8, sp, #4
 8006d84:	91a0      	str	r1, [sp, #640]	; 0x280
 8006d86:	49a6      	ldr	r1, [pc, #664]	; (8007020 <__ssvfiscanf_r+0x2b4>)
 8006d88:	4fa6      	ldr	r7, [pc, #664]	; (8007024 <__ssvfiscanf_r+0x2b8>)
 8006d8a:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8007028 <__ssvfiscanf_r+0x2bc>
 8006d8e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8006d92:	91a1      	str	r1, [sp, #644]	; 0x284
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	7813      	ldrb	r3, [r2, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 815c 	beq.w	8007056 <__ssvfiscanf_r+0x2ea>
 8006d9e:	5dd9      	ldrb	r1, [r3, r7]
 8006da0:	1c55      	adds	r5, r2, #1
 8006da2:	f011 0108 	ands.w	r1, r1, #8
 8006da6:	d019      	beq.n	8006ddc <__ssvfiscanf_r+0x70>
 8006da8:	6863      	ldr	r3, [r4, #4]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	dd0f      	ble.n	8006dce <__ssvfiscanf_r+0x62>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	781a      	ldrb	r2, [r3, #0]
 8006db2:	5cba      	ldrb	r2, [r7, r2]
 8006db4:	0712      	lsls	r2, r2, #28
 8006db6:	d401      	bmi.n	8006dbc <__ssvfiscanf_r+0x50>
 8006db8:	462a      	mov	r2, r5
 8006dba:	e7ec      	b.n	8006d96 <__ssvfiscanf_r+0x2a>
 8006dbc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	3201      	adds	r2, #1
 8006dc2:	9245      	str	r2, [sp, #276]	; 0x114
 8006dc4:	6862      	ldr	r2, [r4, #4]
 8006dc6:	6023      	str	r3, [r4, #0]
 8006dc8:	3a01      	subs	r2, #1
 8006dca:	6062      	str	r2, [r4, #4]
 8006dcc:	e7ec      	b.n	8006da8 <__ssvfiscanf_r+0x3c>
 8006dce:	4621      	mov	r1, r4
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006dd4:	4798      	blx	r3
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d0e9      	beq.n	8006dae <__ssvfiscanf_r+0x42>
 8006dda:	e7ed      	b.n	8006db8 <__ssvfiscanf_r+0x4c>
 8006ddc:	2b25      	cmp	r3, #37	; 0x25
 8006dde:	d012      	beq.n	8006e06 <__ssvfiscanf_r+0x9a>
 8006de0:	469a      	mov	sl, r3
 8006de2:	6863      	ldr	r3, [r4, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f340 8094 	ble.w	8006f12 <__ssvfiscanf_r+0x1a6>
 8006dea:	6822      	ldr	r2, [r4, #0]
 8006dec:	7813      	ldrb	r3, [r2, #0]
 8006dee:	4553      	cmp	r3, sl
 8006df0:	f040 8131 	bne.w	8007056 <__ssvfiscanf_r+0x2ea>
 8006df4:	6863      	ldr	r3, [r4, #4]
 8006df6:	3201      	adds	r2, #1
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	6063      	str	r3, [r4, #4]
 8006dfc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006dfe:	6022      	str	r2, [r4, #0]
 8006e00:	3301      	adds	r3, #1
 8006e02:	9345      	str	r3, [sp, #276]	; 0x114
 8006e04:	e7d8      	b.n	8006db8 <__ssvfiscanf_r+0x4c>
 8006e06:	9141      	str	r1, [sp, #260]	; 0x104
 8006e08:	9143      	str	r1, [sp, #268]	; 0x10c
 8006e0a:	7853      	ldrb	r3, [r2, #1]
 8006e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e0e:	bf04      	itt	eq
 8006e10:	2310      	moveq	r3, #16
 8006e12:	1c95      	addeq	r5, r2, #2
 8006e14:	f04f 020a 	mov.w	r2, #10
 8006e18:	bf08      	it	eq
 8006e1a:	9341      	streq	r3, [sp, #260]	; 0x104
 8006e1c:	46aa      	mov	sl, r5
 8006e1e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006e22:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006e26:	2b09      	cmp	r3, #9
 8006e28:	d91d      	bls.n	8006e66 <__ssvfiscanf_r+0xfa>
 8006e2a:	2203      	movs	r2, #3
 8006e2c:	487e      	ldr	r0, [pc, #504]	; (8007028 <__ssvfiscanf_r+0x2bc>)
 8006e2e:	f000 fd63 	bl	80078f8 <memchr>
 8006e32:	b140      	cbz	r0, 8006e46 <__ssvfiscanf_r+0xda>
 8006e34:	2301      	movs	r3, #1
 8006e36:	4655      	mov	r5, sl
 8006e38:	eba0 0009 	sub.w	r0, r0, r9
 8006e3c:	fa03 f000 	lsl.w	r0, r3, r0
 8006e40:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006e42:	4318      	orrs	r0, r3
 8006e44:	9041      	str	r0, [sp, #260]	; 0x104
 8006e46:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006e4a:	2b78      	cmp	r3, #120	; 0x78
 8006e4c:	d806      	bhi.n	8006e5c <__ssvfiscanf_r+0xf0>
 8006e4e:	2b57      	cmp	r3, #87	; 0x57
 8006e50:	d810      	bhi.n	8006e74 <__ssvfiscanf_r+0x108>
 8006e52:	2b25      	cmp	r3, #37	; 0x25
 8006e54:	d0c4      	beq.n	8006de0 <__ssvfiscanf_r+0x74>
 8006e56:	d857      	bhi.n	8006f08 <__ssvfiscanf_r+0x19c>
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d065      	beq.n	8006f28 <__ssvfiscanf_r+0x1bc>
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	9347      	str	r3, [sp, #284]	; 0x11c
 8006e60:	230a      	movs	r3, #10
 8006e62:	9342      	str	r3, [sp, #264]	; 0x108
 8006e64:	e072      	b.n	8006f4c <__ssvfiscanf_r+0x1e0>
 8006e66:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006e68:	4655      	mov	r5, sl
 8006e6a:	fb02 1103 	mla	r1, r2, r3, r1
 8006e6e:	3930      	subs	r1, #48	; 0x30
 8006e70:	9143      	str	r1, [sp, #268]	; 0x10c
 8006e72:	e7d3      	b.n	8006e1c <__ssvfiscanf_r+0xb0>
 8006e74:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006e78:	2a20      	cmp	r2, #32
 8006e7a:	d8ef      	bhi.n	8006e5c <__ssvfiscanf_r+0xf0>
 8006e7c:	a101      	add	r1, pc, #4	; (adr r1, 8006e84 <__ssvfiscanf_r+0x118>)
 8006e7e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006f37 	.word	0x08006f37
 8006e88:	08006e5d 	.word	0x08006e5d
 8006e8c:	08006e5d 	.word	0x08006e5d
 8006e90:	08006f95 	.word	0x08006f95
 8006e94:	08006e5d 	.word	0x08006e5d
 8006e98:	08006e5d 	.word	0x08006e5d
 8006e9c:	08006e5d 	.word	0x08006e5d
 8006ea0:	08006e5d 	.word	0x08006e5d
 8006ea4:	08006e5d 	.word	0x08006e5d
 8006ea8:	08006e5d 	.word	0x08006e5d
 8006eac:	08006e5d 	.word	0x08006e5d
 8006eb0:	08006fab 	.word	0x08006fab
 8006eb4:	08006f81 	.word	0x08006f81
 8006eb8:	08006f0f 	.word	0x08006f0f
 8006ebc:	08006f0f 	.word	0x08006f0f
 8006ec0:	08006f0f 	.word	0x08006f0f
 8006ec4:	08006e5d 	.word	0x08006e5d
 8006ec8:	08006f85 	.word	0x08006f85
 8006ecc:	08006e5d 	.word	0x08006e5d
 8006ed0:	08006e5d 	.word	0x08006e5d
 8006ed4:	08006e5d 	.word	0x08006e5d
 8006ed8:	08006e5d 	.word	0x08006e5d
 8006edc:	08006fbb 	.word	0x08006fbb
 8006ee0:	08006f8d 	.word	0x08006f8d
 8006ee4:	08006f2f 	.word	0x08006f2f
 8006ee8:	08006e5d 	.word	0x08006e5d
 8006eec:	08006e5d 	.word	0x08006e5d
 8006ef0:	08006fb7 	.word	0x08006fb7
 8006ef4:	08006e5d 	.word	0x08006e5d
 8006ef8:	08006f81 	.word	0x08006f81
 8006efc:	08006e5d 	.word	0x08006e5d
 8006f00:	08006e5d 	.word	0x08006e5d
 8006f04:	08006f37 	.word	0x08006f37
 8006f08:	3b45      	subs	r3, #69	; 0x45
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d8a6      	bhi.n	8006e5c <__ssvfiscanf_r+0xf0>
 8006f0e:	2305      	movs	r3, #5
 8006f10:	e01b      	b.n	8006f4a <__ssvfiscanf_r+0x1de>
 8006f12:	4621      	mov	r1, r4
 8006f14:	4630      	mov	r0, r6
 8006f16:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006f18:	4798      	blx	r3
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	f43f af65 	beq.w	8006dea <__ssvfiscanf_r+0x7e>
 8006f20:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006f22:	2800      	cmp	r0, #0
 8006f24:	f040 808d 	bne.w	8007042 <__ssvfiscanf_r+0x2d6>
 8006f28:	f04f 30ff 	mov.w	r0, #4294967295
 8006f2c:	e08f      	b.n	800704e <__ssvfiscanf_r+0x2e2>
 8006f2e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006f30:	f042 0220 	orr.w	r2, r2, #32
 8006f34:	9241      	str	r2, [sp, #260]	; 0x104
 8006f36:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f3c:	9241      	str	r2, [sp, #260]	; 0x104
 8006f3e:	2210      	movs	r2, #16
 8006f40:	2b6f      	cmp	r3, #111	; 0x6f
 8006f42:	bf34      	ite	cc
 8006f44:	2303      	movcc	r3, #3
 8006f46:	2304      	movcs	r3, #4
 8006f48:	9242      	str	r2, [sp, #264]	; 0x108
 8006f4a:	9347      	str	r3, [sp, #284]	; 0x11c
 8006f4c:	6863      	ldr	r3, [r4, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	dd42      	ble.n	8006fd8 <__ssvfiscanf_r+0x26c>
 8006f52:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006f54:	0659      	lsls	r1, r3, #25
 8006f56:	d404      	bmi.n	8006f62 <__ssvfiscanf_r+0x1f6>
 8006f58:	6823      	ldr	r3, [r4, #0]
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	5cba      	ldrb	r2, [r7, r2]
 8006f5e:	0712      	lsls	r2, r2, #28
 8006f60:	d441      	bmi.n	8006fe6 <__ssvfiscanf_r+0x27a>
 8006f62:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006f64:	2b02      	cmp	r3, #2
 8006f66:	dc50      	bgt.n	800700a <__ssvfiscanf_r+0x29e>
 8006f68:	466b      	mov	r3, sp
 8006f6a:	4622      	mov	r2, r4
 8006f6c:	4630      	mov	r0, r6
 8006f6e:	a941      	add	r1, sp, #260	; 0x104
 8006f70:	f000 fa0c 	bl	800738c <_scanf_chars>
 8006f74:	2801      	cmp	r0, #1
 8006f76:	d06e      	beq.n	8007056 <__ssvfiscanf_r+0x2ea>
 8006f78:	2802      	cmp	r0, #2
 8006f7a:	f47f af1d 	bne.w	8006db8 <__ssvfiscanf_r+0x4c>
 8006f7e:	e7cf      	b.n	8006f20 <__ssvfiscanf_r+0x1b4>
 8006f80:	220a      	movs	r2, #10
 8006f82:	e7dd      	b.n	8006f40 <__ssvfiscanf_r+0x1d4>
 8006f84:	2300      	movs	r3, #0
 8006f86:	9342      	str	r3, [sp, #264]	; 0x108
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e7de      	b.n	8006f4a <__ssvfiscanf_r+0x1de>
 8006f8c:	2308      	movs	r3, #8
 8006f8e:	9342      	str	r3, [sp, #264]	; 0x108
 8006f90:	2304      	movs	r3, #4
 8006f92:	e7da      	b.n	8006f4a <__ssvfiscanf_r+0x1de>
 8006f94:	4629      	mov	r1, r5
 8006f96:	4640      	mov	r0, r8
 8006f98:	f000 fb4a 	bl	8007630 <__sccl>
 8006f9c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa4:	9341      	str	r3, [sp, #260]	; 0x104
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e7cf      	b.n	8006f4a <__ssvfiscanf_r+0x1de>
 8006faa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb0:	9341      	str	r3, [sp, #260]	; 0x104
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	e7c9      	b.n	8006f4a <__ssvfiscanf_r+0x1de>
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	e7c7      	b.n	8006f4a <__ssvfiscanf_r+0x1de>
 8006fba:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006fbc:	06c3      	lsls	r3, r0, #27
 8006fbe:	f53f aefb 	bmi.w	8006db8 <__ssvfiscanf_r+0x4c>
 8006fc2:	9b00      	ldr	r3, [sp, #0]
 8006fc4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006fc6:	1d19      	adds	r1, r3, #4
 8006fc8:	9100      	str	r1, [sp, #0]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f010 0f01 	tst.w	r0, #1
 8006fd0:	bf14      	ite	ne
 8006fd2:	801a      	strhne	r2, [r3, #0]
 8006fd4:	601a      	streq	r2, [r3, #0]
 8006fd6:	e6ef      	b.n	8006db8 <__ssvfiscanf_r+0x4c>
 8006fd8:	4621      	mov	r1, r4
 8006fda:	4630      	mov	r0, r6
 8006fdc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006fde:	4798      	blx	r3
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d0b6      	beq.n	8006f52 <__ssvfiscanf_r+0x1e6>
 8006fe4:	e79c      	b.n	8006f20 <__ssvfiscanf_r+0x1b4>
 8006fe6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006fe8:	3201      	adds	r2, #1
 8006fea:	9245      	str	r2, [sp, #276]	; 0x114
 8006fec:	6862      	ldr	r2, [r4, #4]
 8006fee:	3a01      	subs	r2, #1
 8006ff0:	2a00      	cmp	r2, #0
 8006ff2:	6062      	str	r2, [r4, #4]
 8006ff4:	dd02      	ble.n	8006ffc <__ssvfiscanf_r+0x290>
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	e7ad      	b.n	8006f58 <__ssvfiscanf_r+0x1ec>
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	4630      	mov	r0, r6
 8007000:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007002:	4798      	blx	r3
 8007004:	2800      	cmp	r0, #0
 8007006:	d0a7      	beq.n	8006f58 <__ssvfiscanf_r+0x1ec>
 8007008:	e78a      	b.n	8006f20 <__ssvfiscanf_r+0x1b4>
 800700a:	2b04      	cmp	r3, #4
 800700c:	dc0e      	bgt.n	800702c <__ssvfiscanf_r+0x2c0>
 800700e:	466b      	mov	r3, sp
 8007010:	4622      	mov	r2, r4
 8007012:	4630      	mov	r0, r6
 8007014:	a941      	add	r1, sp, #260	; 0x104
 8007016:	f000 fa13 	bl	8007440 <_scanf_i>
 800701a:	e7ab      	b.n	8006f74 <__ssvfiscanf_r+0x208>
 800701c:	08006cb9 	.word	0x08006cb9
 8007020:	08006d33 	.word	0x08006d33
 8007024:	08007cbb 	.word	0x08007cbb
 8007028:	08007dc1 	.word	0x08007dc1
 800702c:	4b0b      	ldr	r3, [pc, #44]	; (800705c <__ssvfiscanf_r+0x2f0>)
 800702e:	2b00      	cmp	r3, #0
 8007030:	f43f aec2 	beq.w	8006db8 <__ssvfiscanf_r+0x4c>
 8007034:	466b      	mov	r3, sp
 8007036:	4622      	mov	r2, r4
 8007038:	4630      	mov	r0, r6
 800703a:	a941      	add	r1, sp, #260	; 0x104
 800703c:	f3af 8000 	nop.w
 8007040:	e798      	b.n	8006f74 <__ssvfiscanf_r+0x208>
 8007042:	89a3      	ldrh	r3, [r4, #12]
 8007044:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007048:	bf18      	it	ne
 800704a:	f04f 30ff 	movne.w	r0, #4294967295
 800704e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8007052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007056:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007058:	e7f9      	b.n	800704e <__ssvfiscanf_r+0x2e2>
 800705a:	bf00      	nop
 800705c:	00000000 	.word	0x00000000

08007060 <_printf_common>:
 8007060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007064:	4616      	mov	r6, r2
 8007066:	4699      	mov	r9, r3
 8007068:	688a      	ldr	r2, [r1, #8]
 800706a:	690b      	ldr	r3, [r1, #16]
 800706c:	4607      	mov	r7, r0
 800706e:	4293      	cmp	r3, r2
 8007070:	bfb8      	it	lt
 8007072:	4613      	movlt	r3, r2
 8007074:	6033      	str	r3, [r6, #0]
 8007076:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800707a:	460c      	mov	r4, r1
 800707c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007080:	b10a      	cbz	r2, 8007086 <_printf_common+0x26>
 8007082:	3301      	adds	r3, #1
 8007084:	6033      	str	r3, [r6, #0]
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	0699      	lsls	r1, r3, #26
 800708a:	bf42      	ittt	mi
 800708c:	6833      	ldrmi	r3, [r6, #0]
 800708e:	3302      	addmi	r3, #2
 8007090:	6033      	strmi	r3, [r6, #0]
 8007092:	6825      	ldr	r5, [r4, #0]
 8007094:	f015 0506 	ands.w	r5, r5, #6
 8007098:	d106      	bne.n	80070a8 <_printf_common+0x48>
 800709a:	f104 0a19 	add.w	sl, r4, #25
 800709e:	68e3      	ldr	r3, [r4, #12]
 80070a0:	6832      	ldr	r2, [r6, #0]
 80070a2:	1a9b      	subs	r3, r3, r2
 80070a4:	42ab      	cmp	r3, r5
 80070a6:	dc28      	bgt.n	80070fa <_printf_common+0x9a>
 80070a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070ac:	1e13      	subs	r3, r2, #0
 80070ae:	6822      	ldr	r2, [r4, #0]
 80070b0:	bf18      	it	ne
 80070b2:	2301      	movne	r3, #1
 80070b4:	0692      	lsls	r2, r2, #26
 80070b6:	d42d      	bmi.n	8007114 <_printf_common+0xb4>
 80070b8:	4649      	mov	r1, r9
 80070ba:	4638      	mov	r0, r7
 80070bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070c0:	47c0      	blx	r8
 80070c2:	3001      	adds	r0, #1
 80070c4:	d020      	beq.n	8007108 <_printf_common+0xa8>
 80070c6:	6823      	ldr	r3, [r4, #0]
 80070c8:	68e5      	ldr	r5, [r4, #12]
 80070ca:	f003 0306 	and.w	r3, r3, #6
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	bf18      	it	ne
 80070d2:	2500      	movne	r5, #0
 80070d4:	6832      	ldr	r2, [r6, #0]
 80070d6:	f04f 0600 	mov.w	r6, #0
 80070da:	68a3      	ldr	r3, [r4, #8]
 80070dc:	bf08      	it	eq
 80070de:	1aad      	subeq	r5, r5, r2
 80070e0:	6922      	ldr	r2, [r4, #16]
 80070e2:	bf08      	it	eq
 80070e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070e8:	4293      	cmp	r3, r2
 80070ea:	bfc4      	itt	gt
 80070ec:	1a9b      	subgt	r3, r3, r2
 80070ee:	18ed      	addgt	r5, r5, r3
 80070f0:	341a      	adds	r4, #26
 80070f2:	42b5      	cmp	r5, r6
 80070f4:	d11a      	bne.n	800712c <_printf_common+0xcc>
 80070f6:	2000      	movs	r0, #0
 80070f8:	e008      	b.n	800710c <_printf_common+0xac>
 80070fa:	2301      	movs	r3, #1
 80070fc:	4652      	mov	r2, sl
 80070fe:	4649      	mov	r1, r9
 8007100:	4638      	mov	r0, r7
 8007102:	47c0      	blx	r8
 8007104:	3001      	adds	r0, #1
 8007106:	d103      	bne.n	8007110 <_printf_common+0xb0>
 8007108:	f04f 30ff 	mov.w	r0, #4294967295
 800710c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007110:	3501      	adds	r5, #1
 8007112:	e7c4      	b.n	800709e <_printf_common+0x3e>
 8007114:	2030      	movs	r0, #48	; 0x30
 8007116:	18e1      	adds	r1, r4, r3
 8007118:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007122:	4422      	add	r2, r4
 8007124:	3302      	adds	r3, #2
 8007126:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800712a:	e7c5      	b.n	80070b8 <_printf_common+0x58>
 800712c:	2301      	movs	r3, #1
 800712e:	4622      	mov	r2, r4
 8007130:	4649      	mov	r1, r9
 8007132:	4638      	mov	r0, r7
 8007134:	47c0      	blx	r8
 8007136:	3001      	adds	r0, #1
 8007138:	d0e6      	beq.n	8007108 <_printf_common+0xa8>
 800713a:	3601      	adds	r6, #1
 800713c:	e7d9      	b.n	80070f2 <_printf_common+0x92>
	...

08007140 <_printf_i>:
 8007140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007144:	7e0f      	ldrb	r7, [r1, #24]
 8007146:	4691      	mov	r9, r2
 8007148:	2f78      	cmp	r7, #120	; 0x78
 800714a:	4680      	mov	r8, r0
 800714c:	460c      	mov	r4, r1
 800714e:	469a      	mov	sl, r3
 8007150:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007152:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007156:	d807      	bhi.n	8007168 <_printf_i+0x28>
 8007158:	2f62      	cmp	r7, #98	; 0x62
 800715a:	d80a      	bhi.n	8007172 <_printf_i+0x32>
 800715c:	2f00      	cmp	r7, #0
 800715e:	f000 80d9 	beq.w	8007314 <_printf_i+0x1d4>
 8007162:	2f58      	cmp	r7, #88	; 0x58
 8007164:	f000 80a4 	beq.w	80072b0 <_printf_i+0x170>
 8007168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800716c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007170:	e03a      	b.n	80071e8 <_printf_i+0xa8>
 8007172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007176:	2b15      	cmp	r3, #21
 8007178:	d8f6      	bhi.n	8007168 <_printf_i+0x28>
 800717a:	a101      	add	r1, pc, #4	; (adr r1, 8007180 <_printf_i+0x40>)
 800717c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007180:	080071d9 	.word	0x080071d9
 8007184:	080071ed 	.word	0x080071ed
 8007188:	08007169 	.word	0x08007169
 800718c:	08007169 	.word	0x08007169
 8007190:	08007169 	.word	0x08007169
 8007194:	08007169 	.word	0x08007169
 8007198:	080071ed 	.word	0x080071ed
 800719c:	08007169 	.word	0x08007169
 80071a0:	08007169 	.word	0x08007169
 80071a4:	08007169 	.word	0x08007169
 80071a8:	08007169 	.word	0x08007169
 80071ac:	080072fb 	.word	0x080072fb
 80071b0:	0800721d 	.word	0x0800721d
 80071b4:	080072dd 	.word	0x080072dd
 80071b8:	08007169 	.word	0x08007169
 80071bc:	08007169 	.word	0x08007169
 80071c0:	0800731d 	.word	0x0800731d
 80071c4:	08007169 	.word	0x08007169
 80071c8:	0800721d 	.word	0x0800721d
 80071cc:	08007169 	.word	0x08007169
 80071d0:	08007169 	.word	0x08007169
 80071d4:	080072e5 	.word	0x080072e5
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	1d1a      	adds	r2, r3, #4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	602a      	str	r2, [r5, #0]
 80071e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0a4      	b.n	8007336 <_printf_i+0x1f6>
 80071ec:	6820      	ldr	r0, [r4, #0]
 80071ee:	6829      	ldr	r1, [r5, #0]
 80071f0:	0606      	lsls	r6, r0, #24
 80071f2:	f101 0304 	add.w	r3, r1, #4
 80071f6:	d50a      	bpl.n	800720e <_printf_i+0xce>
 80071f8:	680e      	ldr	r6, [r1, #0]
 80071fa:	602b      	str	r3, [r5, #0]
 80071fc:	2e00      	cmp	r6, #0
 80071fe:	da03      	bge.n	8007208 <_printf_i+0xc8>
 8007200:	232d      	movs	r3, #45	; 0x2d
 8007202:	4276      	negs	r6, r6
 8007204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007208:	230a      	movs	r3, #10
 800720a:	485e      	ldr	r0, [pc, #376]	; (8007384 <_printf_i+0x244>)
 800720c:	e019      	b.n	8007242 <_printf_i+0x102>
 800720e:	680e      	ldr	r6, [r1, #0]
 8007210:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007214:	602b      	str	r3, [r5, #0]
 8007216:	bf18      	it	ne
 8007218:	b236      	sxthne	r6, r6
 800721a:	e7ef      	b.n	80071fc <_printf_i+0xbc>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	6820      	ldr	r0, [r4, #0]
 8007220:	1d19      	adds	r1, r3, #4
 8007222:	6029      	str	r1, [r5, #0]
 8007224:	0601      	lsls	r1, r0, #24
 8007226:	d501      	bpl.n	800722c <_printf_i+0xec>
 8007228:	681e      	ldr	r6, [r3, #0]
 800722a:	e002      	b.n	8007232 <_printf_i+0xf2>
 800722c:	0646      	lsls	r6, r0, #25
 800722e:	d5fb      	bpl.n	8007228 <_printf_i+0xe8>
 8007230:	881e      	ldrh	r6, [r3, #0]
 8007232:	2f6f      	cmp	r7, #111	; 0x6f
 8007234:	bf0c      	ite	eq
 8007236:	2308      	moveq	r3, #8
 8007238:	230a      	movne	r3, #10
 800723a:	4852      	ldr	r0, [pc, #328]	; (8007384 <_printf_i+0x244>)
 800723c:	2100      	movs	r1, #0
 800723e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007242:	6865      	ldr	r5, [r4, #4]
 8007244:	2d00      	cmp	r5, #0
 8007246:	bfa8      	it	ge
 8007248:	6821      	ldrge	r1, [r4, #0]
 800724a:	60a5      	str	r5, [r4, #8]
 800724c:	bfa4      	itt	ge
 800724e:	f021 0104 	bicge.w	r1, r1, #4
 8007252:	6021      	strge	r1, [r4, #0]
 8007254:	b90e      	cbnz	r6, 800725a <_printf_i+0x11a>
 8007256:	2d00      	cmp	r5, #0
 8007258:	d04d      	beq.n	80072f6 <_printf_i+0x1b6>
 800725a:	4615      	mov	r5, r2
 800725c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007260:	fb03 6711 	mls	r7, r3, r1, r6
 8007264:	5dc7      	ldrb	r7, [r0, r7]
 8007266:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800726a:	4637      	mov	r7, r6
 800726c:	42bb      	cmp	r3, r7
 800726e:	460e      	mov	r6, r1
 8007270:	d9f4      	bls.n	800725c <_printf_i+0x11c>
 8007272:	2b08      	cmp	r3, #8
 8007274:	d10b      	bne.n	800728e <_printf_i+0x14e>
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	07de      	lsls	r6, r3, #31
 800727a:	d508      	bpl.n	800728e <_printf_i+0x14e>
 800727c:	6923      	ldr	r3, [r4, #16]
 800727e:	6861      	ldr	r1, [r4, #4]
 8007280:	4299      	cmp	r1, r3
 8007282:	bfde      	ittt	le
 8007284:	2330      	movle	r3, #48	; 0x30
 8007286:	f805 3c01 	strble.w	r3, [r5, #-1]
 800728a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800728e:	1b52      	subs	r2, r2, r5
 8007290:	6122      	str	r2, [r4, #16]
 8007292:	464b      	mov	r3, r9
 8007294:	4621      	mov	r1, r4
 8007296:	4640      	mov	r0, r8
 8007298:	f8cd a000 	str.w	sl, [sp]
 800729c:	aa03      	add	r2, sp, #12
 800729e:	f7ff fedf 	bl	8007060 <_printf_common>
 80072a2:	3001      	adds	r0, #1
 80072a4:	d14c      	bne.n	8007340 <_printf_i+0x200>
 80072a6:	f04f 30ff 	mov.w	r0, #4294967295
 80072aa:	b004      	add	sp, #16
 80072ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b0:	4834      	ldr	r0, [pc, #208]	; (8007384 <_printf_i+0x244>)
 80072b2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80072b6:	6829      	ldr	r1, [r5, #0]
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80072be:	6029      	str	r1, [r5, #0]
 80072c0:	061d      	lsls	r5, r3, #24
 80072c2:	d514      	bpl.n	80072ee <_printf_i+0x1ae>
 80072c4:	07df      	lsls	r7, r3, #31
 80072c6:	bf44      	itt	mi
 80072c8:	f043 0320 	orrmi.w	r3, r3, #32
 80072cc:	6023      	strmi	r3, [r4, #0]
 80072ce:	b91e      	cbnz	r6, 80072d8 <_printf_i+0x198>
 80072d0:	6823      	ldr	r3, [r4, #0]
 80072d2:	f023 0320 	bic.w	r3, r3, #32
 80072d6:	6023      	str	r3, [r4, #0]
 80072d8:	2310      	movs	r3, #16
 80072da:	e7af      	b.n	800723c <_printf_i+0xfc>
 80072dc:	6823      	ldr	r3, [r4, #0]
 80072de:	f043 0320 	orr.w	r3, r3, #32
 80072e2:	6023      	str	r3, [r4, #0]
 80072e4:	2378      	movs	r3, #120	; 0x78
 80072e6:	4828      	ldr	r0, [pc, #160]	; (8007388 <_printf_i+0x248>)
 80072e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072ec:	e7e3      	b.n	80072b6 <_printf_i+0x176>
 80072ee:	0659      	lsls	r1, r3, #25
 80072f0:	bf48      	it	mi
 80072f2:	b2b6      	uxthmi	r6, r6
 80072f4:	e7e6      	b.n	80072c4 <_printf_i+0x184>
 80072f6:	4615      	mov	r5, r2
 80072f8:	e7bb      	b.n	8007272 <_printf_i+0x132>
 80072fa:	682b      	ldr	r3, [r5, #0]
 80072fc:	6826      	ldr	r6, [r4, #0]
 80072fe:	1d18      	adds	r0, r3, #4
 8007300:	6961      	ldr	r1, [r4, #20]
 8007302:	6028      	str	r0, [r5, #0]
 8007304:	0635      	lsls	r5, r6, #24
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	d501      	bpl.n	800730e <_printf_i+0x1ce>
 800730a:	6019      	str	r1, [r3, #0]
 800730c:	e002      	b.n	8007314 <_printf_i+0x1d4>
 800730e:	0670      	lsls	r0, r6, #25
 8007310:	d5fb      	bpl.n	800730a <_printf_i+0x1ca>
 8007312:	8019      	strh	r1, [r3, #0]
 8007314:	2300      	movs	r3, #0
 8007316:	4615      	mov	r5, r2
 8007318:	6123      	str	r3, [r4, #16]
 800731a:	e7ba      	b.n	8007292 <_printf_i+0x152>
 800731c:	682b      	ldr	r3, [r5, #0]
 800731e:	2100      	movs	r1, #0
 8007320:	1d1a      	adds	r2, r3, #4
 8007322:	602a      	str	r2, [r5, #0]
 8007324:	681d      	ldr	r5, [r3, #0]
 8007326:	6862      	ldr	r2, [r4, #4]
 8007328:	4628      	mov	r0, r5
 800732a:	f000 fae5 	bl	80078f8 <memchr>
 800732e:	b108      	cbz	r0, 8007334 <_printf_i+0x1f4>
 8007330:	1b40      	subs	r0, r0, r5
 8007332:	6060      	str	r0, [r4, #4]
 8007334:	6863      	ldr	r3, [r4, #4]
 8007336:	6123      	str	r3, [r4, #16]
 8007338:	2300      	movs	r3, #0
 800733a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800733e:	e7a8      	b.n	8007292 <_printf_i+0x152>
 8007340:	462a      	mov	r2, r5
 8007342:	4649      	mov	r1, r9
 8007344:	4640      	mov	r0, r8
 8007346:	6923      	ldr	r3, [r4, #16]
 8007348:	47d0      	blx	sl
 800734a:	3001      	adds	r0, #1
 800734c:	d0ab      	beq.n	80072a6 <_printf_i+0x166>
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	079b      	lsls	r3, r3, #30
 8007352:	d413      	bmi.n	800737c <_printf_i+0x23c>
 8007354:	68e0      	ldr	r0, [r4, #12]
 8007356:	9b03      	ldr	r3, [sp, #12]
 8007358:	4298      	cmp	r0, r3
 800735a:	bfb8      	it	lt
 800735c:	4618      	movlt	r0, r3
 800735e:	e7a4      	b.n	80072aa <_printf_i+0x16a>
 8007360:	2301      	movs	r3, #1
 8007362:	4632      	mov	r2, r6
 8007364:	4649      	mov	r1, r9
 8007366:	4640      	mov	r0, r8
 8007368:	47d0      	blx	sl
 800736a:	3001      	adds	r0, #1
 800736c:	d09b      	beq.n	80072a6 <_printf_i+0x166>
 800736e:	3501      	adds	r5, #1
 8007370:	68e3      	ldr	r3, [r4, #12]
 8007372:	9903      	ldr	r1, [sp, #12]
 8007374:	1a5b      	subs	r3, r3, r1
 8007376:	42ab      	cmp	r3, r5
 8007378:	dcf2      	bgt.n	8007360 <_printf_i+0x220>
 800737a:	e7eb      	b.n	8007354 <_printf_i+0x214>
 800737c:	2500      	movs	r5, #0
 800737e:	f104 0619 	add.w	r6, r4, #25
 8007382:	e7f5      	b.n	8007370 <_printf_i+0x230>
 8007384:	08007dcc 	.word	0x08007dcc
 8007388:	08007ddd 	.word	0x08007ddd

0800738c <_scanf_chars>:
 800738c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007390:	4615      	mov	r5, r2
 8007392:	688a      	ldr	r2, [r1, #8]
 8007394:	4680      	mov	r8, r0
 8007396:	460c      	mov	r4, r1
 8007398:	b932      	cbnz	r2, 80073a8 <_scanf_chars+0x1c>
 800739a:	698a      	ldr	r2, [r1, #24]
 800739c:	2a00      	cmp	r2, #0
 800739e:	bf0c      	ite	eq
 80073a0:	2201      	moveq	r2, #1
 80073a2:	f04f 32ff 	movne.w	r2, #4294967295
 80073a6:	608a      	str	r2, [r1, #8]
 80073a8:	2700      	movs	r7, #0
 80073aa:	6822      	ldr	r2, [r4, #0]
 80073ac:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800743c <_scanf_chars+0xb0>
 80073b0:	06d1      	lsls	r1, r2, #27
 80073b2:	bf5f      	itttt	pl
 80073b4:	681a      	ldrpl	r2, [r3, #0]
 80073b6:	1d11      	addpl	r1, r2, #4
 80073b8:	6019      	strpl	r1, [r3, #0]
 80073ba:	6816      	ldrpl	r6, [r2, #0]
 80073bc:	69a0      	ldr	r0, [r4, #24]
 80073be:	b188      	cbz	r0, 80073e4 <_scanf_chars+0x58>
 80073c0:	2801      	cmp	r0, #1
 80073c2:	d107      	bne.n	80073d4 <_scanf_chars+0x48>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	781a      	ldrb	r2, [r3, #0]
 80073c8:	6963      	ldr	r3, [r4, #20]
 80073ca:	5c9b      	ldrb	r3, [r3, r2]
 80073cc:	b953      	cbnz	r3, 80073e4 <_scanf_chars+0x58>
 80073ce:	2f00      	cmp	r7, #0
 80073d0:	d031      	beq.n	8007436 <_scanf_chars+0xaa>
 80073d2:	e022      	b.n	800741a <_scanf_chars+0x8e>
 80073d4:	2802      	cmp	r0, #2
 80073d6:	d120      	bne.n	800741a <_scanf_chars+0x8e>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	f813 3009 	ldrb.w	r3, [r3, r9]
 80073e0:	071b      	lsls	r3, r3, #28
 80073e2:	d41a      	bmi.n	800741a <_scanf_chars+0x8e>
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	3701      	adds	r7, #1
 80073e8:	06da      	lsls	r2, r3, #27
 80073ea:	bf5e      	ittt	pl
 80073ec:	682b      	ldrpl	r3, [r5, #0]
 80073ee:	781b      	ldrbpl	r3, [r3, #0]
 80073f0:	f806 3b01 	strbpl.w	r3, [r6], #1
 80073f4:	682a      	ldr	r2, [r5, #0]
 80073f6:	686b      	ldr	r3, [r5, #4]
 80073f8:	3201      	adds	r2, #1
 80073fa:	602a      	str	r2, [r5, #0]
 80073fc:	68a2      	ldr	r2, [r4, #8]
 80073fe:	3b01      	subs	r3, #1
 8007400:	3a01      	subs	r2, #1
 8007402:	606b      	str	r3, [r5, #4]
 8007404:	60a2      	str	r2, [r4, #8]
 8007406:	b142      	cbz	r2, 800741a <_scanf_chars+0x8e>
 8007408:	2b00      	cmp	r3, #0
 800740a:	dcd7      	bgt.n	80073bc <_scanf_chars+0x30>
 800740c:	4629      	mov	r1, r5
 800740e:	4640      	mov	r0, r8
 8007410:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007414:	4798      	blx	r3
 8007416:	2800      	cmp	r0, #0
 8007418:	d0d0      	beq.n	80073bc <_scanf_chars+0x30>
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	f013 0310 	ands.w	r3, r3, #16
 8007420:	d105      	bne.n	800742e <_scanf_chars+0xa2>
 8007422:	68e2      	ldr	r2, [r4, #12]
 8007424:	3201      	adds	r2, #1
 8007426:	60e2      	str	r2, [r4, #12]
 8007428:	69a2      	ldr	r2, [r4, #24]
 800742a:	b102      	cbz	r2, 800742e <_scanf_chars+0xa2>
 800742c:	7033      	strb	r3, [r6, #0]
 800742e:	2000      	movs	r0, #0
 8007430:	6923      	ldr	r3, [r4, #16]
 8007432:	443b      	add	r3, r7
 8007434:	6123      	str	r3, [r4, #16]
 8007436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800743a:	bf00      	nop
 800743c:	08007cbb 	.word	0x08007cbb

08007440 <_scanf_i>:
 8007440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007444:	460c      	mov	r4, r1
 8007446:	4698      	mov	r8, r3
 8007448:	4b75      	ldr	r3, [pc, #468]	; (8007620 <_scanf_i+0x1e0>)
 800744a:	b087      	sub	sp, #28
 800744c:	4682      	mov	sl, r0
 800744e:	4616      	mov	r6, r2
 8007450:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007454:	ab03      	add	r3, sp, #12
 8007456:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800745a:	4b72      	ldr	r3, [pc, #456]	; (8007624 <_scanf_i+0x1e4>)
 800745c:	69a1      	ldr	r1, [r4, #24]
 800745e:	4a72      	ldr	r2, [pc, #456]	; (8007628 <_scanf_i+0x1e8>)
 8007460:	4627      	mov	r7, r4
 8007462:	2903      	cmp	r1, #3
 8007464:	bf18      	it	ne
 8007466:	461a      	movne	r2, r3
 8007468:	68a3      	ldr	r3, [r4, #8]
 800746a:	9201      	str	r2, [sp, #4]
 800746c:	1e5a      	subs	r2, r3, #1
 800746e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007472:	bf81      	itttt	hi
 8007474:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007478:	eb03 0905 	addhi.w	r9, r3, r5
 800747c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007480:	60a3      	strhi	r3, [r4, #8]
 8007482:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007486:	bf98      	it	ls
 8007488:	f04f 0900 	movls.w	r9, #0
 800748c:	463d      	mov	r5, r7
 800748e:	f04f 0b00 	mov.w	fp, #0
 8007492:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8007496:	6023      	str	r3, [r4, #0]
 8007498:	6831      	ldr	r1, [r6, #0]
 800749a:	ab03      	add	r3, sp, #12
 800749c:	2202      	movs	r2, #2
 800749e:	7809      	ldrb	r1, [r1, #0]
 80074a0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80074a4:	f000 fa28 	bl	80078f8 <memchr>
 80074a8:	b328      	cbz	r0, 80074f6 <_scanf_i+0xb6>
 80074aa:	f1bb 0f01 	cmp.w	fp, #1
 80074ae:	d159      	bne.n	8007564 <_scanf_i+0x124>
 80074b0:	6862      	ldr	r2, [r4, #4]
 80074b2:	b92a      	cbnz	r2, 80074c0 <_scanf_i+0x80>
 80074b4:	2308      	movs	r3, #8
 80074b6:	6822      	ldr	r2, [r4, #0]
 80074b8:	6063      	str	r3, [r4, #4]
 80074ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074be:	6022      	str	r2, [r4, #0]
 80074c0:	6822      	ldr	r2, [r4, #0]
 80074c2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80074c6:	6022      	str	r2, [r4, #0]
 80074c8:	68a2      	ldr	r2, [r4, #8]
 80074ca:	1e51      	subs	r1, r2, #1
 80074cc:	60a1      	str	r1, [r4, #8]
 80074ce:	b192      	cbz	r2, 80074f6 <_scanf_i+0xb6>
 80074d0:	6832      	ldr	r2, [r6, #0]
 80074d2:	1c51      	adds	r1, r2, #1
 80074d4:	6031      	str	r1, [r6, #0]
 80074d6:	7812      	ldrb	r2, [r2, #0]
 80074d8:	f805 2b01 	strb.w	r2, [r5], #1
 80074dc:	6872      	ldr	r2, [r6, #4]
 80074de:	3a01      	subs	r2, #1
 80074e0:	2a00      	cmp	r2, #0
 80074e2:	6072      	str	r2, [r6, #4]
 80074e4:	dc07      	bgt.n	80074f6 <_scanf_i+0xb6>
 80074e6:	4631      	mov	r1, r6
 80074e8:	4650      	mov	r0, sl
 80074ea:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80074ee:	4790      	blx	r2
 80074f0:	2800      	cmp	r0, #0
 80074f2:	f040 8085 	bne.w	8007600 <_scanf_i+0x1c0>
 80074f6:	f10b 0b01 	add.w	fp, fp, #1
 80074fa:	f1bb 0f03 	cmp.w	fp, #3
 80074fe:	d1cb      	bne.n	8007498 <_scanf_i+0x58>
 8007500:	6863      	ldr	r3, [r4, #4]
 8007502:	b90b      	cbnz	r3, 8007508 <_scanf_i+0xc8>
 8007504:	230a      	movs	r3, #10
 8007506:	6063      	str	r3, [r4, #4]
 8007508:	6863      	ldr	r3, [r4, #4]
 800750a:	4948      	ldr	r1, [pc, #288]	; (800762c <_scanf_i+0x1ec>)
 800750c:	6960      	ldr	r0, [r4, #20]
 800750e:	1ac9      	subs	r1, r1, r3
 8007510:	f000 f88e 	bl	8007630 <__sccl>
 8007514:	f04f 0b00 	mov.w	fp, #0
 8007518:	68a3      	ldr	r3, [r4, #8]
 800751a:	6822      	ldr	r2, [r4, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d03d      	beq.n	800759c <_scanf_i+0x15c>
 8007520:	6831      	ldr	r1, [r6, #0]
 8007522:	6960      	ldr	r0, [r4, #20]
 8007524:	f891 c000 	ldrb.w	ip, [r1]
 8007528:	f810 000c 	ldrb.w	r0, [r0, ip]
 800752c:	2800      	cmp	r0, #0
 800752e:	d035      	beq.n	800759c <_scanf_i+0x15c>
 8007530:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007534:	d124      	bne.n	8007580 <_scanf_i+0x140>
 8007536:	0510      	lsls	r0, r2, #20
 8007538:	d522      	bpl.n	8007580 <_scanf_i+0x140>
 800753a:	f10b 0b01 	add.w	fp, fp, #1
 800753e:	f1b9 0f00 	cmp.w	r9, #0
 8007542:	d003      	beq.n	800754c <_scanf_i+0x10c>
 8007544:	3301      	adds	r3, #1
 8007546:	f109 39ff 	add.w	r9, r9, #4294967295
 800754a:	60a3      	str	r3, [r4, #8]
 800754c:	6873      	ldr	r3, [r6, #4]
 800754e:	3b01      	subs	r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	6073      	str	r3, [r6, #4]
 8007554:	dd1b      	ble.n	800758e <_scanf_i+0x14e>
 8007556:	6833      	ldr	r3, [r6, #0]
 8007558:	3301      	adds	r3, #1
 800755a:	6033      	str	r3, [r6, #0]
 800755c:	68a3      	ldr	r3, [r4, #8]
 800755e:	3b01      	subs	r3, #1
 8007560:	60a3      	str	r3, [r4, #8]
 8007562:	e7d9      	b.n	8007518 <_scanf_i+0xd8>
 8007564:	f1bb 0f02 	cmp.w	fp, #2
 8007568:	d1ae      	bne.n	80074c8 <_scanf_i+0x88>
 800756a:	6822      	ldr	r2, [r4, #0]
 800756c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007570:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007574:	d1bf      	bne.n	80074f6 <_scanf_i+0xb6>
 8007576:	2310      	movs	r3, #16
 8007578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800757c:	6063      	str	r3, [r4, #4]
 800757e:	e7a2      	b.n	80074c6 <_scanf_i+0x86>
 8007580:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007584:	6022      	str	r2, [r4, #0]
 8007586:	780b      	ldrb	r3, [r1, #0]
 8007588:	f805 3b01 	strb.w	r3, [r5], #1
 800758c:	e7de      	b.n	800754c <_scanf_i+0x10c>
 800758e:	4631      	mov	r1, r6
 8007590:	4650      	mov	r0, sl
 8007592:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007596:	4798      	blx	r3
 8007598:	2800      	cmp	r0, #0
 800759a:	d0df      	beq.n	800755c <_scanf_i+0x11c>
 800759c:	6823      	ldr	r3, [r4, #0]
 800759e:	05db      	lsls	r3, r3, #23
 80075a0:	d50d      	bpl.n	80075be <_scanf_i+0x17e>
 80075a2:	42bd      	cmp	r5, r7
 80075a4:	d909      	bls.n	80075ba <_scanf_i+0x17a>
 80075a6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80075aa:	4632      	mov	r2, r6
 80075ac:	4650      	mov	r0, sl
 80075ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075b2:	f105 39ff 	add.w	r9, r5, #4294967295
 80075b6:	4798      	blx	r3
 80075b8:	464d      	mov	r5, r9
 80075ba:	42bd      	cmp	r5, r7
 80075bc:	d02d      	beq.n	800761a <_scanf_i+0x1da>
 80075be:	6822      	ldr	r2, [r4, #0]
 80075c0:	f012 0210 	ands.w	r2, r2, #16
 80075c4:	d113      	bne.n	80075ee <_scanf_i+0x1ae>
 80075c6:	702a      	strb	r2, [r5, #0]
 80075c8:	4639      	mov	r1, r7
 80075ca:	6863      	ldr	r3, [r4, #4]
 80075cc:	4650      	mov	r0, sl
 80075ce:	9e01      	ldr	r6, [sp, #4]
 80075d0:	47b0      	blx	r6
 80075d2:	6821      	ldr	r1, [r4, #0]
 80075d4:	f8d8 3000 	ldr.w	r3, [r8]
 80075d8:	f011 0f20 	tst.w	r1, #32
 80075dc:	d013      	beq.n	8007606 <_scanf_i+0x1c6>
 80075de:	1d1a      	adds	r2, r3, #4
 80075e0:	f8c8 2000 	str.w	r2, [r8]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6018      	str	r0, [r3, #0]
 80075e8:	68e3      	ldr	r3, [r4, #12]
 80075ea:	3301      	adds	r3, #1
 80075ec:	60e3      	str	r3, [r4, #12]
 80075ee:	2000      	movs	r0, #0
 80075f0:	1bed      	subs	r5, r5, r7
 80075f2:	44ab      	add	fp, r5
 80075f4:	6925      	ldr	r5, [r4, #16]
 80075f6:	445d      	add	r5, fp
 80075f8:	6125      	str	r5, [r4, #16]
 80075fa:	b007      	add	sp, #28
 80075fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007600:	f04f 0b00 	mov.w	fp, #0
 8007604:	e7ca      	b.n	800759c <_scanf_i+0x15c>
 8007606:	1d1a      	adds	r2, r3, #4
 8007608:	f8c8 2000 	str.w	r2, [r8]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f011 0f01 	tst.w	r1, #1
 8007612:	bf14      	ite	ne
 8007614:	8018      	strhne	r0, [r3, #0]
 8007616:	6018      	streq	r0, [r3, #0]
 8007618:	e7e6      	b.n	80075e8 <_scanf_i+0x1a8>
 800761a:	2001      	movs	r0, #1
 800761c:	e7ed      	b.n	80075fa <_scanf_i+0x1ba>
 800761e:	bf00      	nop
 8007620:	08007c8c 	.word	0x08007c8c
 8007624:	08007881 	.word	0x08007881
 8007628:	08007799 	.word	0x08007799
 800762c:	08007e07 	.word	0x08007e07

08007630 <__sccl>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	780b      	ldrb	r3, [r1, #0]
 8007634:	4604      	mov	r4, r0
 8007636:	2b5e      	cmp	r3, #94	; 0x5e
 8007638:	bf13      	iteet	ne
 800763a:	2200      	movne	r2, #0
 800763c:	2201      	moveq	r2, #1
 800763e:	784b      	ldrbeq	r3, [r1, #1]
 8007640:	1c48      	addne	r0, r1, #1
 8007642:	bf08      	it	eq
 8007644:	1c88      	addeq	r0, r1, #2
 8007646:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800764a:	1e61      	subs	r1, r4, #1
 800764c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007650:	42a9      	cmp	r1, r5
 8007652:	d1fb      	bne.n	800764c <__sccl+0x1c>
 8007654:	b90b      	cbnz	r3, 800765a <__sccl+0x2a>
 8007656:	3801      	subs	r0, #1
 8007658:	bd70      	pop	{r4, r5, r6, pc}
 800765a:	f082 0201 	eor.w	r2, r2, #1
 800765e:	4605      	mov	r5, r0
 8007660:	54e2      	strb	r2, [r4, r3]
 8007662:	4628      	mov	r0, r5
 8007664:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007668:	292d      	cmp	r1, #45	; 0x2d
 800766a:	d006      	beq.n	800767a <__sccl+0x4a>
 800766c:	295d      	cmp	r1, #93	; 0x5d
 800766e:	d0f3      	beq.n	8007658 <__sccl+0x28>
 8007670:	b909      	cbnz	r1, 8007676 <__sccl+0x46>
 8007672:	4628      	mov	r0, r5
 8007674:	e7f0      	b.n	8007658 <__sccl+0x28>
 8007676:	460b      	mov	r3, r1
 8007678:	e7f1      	b.n	800765e <__sccl+0x2e>
 800767a:	786e      	ldrb	r6, [r5, #1]
 800767c:	2e5d      	cmp	r6, #93	; 0x5d
 800767e:	d0fa      	beq.n	8007676 <__sccl+0x46>
 8007680:	42b3      	cmp	r3, r6
 8007682:	dcf8      	bgt.n	8007676 <__sccl+0x46>
 8007684:	4619      	mov	r1, r3
 8007686:	3502      	adds	r5, #2
 8007688:	3101      	adds	r1, #1
 800768a:	428e      	cmp	r6, r1
 800768c:	5462      	strb	r2, [r4, r1]
 800768e:	dcfb      	bgt.n	8007688 <__sccl+0x58>
 8007690:	1af1      	subs	r1, r6, r3
 8007692:	3901      	subs	r1, #1
 8007694:	42b3      	cmp	r3, r6
 8007696:	bfa8      	it	ge
 8007698:	2100      	movge	r1, #0
 800769a:	1c58      	adds	r0, r3, #1
 800769c:	1843      	adds	r3, r0, r1
 800769e:	e7e0      	b.n	8007662 <__sccl+0x32>

080076a0 <_strtol_l.constprop.0>:
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076a6:	4680      	mov	r8, r0
 80076a8:	d001      	beq.n	80076ae <_strtol_l.constprop.0+0xe>
 80076aa:	2b24      	cmp	r3, #36	; 0x24
 80076ac:	d906      	bls.n	80076bc <_strtol_l.constprop.0+0x1c>
 80076ae:	f7ff f8e7 	bl	8006880 <__errno>
 80076b2:	2316      	movs	r3, #22
 80076b4:	6003      	str	r3, [r0, #0]
 80076b6:	2000      	movs	r0, #0
 80076b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076bc:	460d      	mov	r5, r1
 80076be:	4f35      	ldr	r7, [pc, #212]	; (8007794 <_strtol_l.constprop.0+0xf4>)
 80076c0:	4628      	mov	r0, r5
 80076c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80076c6:	5de6      	ldrb	r6, [r4, r7]
 80076c8:	f016 0608 	ands.w	r6, r6, #8
 80076cc:	d1f8      	bne.n	80076c0 <_strtol_l.constprop.0+0x20>
 80076ce:	2c2d      	cmp	r4, #45	; 0x2d
 80076d0:	d12f      	bne.n	8007732 <_strtol_l.constprop.0+0x92>
 80076d2:	2601      	movs	r6, #1
 80076d4:	782c      	ldrb	r4, [r5, #0]
 80076d6:	1c85      	adds	r5, r0, #2
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d057      	beq.n	800778c <_strtol_l.constprop.0+0xec>
 80076dc:	2b10      	cmp	r3, #16
 80076de:	d109      	bne.n	80076f4 <_strtol_l.constprop.0+0x54>
 80076e0:	2c30      	cmp	r4, #48	; 0x30
 80076e2:	d107      	bne.n	80076f4 <_strtol_l.constprop.0+0x54>
 80076e4:	7828      	ldrb	r0, [r5, #0]
 80076e6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80076ea:	2858      	cmp	r0, #88	; 0x58
 80076ec:	d149      	bne.n	8007782 <_strtol_l.constprop.0+0xe2>
 80076ee:	2310      	movs	r3, #16
 80076f0:	786c      	ldrb	r4, [r5, #1]
 80076f2:	3502      	adds	r5, #2
 80076f4:	2700      	movs	r7, #0
 80076f6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80076fa:	f10e 3eff 	add.w	lr, lr, #4294967295
 80076fe:	fbbe f9f3 	udiv	r9, lr, r3
 8007702:	4638      	mov	r0, r7
 8007704:	fb03 ea19 	mls	sl, r3, r9, lr
 8007708:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800770c:	f1bc 0f09 	cmp.w	ip, #9
 8007710:	d814      	bhi.n	800773c <_strtol_l.constprop.0+0x9c>
 8007712:	4664      	mov	r4, ip
 8007714:	42a3      	cmp	r3, r4
 8007716:	dd22      	ble.n	800775e <_strtol_l.constprop.0+0xbe>
 8007718:	2f00      	cmp	r7, #0
 800771a:	db1d      	blt.n	8007758 <_strtol_l.constprop.0+0xb8>
 800771c:	4581      	cmp	r9, r0
 800771e:	d31b      	bcc.n	8007758 <_strtol_l.constprop.0+0xb8>
 8007720:	d101      	bne.n	8007726 <_strtol_l.constprop.0+0x86>
 8007722:	45a2      	cmp	sl, r4
 8007724:	db18      	blt.n	8007758 <_strtol_l.constprop.0+0xb8>
 8007726:	2701      	movs	r7, #1
 8007728:	fb00 4003 	mla	r0, r0, r3, r4
 800772c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007730:	e7ea      	b.n	8007708 <_strtol_l.constprop.0+0x68>
 8007732:	2c2b      	cmp	r4, #43	; 0x2b
 8007734:	bf04      	itt	eq
 8007736:	782c      	ldrbeq	r4, [r5, #0]
 8007738:	1c85      	addeq	r5, r0, #2
 800773a:	e7cd      	b.n	80076d8 <_strtol_l.constprop.0+0x38>
 800773c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007740:	f1bc 0f19 	cmp.w	ip, #25
 8007744:	d801      	bhi.n	800774a <_strtol_l.constprop.0+0xaa>
 8007746:	3c37      	subs	r4, #55	; 0x37
 8007748:	e7e4      	b.n	8007714 <_strtol_l.constprop.0+0x74>
 800774a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800774e:	f1bc 0f19 	cmp.w	ip, #25
 8007752:	d804      	bhi.n	800775e <_strtol_l.constprop.0+0xbe>
 8007754:	3c57      	subs	r4, #87	; 0x57
 8007756:	e7dd      	b.n	8007714 <_strtol_l.constprop.0+0x74>
 8007758:	f04f 37ff 	mov.w	r7, #4294967295
 800775c:	e7e6      	b.n	800772c <_strtol_l.constprop.0+0x8c>
 800775e:	2f00      	cmp	r7, #0
 8007760:	da07      	bge.n	8007772 <_strtol_l.constprop.0+0xd2>
 8007762:	2322      	movs	r3, #34	; 0x22
 8007764:	4670      	mov	r0, lr
 8007766:	f8c8 3000 	str.w	r3, [r8]
 800776a:	2a00      	cmp	r2, #0
 800776c:	d0a4      	beq.n	80076b8 <_strtol_l.constprop.0+0x18>
 800776e:	1e69      	subs	r1, r5, #1
 8007770:	e005      	b.n	800777e <_strtol_l.constprop.0+0xde>
 8007772:	b106      	cbz	r6, 8007776 <_strtol_l.constprop.0+0xd6>
 8007774:	4240      	negs	r0, r0
 8007776:	2a00      	cmp	r2, #0
 8007778:	d09e      	beq.n	80076b8 <_strtol_l.constprop.0+0x18>
 800777a:	2f00      	cmp	r7, #0
 800777c:	d1f7      	bne.n	800776e <_strtol_l.constprop.0+0xce>
 800777e:	6011      	str	r1, [r2, #0]
 8007780:	e79a      	b.n	80076b8 <_strtol_l.constprop.0+0x18>
 8007782:	2430      	movs	r4, #48	; 0x30
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1b5      	bne.n	80076f4 <_strtol_l.constprop.0+0x54>
 8007788:	2308      	movs	r3, #8
 800778a:	e7b3      	b.n	80076f4 <_strtol_l.constprop.0+0x54>
 800778c:	2c30      	cmp	r4, #48	; 0x30
 800778e:	d0a9      	beq.n	80076e4 <_strtol_l.constprop.0+0x44>
 8007790:	230a      	movs	r3, #10
 8007792:	e7af      	b.n	80076f4 <_strtol_l.constprop.0+0x54>
 8007794:	08007cbb 	.word	0x08007cbb

08007798 <_strtol_r>:
 8007798:	f7ff bf82 	b.w	80076a0 <_strtol_l.constprop.0>

0800779c <_strtoul_l.constprop.0>:
 800779c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077a0:	4686      	mov	lr, r0
 80077a2:	460d      	mov	r5, r1
 80077a4:	4f35      	ldr	r7, [pc, #212]	; (800787c <_strtoul_l.constprop.0+0xe0>)
 80077a6:	4628      	mov	r0, r5
 80077a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80077ac:	5de6      	ldrb	r6, [r4, r7]
 80077ae:	f016 0608 	ands.w	r6, r6, #8
 80077b2:	d1f8      	bne.n	80077a6 <_strtoul_l.constprop.0+0xa>
 80077b4:	2c2d      	cmp	r4, #45	; 0x2d
 80077b6:	d12f      	bne.n	8007818 <_strtoul_l.constprop.0+0x7c>
 80077b8:	2601      	movs	r6, #1
 80077ba:	782c      	ldrb	r4, [r5, #0]
 80077bc:	1c85      	adds	r5, r0, #2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d057      	beq.n	8007872 <_strtoul_l.constprop.0+0xd6>
 80077c2:	2b10      	cmp	r3, #16
 80077c4:	d109      	bne.n	80077da <_strtoul_l.constprop.0+0x3e>
 80077c6:	2c30      	cmp	r4, #48	; 0x30
 80077c8:	d107      	bne.n	80077da <_strtoul_l.constprop.0+0x3e>
 80077ca:	7828      	ldrb	r0, [r5, #0]
 80077cc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80077d0:	2858      	cmp	r0, #88	; 0x58
 80077d2:	d149      	bne.n	8007868 <_strtoul_l.constprop.0+0xcc>
 80077d4:	2310      	movs	r3, #16
 80077d6:	786c      	ldrb	r4, [r5, #1]
 80077d8:	3502      	adds	r5, #2
 80077da:	f04f 38ff 	mov.w	r8, #4294967295
 80077de:	fbb8 f8f3 	udiv	r8, r8, r3
 80077e2:	2700      	movs	r7, #0
 80077e4:	fb03 f908 	mul.w	r9, r3, r8
 80077e8:	4638      	mov	r0, r7
 80077ea:	ea6f 0909 	mvn.w	r9, r9
 80077ee:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80077f2:	f1bc 0f09 	cmp.w	ip, #9
 80077f6:	d814      	bhi.n	8007822 <_strtoul_l.constprop.0+0x86>
 80077f8:	4664      	mov	r4, ip
 80077fa:	42a3      	cmp	r3, r4
 80077fc:	dd22      	ble.n	8007844 <_strtoul_l.constprop.0+0xa8>
 80077fe:	2f00      	cmp	r7, #0
 8007800:	db1d      	blt.n	800783e <_strtoul_l.constprop.0+0xa2>
 8007802:	4580      	cmp	r8, r0
 8007804:	d31b      	bcc.n	800783e <_strtoul_l.constprop.0+0xa2>
 8007806:	d101      	bne.n	800780c <_strtoul_l.constprop.0+0x70>
 8007808:	45a1      	cmp	r9, r4
 800780a:	db18      	blt.n	800783e <_strtoul_l.constprop.0+0xa2>
 800780c:	2701      	movs	r7, #1
 800780e:	fb00 4003 	mla	r0, r0, r3, r4
 8007812:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007816:	e7ea      	b.n	80077ee <_strtoul_l.constprop.0+0x52>
 8007818:	2c2b      	cmp	r4, #43	; 0x2b
 800781a:	bf04      	itt	eq
 800781c:	782c      	ldrbeq	r4, [r5, #0]
 800781e:	1c85      	addeq	r5, r0, #2
 8007820:	e7cd      	b.n	80077be <_strtoul_l.constprop.0+0x22>
 8007822:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007826:	f1bc 0f19 	cmp.w	ip, #25
 800782a:	d801      	bhi.n	8007830 <_strtoul_l.constprop.0+0x94>
 800782c:	3c37      	subs	r4, #55	; 0x37
 800782e:	e7e4      	b.n	80077fa <_strtoul_l.constprop.0+0x5e>
 8007830:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007834:	f1bc 0f19 	cmp.w	ip, #25
 8007838:	d804      	bhi.n	8007844 <_strtoul_l.constprop.0+0xa8>
 800783a:	3c57      	subs	r4, #87	; 0x57
 800783c:	e7dd      	b.n	80077fa <_strtoul_l.constprop.0+0x5e>
 800783e:	f04f 37ff 	mov.w	r7, #4294967295
 8007842:	e7e6      	b.n	8007812 <_strtoul_l.constprop.0+0x76>
 8007844:	2f00      	cmp	r7, #0
 8007846:	da07      	bge.n	8007858 <_strtoul_l.constprop.0+0xbc>
 8007848:	2322      	movs	r3, #34	; 0x22
 800784a:	f04f 30ff 	mov.w	r0, #4294967295
 800784e:	f8ce 3000 	str.w	r3, [lr]
 8007852:	b932      	cbnz	r2, 8007862 <_strtoul_l.constprop.0+0xc6>
 8007854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007858:	b106      	cbz	r6, 800785c <_strtoul_l.constprop.0+0xc0>
 800785a:	4240      	negs	r0, r0
 800785c:	2a00      	cmp	r2, #0
 800785e:	d0f9      	beq.n	8007854 <_strtoul_l.constprop.0+0xb8>
 8007860:	b107      	cbz	r7, 8007864 <_strtoul_l.constprop.0+0xc8>
 8007862:	1e69      	subs	r1, r5, #1
 8007864:	6011      	str	r1, [r2, #0]
 8007866:	e7f5      	b.n	8007854 <_strtoul_l.constprop.0+0xb8>
 8007868:	2430      	movs	r4, #48	; 0x30
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1b5      	bne.n	80077da <_strtoul_l.constprop.0+0x3e>
 800786e:	2308      	movs	r3, #8
 8007870:	e7b3      	b.n	80077da <_strtoul_l.constprop.0+0x3e>
 8007872:	2c30      	cmp	r4, #48	; 0x30
 8007874:	d0a9      	beq.n	80077ca <_strtoul_l.constprop.0+0x2e>
 8007876:	230a      	movs	r3, #10
 8007878:	e7af      	b.n	80077da <_strtoul_l.constprop.0+0x3e>
 800787a:	bf00      	nop
 800787c:	08007cbb 	.word	0x08007cbb

08007880 <_strtoul_r>:
 8007880:	f7ff bf8c 	b.w	800779c <_strtoul_l.constprop.0>

08007884 <__submore>:
 8007884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007888:	460c      	mov	r4, r1
 800788a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800788c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007890:	4299      	cmp	r1, r3
 8007892:	d11b      	bne.n	80078cc <__submore+0x48>
 8007894:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007898:	f000 f8be 	bl	8007a18 <_malloc_r>
 800789c:	b918      	cbnz	r0, 80078a6 <__submore+0x22>
 800789e:	f04f 30ff 	mov.w	r0, #4294967295
 80078a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078aa:	63a3      	str	r3, [r4, #56]	; 0x38
 80078ac:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80078b0:	6360      	str	r0, [r4, #52]	; 0x34
 80078b2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80078b6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80078ba:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80078be:	7043      	strb	r3, [r0, #1]
 80078c0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80078c4:	7003      	strb	r3, [r0, #0]
 80078c6:	6020      	str	r0, [r4, #0]
 80078c8:	2000      	movs	r0, #0
 80078ca:	e7ea      	b.n	80078a2 <__submore+0x1e>
 80078cc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80078ce:	0077      	lsls	r7, r6, #1
 80078d0:	463a      	mov	r2, r7
 80078d2:	f000 f915 	bl	8007b00 <_realloc_r>
 80078d6:	4605      	mov	r5, r0
 80078d8:	2800      	cmp	r0, #0
 80078da:	d0e0      	beq.n	800789e <__submore+0x1a>
 80078dc:	eb00 0806 	add.w	r8, r0, r6
 80078e0:	4601      	mov	r1, r0
 80078e2:	4632      	mov	r2, r6
 80078e4:	4640      	mov	r0, r8
 80078e6:	f7fe fff5 	bl	80068d4 <memcpy>
 80078ea:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80078ee:	f8c4 8000 	str.w	r8, [r4]
 80078f2:	e7e9      	b.n	80078c8 <__submore+0x44>

080078f4 <__retarget_lock_acquire_recursive>:
 80078f4:	4770      	bx	lr

080078f6 <__retarget_lock_release_recursive>:
 80078f6:	4770      	bx	lr

080078f8 <memchr>:
 80078f8:	4603      	mov	r3, r0
 80078fa:	b510      	push	{r4, lr}
 80078fc:	b2c9      	uxtb	r1, r1
 80078fe:	4402      	add	r2, r0
 8007900:	4293      	cmp	r3, r2
 8007902:	4618      	mov	r0, r3
 8007904:	d101      	bne.n	800790a <memchr+0x12>
 8007906:	2000      	movs	r0, #0
 8007908:	e003      	b.n	8007912 <memchr+0x1a>
 800790a:	7804      	ldrb	r4, [r0, #0]
 800790c:	3301      	adds	r3, #1
 800790e:	428c      	cmp	r4, r1
 8007910:	d1f6      	bne.n	8007900 <memchr+0x8>
 8007912:	bd10      	pop	{r4, pc}

08007914 <memmove>:
 8007914:	4288      	cmp	r0, r1
 8007916:	b510      	push	{r4, lr}
 8007918:	eb01 0402 	add.w	r4, r1, r2
 800791c:	d902      	bls.n	8007924 <memmove+0x10>
 800791e:	4284      	cmp	r4, r0
 8007920:	4623      	mov	r3, r4
 8007922:	d807      	bhi.n	8007934 <memmove+0x20>
 8007924:	1e43      	subs	r3, r0, #1
 8007926:	42a1      	cmp	r1, r4
 8007928:	d008      	beq.n	800793c <memmove+0x28>
 800792a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800792e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007932:	e7f8      	b.n	8007926 <memmove+0x12>
 8007934:	4601      	mov	r1, r0
 8007936:	4402      	add	r2, r0
 8007938:	428a      	cmp	r2, r1
 800793a:	d100      	bne.n	800793e <memmove+0x2a>
 800793c:	bd10      	pop	{r4, pc}
 800793e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007946:	e7f7      	b.n	8007938 <memmove+0x24>

08007948 <_free_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4605      	mov	r5, r0
 800794c:	2900      	cmp	r1, #0
 800794e:	d040      	beq.n	80079d2 <_free_r+0x8a>
 8007950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007954:	1f0c      	subs	r4, r1, #4
 8007956:	2b00      	cmp	r3, #0
 8007958:	bfb8      	it	lt
 800795a:	18e4      	addlt	r4, r4, r3
 800795c:	f000 f910 	bl	8007b80 <__malloc_lock>
 8007960:	4a1c      	ldr	r2, [pc, #112]	; (80079d4 <_free_r+0x8c>)
 8007962:	6813      	ldr	r3, [r2, #0]
 8007964:	b933      	cbnz	r3, 8007974 <_free_r+0x2c>
 8007966:	6063      	str	r3, [r4, #4]
 8007968:	6014      	str	r4, [r2, #0]
 800796a:	4628      	mov	r0, r5
 800796c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007970:	f000 b90c 	b.w	8007b8c <__malloc_unlock>
 8007974:	42a3      	cmp	r3, r4
 8007976:	d908      	bls.n	800798a <_free_r+0x42>
 8007978:	6820      	ldr	r0, [r4, #0]
 800797a:	1821      	adds	r1, r4, r0
 800797c:	428b      	cmp	r3, r1
 800797e:	bf01      	itttt	eq
 8007980:	6819      	ldreq	r1, [r3, #0]
 8007982:	685b      	ldreq	r3, [r3, #4]
 8007984:	1809      	addeq	r1, r1, r0
 8007986:	6021      	streq	r1, [r4, #0]
 8007988:	e7ed      	b.n	8007966 <_free_r+0x1e>
 800798a:	461a      	mov	r2, r3
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	b10b      	cbz	r3, 8007994 <_free_r+0x4c>
 8007990:	42a3      	cmp	r3, r4
 8007992:	d9fa      	bls.n	800798a <_free_r+0x42>
 8007994:	6811      	ldr	r1, [r2, #0]
 8007996:	1850      	adds	r0, r2, r1
 8007998:	42a0      	cmp	r0, r4
 800799a:	d10b      	bne.n	80079b4 <_free_r+0x6c>
 800799c:	6820      	ldr	r0, [r4, #0]
 800799e:	4401      	add	r1, r0
 80079a0:	1850      	adds	r0, r2, r1
 80079a2:	4283      	cmp	r3, r0
 80079a4:	6011      	str	r1, [r2, #0]
 80079a6:	d1e0      	bne.n	800796a <_free_r+0x22>
 80079a8:	6818      	ldr	r0, [r3, #0]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	4401      	add	r1, r0
 80079ae:	6011      	str	r1, [r2, #0]
 80079b0:	6053      	str	r3, [r2, #4]
 80079b2:	e7da      	b.n	800796a <_free_r+0x22>
 80079b4:	d902      	bls.n	80079bc <_free_r+0x74>
 80079b6:	230c      	movs	r3, #12
 80079b8:	602b      	str	r3, [r5, #0]
 80079ba:	e7d6      	b.n	800796a <_free_r+0x22>
 80079bc:	6820      	ldr	r0, [r4, #0]
 80079be:	1821      	adds	r1, r4, r0
 80079c0:	428b      	cmp	r3, r1
 80079c2:	bf01      	itttt	eq
 80079c4:	6819      	ldreq	r1, [r3, #0]
 80079c6:	685b      	ldreq	r3, [r3, #4]
 80079c8:	1809      	addeq	r1, r1, r0
 80079ca:	6021      	streq	r1, [r4, #0]
 80079cc:	6063      	str	r3, [r4, #4]
 80079ce:	6054      	str	r4, [r2, #4]
 80079d0:	e7cb      	b.n	800796a <_free_r+0x22>
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
 80079d4:	200019d8 	.word	0x200019d8

080079d8 <sbrk_aligned>:
 80079d8:	b570      	push	{r4, r5, r6, lr}
 80079da:	4e0e      	ldr	r6, [pc, #56]	; (8007a14 <sbrk_aligned+0x3c>)
 80079dc:	460c      	mov	r4, r1
 80079de:	6831      	ldr	r1, [r6, #0]
 80079e0:	4605      	mov	r5, r0
 80079e2:	b911      	cbnz	r1, 80079ea <sbrk_aligned+0x12>
 80079e4:	f000 f8bc 	bl	8007b60 <_sbrk_r>
 80079e8:	6030      	str	r0, [r6, #0]
 80079ea:	4621      	mov	r1, r4
 80079ec:	4628      	mov	r0, r5
 80079ee:	f000 f8b7 	bl	8007b60 <_sbrk_r>
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	d00a      	beq.n	8007a0c <sbrk_aligned+0x34>
 80079f6:	1cc4      	adds	r4, r0, #3
 80079f8:	f024 0403 	bic.w	r4, r4, #3
 80079fc:	42a0      	cmp	r0, r4
 80079fe:	d007      	beq.n	8007a10 <sbrk_aligned+0x38>
 8007a00:	1a21      	subs	r1, r4, r0
 8007a02:	4628      	mov	r0, r5
 8007a04:	f000 f8ac 	bl	8007b60 <_sbrk_r>
 8007a08:	3001      	adds	r0, #1
 8007a0a:	d101      	bne.n	8007a10 <sbrk_aligned+0x38>
 8007a0c:	f04f 34ff 	mov.w	r4, #4294967295
 8007a10:	4620      	mov	r0, r4
 8007a12:	bd70      	pop	{r4, r5, r6, pc}
 8007a14:	200019dc 	.word	0x200019dc

08007a18 <_malloc_r>:
 8007a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a1c:	1ccd      	adds	r5, r1, #3
 8007a1e:	f025 0503 	bic.w	r5, r5, #3
 8007a22:	3508      	adds	r5, #8
 8007a24:	2d0c      	cmp	r5, #12
 8007a26:	bf38      	it	cc
 8007a28:	250c      	movcc	r5, #12
 8007a2a:	2d00      	cmp	r5, #0
 8007a2c:	4607      	mov	r7, r0
 8007a2e:	db01      	blt.n	8007a34 <_malloc_r+0x1c>
 8007a30:	42a9      	cmp	r1, r5
 8007a32:	d905      	bls.n	8007a40 <_malloc_r+0x28>
 8007a34:	230c      	movs	r3, #12
 8007a36:	2600      	movs	r6, #0
 8007a38:	603b      	str	r3, [r7, #0]
 8007a3a:	4630      	mov	r0, r6
 8007a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a40:	4e2e      	ldr	r6, [pc, #184]	; (8007afc <_malloc_r+0xe4>)
 8007a42:	f000 f89d 	bl	8007b80 <__malloc_lock>
 8007a46:	6833      	ldr	r3, [r6, #0]
 8007a48:	461c      	mov	r4, r3
 8007a4a:	bb34      	cbnz	r4, 8007a9a <_malloc_r+0x82>
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	4638      	mov	r0, r7
 8007a50:	f7ff ffc2 	bl	80079d8 <sbrk_aligned>
 8007a54:	1c43      	adds	r3, r0, #1
 8007a56:	4604      	mov	r4, r0
 8007a58:	d14d      	bne.n	8007af6 <_malloc_r+0xde>
 8007a5a:	6834      	ldr	r4, [r6, #0]
 8007a5c:	4626      	mov	r6, r4
 8007a5e:	2e00      	cmp	r6, #0
 8007a60:	d140      	bne.n	8007ae4 <_malloc_r+0xcc>
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	4631      	mov	r1, r6
 8007a66:	4638      	mov	r0, r7
 8007a68:	eb04 0803 	add.w	r8, r4, r3
 8007a6c:	f000 f878 	bl	8007b60 <_sbrk_r>
 8007a70:	4580      	cmp	r8, r0
 8007a72:	d13a      	bne.n	8007aea <_malloc_r+0xd2>
 8007a74:	6821      	ldr	r1, [r4, #0]
 8007a76:	3503      	adds	r5, #3
 8007a78:	1a6d      	subs	r5, r5, r1
 8007a7a:	f025 0503 	bic.w	r5, r5, #3
 8007a7e:	3508      	adds	r5, #8
 8007a80:	2d0c      	cmp	r5, #12
 8007a82:	bf38      	it	cc
 8007a84:	250c      	movcc	r5, #12
 8007a86:	4638      	mov	r0, r7
 8007a88:	4629      	mov	r1, r5
 8007a8a:	f7ff ffa5 	bl	80079d8 <sbrk_aligned>
 8007a8e:	3001      	adds	r0, #1
 8007a90:	d02b      	beq.n	8007aea <_malloc_r+0xd2>
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	442b      	add	r3, r5
 8007a96:	6023      	str	r3, [r4, #0]
 8007a98:	e00e      	b.n	8007ab8 <_malloc_r+0xa0>
 8007a9a:	6822      	ldr	r2, [r4, #0]
 8007a9c:	1b52      	subs	r2, r2, r5
 8007a9e:	d41e      	bmi.n	8007ade <_malloc_r+0xc6>
 8007aa0:	2a0b      	cmp	r2, #11
 8007aa2:	d916      	bls.n	8007ad2 <_malloc_r+0xba>
 8007aa4:	1961      	adds	r1, r4, r5
 8007aa6:	42a3      	cmp	r3, r4
 8007aa8:	6025      	str	r5, [r4, #0]
 8007aaa:	bf18      	it	ne
 8007aac:	6059      	strne	r1, [r3, #4]
 8007aae:	6863      	ldr	r3, [r4, #4]
 8007ab0:	bf08      	it	eq
 8007ab2:	6031      	streq	r1, [r6, #0]
 8007ab4:	5162      	str	r2, [r4, r5]
 8007ab6:	604b      	str	r3, [r1, #4]
 8007ab8:	4638      	mov	r0, r7
 8007aba:	f104 060b 	add.w	r6, r4, #11
 8007abe:	f000 f865 	bl	8007b8c <__malloc_unlock>
 8007ac2:	f026 0607 	bic.w	r6, r6, #7
 8007ac6:	1d23      	adds	r3, r4, #4
 8007ac8:	1af2      	subs	r2, r6, r3
 8007aca:	d0b6      	beq.n	8007a3a <_malloc_r+0x22>
 8007acc:	1b9b      	subs	r3, r3, r6
 8007ace:	50a3      	str	r3, [r4, r2]
 8007ad0:	e7b3      	b.n	8007a3a <_malloc_r+0x22>
 8007ad2:	6862      	ldr	r2, [r4, #4]
 8007ad4:	42a3      	cmp	r3, r4
 8007ad6:	bf0c      	ite	eq
 8007ad8:	6032      	streq	r2, [r6, #0]
 8007ada:	605a      	strne	r2, [r3, #4]
 8007adc:	e7ec      	b.n	8007ab8 <_malloc_r+0xa0>
 8007ade:	4623      	mov	r3, r4
 8007ae0:	6864      	ldr	r4, [r4, #4]
 8007ae2:	e7b2      	b.n	8007a4a <_malloc_r+0x32>
 8007ae4:	4634      	mov	r4, r6
 8007ae6:	6876      	ldr	r6, [r6, #4]
 8007ae8:	e7b9      	b.n	8007a5e <_malloc_r+0x46>
 8007aea:	230c      	movs	r3, #12
 8007aec:	4638      	mov	r0, r7
 8007aee:	603b      	str	r3, [r7, #0]
 8007af0:	f000 f84c 	bl	8007b8c <__malloc_unlock>
 8007af4:	e7a1      	b.n	8007a3a <_malloc_r+0x22>
 8007af6:	6025      	str	r5, [r4, #0]
 8007af8:	e7de      	b.n	8007ab8 <_malloc_r+0xa0>
 8007afa:	bf00      	nop
 8007afc:	200019d8 	.word	0x200019d8

08007b00 <_realloc_r>:
 8007b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b04:	4680      	mov	r8, r0
 8007b06:	4614      	mov	r4, r2
 8007b08:	460e      	mov	r6, r1
 8007b0a:	b921      	cbnz	r1, 8007b16 <_realloc_r+0x16>
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b12:	f7ff bf81 	b.w	8007a18 <_malloc_r>
 8007b16:	b92a      	cbnz	r2, 8007b24 <_realloc_r+0x24>
 8007b18:	f7ff ff16 	bl	8007948 <_free_r>
 8007b1c:	4625      	mov	r5, r4
 8007b1e:	4628      	mov	r0, r5
 8007b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b24:	f000 f838 	bl	8007b98 <_malloc_usable_size_r>
 8007b28:	4284      	cmp	r4, r0
 8007b2a:	4607      	mov	r7, r0
 8007b2c:	d802      	bhi.n	8007b34 <_realloc_r+0x34>
 8007b2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b32:	d812      	bhi.n	8007b5a <_realloc_r+0x5a>
 8007b34:	4621      	mov	r1, r4
 8007b36:	4640      	mov	r0, r8
 8007b38:	f7ff ff6e 	bl	8007a18 <_malloc_r>
 8007b3c:	4605      	mov	r5, r0
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d0ed      	beq.n	8007b1e <_realloc_r+0x1e>
 8007b42:	42bc      	cmp	r4, r7
 8007b44:	4622      	mov	r2, r4
 8007b46:	4631      	mov	r1, r6
 8007b48:	bf28      	it	cs
 8007b4a:	463a      	movcs	r2, r7
 8007b4c:	f7fe fec2 	bl	80068d4 <memcpy>
 8007b50:	4631      	mov	r1, r6
 8007b52:	4640      	mov	r0, r8
 8007b54:	f7ff fef8 	bl	8007948 <_free_r>
 8007b58:	e7e1      	b.n	8007b1e <_realloc_r+0x1e>
 8007b5a:	4635      	mov	r5, r6
 8007b5c:	e7df      	b.n	8007b1e <_realloc_r+0x1e>
	...

08007b60 <_sbrk_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	2300      	movs	r3, #0
 8007b64:	4d05      	ldr	r5, [pc, #20]	; (8007b7c <_sbrk_r+0x1c>)
 8007b66:	4604      	mov	r4, r0
 8007b68:	4608      	mov	r0, r1
 8007b6a:	602b      	str	r3, [r5, #0]
 8007b6c:	f7f8 ffc8 	bl	8000b00 <_sbrk>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d102      	bne.n	8007b7a <_sbrk_r+0x1a>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	b103      	cbz	r3, 8007b7a <_sbrk_r+0x1a>
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	200019d0 	.word	0x200019d0

08007b80 <__malloc_lock>:
 8007b80:	4801      	ldr	r0, [pc, #4]	; (8007b88 <__malloc_lock+0x8>)
 8007b82:	f7ff beb7 	b.w	80078f4 <__retarget_lock_acquire_recursive>
 8007b86:	bf00      	nop
 8007b88:	200019d4 	.word	0x200019d4

08007b8c <__malloc_unlock>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	; (8007b94 <__malloc_unlock+0x8>)
 8007b8e:	f7ff beb2 	b.w	80078f6 <__retarget_lock_release_recursive>
 8007b92:	bf00      	nop
 8007b94:	200019d4 	.word	0x200019d4

08007b98 <_malloc_usable_size_r>:
 8007b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b9c:	1f18      	subs	r0, r3, #4
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bfbc      	itt	lt
 8007ba2:	580b      	ldrlt	r3, [r1, r0]
 8007ba4:	18c0      	addlt	r0, r0, r3
 8007ba6:	4770      	bx	lr

08007ba8 <_init>:
 8007ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007baa:	bf00      	nop
 8007bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bae:	bc08      	pop	{r3}
 8007bb0:	469e      	mov	lr, r3
 8007bb2:	4770      	bx	lr

08007bb4 <_fini>:
 8007bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bb6:	bf00      	nop
 8007bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bba:	bc08      	pop	{r3}
 8007bbc:	469e      	mov	lr, r3
 8007bbe:	4770      	bx	lr
