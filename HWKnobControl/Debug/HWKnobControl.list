
HWKnobControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d00c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  0800d1ac  0800d1ac  0001d1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d564  0800d564  000204d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d564  0800d564  0001d564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d56c  0800d56c  000204d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d56c  0800d56c  0001d56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d570  0800d570  0001d570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004d4  20000000  0800d574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000037c0  200004d4  0800da48  000204d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003c94  0800da48  00023c94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002148c  00000000  00000000  00020504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d29  00000000  00000000  00041990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a80  00000000  00000000  000476c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001818  00000000  00000000  00049140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6f4  00000000  00000000  0004a958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000299ff  00000000  00000000  0006a04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095d29  00000000  00000000  00093a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129774  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007328  00000000  00000000  001297c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200004d4 	.word	0x200004d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d194 	.word	0x0800d194

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200004d8 	.word	0x200004d8
 80001dc:	0800d194 	.word	0x0800d194

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <Evt_EnQueue>:
 *
 * \param  event data in an array of uint8_t
 * \return false if the queue is full
 */
bool Evt_EnQueue(uint8_t *event)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	unsigned i;
	uint8_t next = ADVANCE_QPTR(evt_queue.head);
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <Evt_EnQueue+0x7c>)
 800059e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80005a2:	3301      	adds	r3, #1
 80005a4:	425a      	negs	r2, r3
 80005a6:	f003 0307 	and.w	r3, r3, #7
 80005aa:	f002 0207 	and.w	r2, r2, #7
 80005ae:	bf58      	it	pl
 80005b0:	4253      	negpl	r3, r2
 80005b2:	72fb      	strb	r3, [r7, #11]

	// queue is full
	if(next == evt_queue.tail)
 80005b4:	4b16      	ldr	r3, [pc, #88]	; (8000610 <Evt_EnQueue+0x7c>)
 80005b6:	f893 3281 	ldrb.w	r3, [r3, #641]	; 0x281
 80005ba:	7afa      	ldrb	r2, [r7, #11]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d101      	bne.n	80005c4 <Evt_EnQueue+0x30>
	{
		// event will be lost
		return false;
 80005c0:	2300      	movs	r3, #0
 80005c2:	e01f      	b.n	8000604 <Evt_EnQueue+0x70>
	}

	// copy event bytes into the buffer
	for(i = 0; i < EVT_QWIDTH; i++)
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	e014      	b.n	80005f4 <Evt_EnQueue+0x60>
	{
		evt_queue.buff[evt_queue.head][i] = event[i];
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	4a0f      	ldr	r2, [pc, #60]	; (8000610 <Evt_EnQueue+0x7c>)
 80005d2:	f892 2280 	ldrb.w	r2, [r2, #640]	; 0x280
 80005d6:	4611      	mov	r1, r2
 80005d8:	7818      	ldrb	r0, [r3, #0]
 80005da:	4a0d      	ldr	r2, [pc, #52]	; (8000610 <Evt_EnQueue+0x7c>)
 80005dc:	460b      	mov	r3, r1
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	440b      	add	r3, r1
 80005e2:	011b      	lsls	r3, r3, #4
 80005e4:	441a      	add	r2, r3
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	4413      	add	r3, r2
 80005ea:	4602      	mov	r2, r0
 80005ec:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < EVT_QWIDTH; i++)
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	3301      	adds	r3, #1
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2b4f      	cmp	r3, #79	; 0x4f
 80005f8:	d9e7      	bls.n	80005ca <Evt_EnQueue+0x36>
	}
	// move to the next position
	evt_queue.head = next;
 80005fa:	4a05      	ldr	r2, [pc, #20]	; (8000610 <Evt_EnQueue+0x7c>)
 80005fc:	7afb      	ldrb	r3, [r7, #11]
 80005fe:	f882 3280 	strb.w	r3, [r2, #640]	; 0x280

	return true;
 8000602:	2301      	movs	r3, #1
}
 8000604:	4618      	mov	r0, r3
 8000606:	3714      	adds	r7, #20
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	200004f0 	.word	0x200004f0

08000614 <Evt_DeQueue>:
 *
 * \param  event data in an array of uint8_t
 * \return false if the queue is empty
 */
bool Evt_DeQueue(uint8_t *event)
{
 8000614:	b590      	push	{r4, r7, lr}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	bool flag = false;
 800061c:	2300      	movs	r3, #0
 800061e:	73bb      	strb	r3, [r7, #14]

	// disable all timers
	UsrTimer_Enable(false);
 8000620:	2000      	movs	r0, #0
 8000622:	f000 f9b3 	bl	800098c <UsrTimer_Enable>

	// queue is not empty
	if(evt_queue.tail != evt_queue.head)
 8000626:	4b1d      	ldr	r3, [pc, #116]	; (800069c <Evt_DeQueue+0x88>)
 8000628:	f893 2281 	ldrb.w	r2, [r3, #641]	; 0x281
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <Evt_DeQueue+0x88>)
 800062e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8000632:	429a      	cmp	r2, r3
 8000634:	d02a      	beq.n	800068c <Evt_DeQueue+0x78>
	{
		// copy event bytes into the buffer
		for(i = 0; i < EVT_QWIDTH; i++)
 8000636:	2300      	movs	r3, #0
 8000638:	73fb      	strb	r3, [r7, #15]
 800063a:	e013      	b.n	8000664 <Evt_DeQueue+0x50>
		{
			event[i] = evt_queue.buff[evt_queue.tail][i];
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <Evt_DeQueue+0x88>)
 800063e:	f893 3281 	ldrb.w	r3, [r3, #641]	; 0x281
 8000642:	461c      	mov	r4, r3
 8000644:	7bf9      	ldrb	r1, [r7, #15]
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	441a      	add	r2, r3
 800064c:	4813      	ldr	r0, [pc, #76]	; (800069c <Evt_DeQueue+0x88>)
 800064e:	4623      	mov	r3, r4
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4423      	add	r3, r4
 8000654:	011b      	lsls	r3, r3, #4
 8000656:	4403      	add	r3, r0
 8000658:	440b      	add	r3, r1
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	7013      	strb	r3, [r2, #0]
		for(i = 0; i < EVT_QWIDTH; i++)
 800065e:	7bfb      	ldrb	r3, [r7, #15]
 8000660:	3301      	adds	r3, #1
 8000662:	73fb      	strb	r3, [r7, #15]
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2b4f      	cmp	r3, #79	; 0x4f
 8000668:	d9e8      	bls.n	800063c <Evt_DeQueue+0x28>
		}
		// move to the next position
		evt_queue.tail = ADVANCE_QPTR(evt_queue.tail);
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <Evt_DeQueue+0x88>)
 800066c:	f893 3281 	ldrb.w	r3, [r3, #641]	; 0x281
 8000670:	3301      	adds	r3, #1
 8000672:	425a      	negs	r2, r3
 8000674:	f003 0307 	and.w	r3, r3, #7
 8000678:	f002 0207 	and.w	r2, r2, #7
 800067c:	bf58      	it	pl
 800067e:	4253      	negpl	r3, r2
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4b06      	ldr	r3, [pc, #24]	; (800069c <Evt_DeQueue+0x88>)
 8000684:	f883 2281 	strb.w	r2, [r3, #641]	; 0x281
		// set flag
		flag = true;
 8000688:	2301      	movs	r3, #1
 800068a:	73bb      	strb	r3, [r7, #14]
	}

	// enable all timers
	UsrTimer_Enable(true);
 800068c:	2001      	movs	r0, #1
 800068e:	f000 f97d 	bl	800098c <UsrTimer_Enable>

	// return with the flag
	return flag;
 8000692:	7bbb      	ldrb	r3, [r7, #14]
}
 8000694:	4618      	mov	r0, r3
 8000696:	3714      	adds	r7, #20
 8000698:	46bd      	mov	sp, r7
 800069a:	bd90      	pop	{r4, r7, pc}
 800069c:	200004f0 	.word	0x200004f0

080006a0 <PushButton_Init>:
 * \param	mask the mask byte that denotes which bit of the uint8_t data
 * supplied by PushButton_Read() function are assigned to the actual push
 * button.
 */
void PushButton_Init(uint8_t mask)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	71fb      	strb	r3, [r7, #7]
	int i ;

	// clear data
	pp.old_state = pp.new_state = 0;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <PushButton_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	705a      	strb	r2, [r3, #1]
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <PushButton_Init+0x58>)
 80006b2:	785a      	ldrb	r2, [r3, #1]
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <PushButton_Init+0x58>)
 80006b6:	701a      	strb	r2, [r3, #0]
	pp.mask = mask;
 80006b8:	4a0f      	ldr	r2, [pc, #60]	; (80006f8 <PushButton_Init+0x58>)
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	7693      	strb	r3, [r2, #26]
	pp.mode = 0;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <PushButton_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	76da      	strb	r2, [r3, #27]
	pp.flag = false;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <PushButton_Init+0x58>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	771a      	strb	r2, [r3, #28]

	// clear log
	for(i = 0; i < 8; i++)
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	e007      	b.n	80006e0 <PushButton_Init+0x40>
	{
		PushButton_ClearLog(i);
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 f813 	bl	8000700 <PushButton_ClearLog>
	for(i = 0; i < 8; i++)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3301      	adds	r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	ddf4      	ble.n	80006d0 <PushButton_Init+0x30>
	}

	// register pushbutton main routine
	UsrTimer_Set(PUSHBTN_TMR_PERIOD, 0, PushButton_Routine);
 80006e6:	4a05      	ldr	r2, [pc, #20]	; (80006fc <PushButton_Init+0x5c>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	2005      	movs	r0, #5
 80006ec:	f000 f95e 	bl	80009ac <UsrTimer_Set>
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000774 	.word	0x20000774
 80006fc:	08000739 	.word	0x08000739

08000700 <PushButton_ClearLog>:
}

/** Clear the duration parameter and the click count parameter of the button.
 */
void PushButton_ClearLog(uint8_t index)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	if(index < 8)
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	2b07      	cmp	r3, #7
 800070e:	d80b      	bhi.n	8000728 <PushButton_ClearLog+0x28>
	{
		pp.click[index] = pp.duration[index] = 0;
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4a08      	ldr	r2, [pc, #32]	; (8000734 <PushButton_ClearLog+0x34>)
 8000714:	3304      	adds	r3, #4
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	4413      	add	r3, r2
 800071a:	2200      	movs	r2, #0
 800071c:	805a      	strh	r2, [r3, #2]
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	4a04      	ldr	r2, [pc, #16]	; (8000734 <PushButton_ClearLog+0x34>)
 8000722:	4413      	add	r3, r2
 8000724:	2200      	movs	r2, #0
 8000726:	709a      	strb	r2, [r3, #2]
	}
}
 8000728:	bf00      	nop
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr
 8000734:	20000774 	.word	0x20000774

08000738 <PushButton_Routine>:

/** Main routine
 */
void PushButton_Routine()
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b096      	sub	sp, #88	; 0x58
 800073c:	af00      	add	r7, sp, #0
	uint8_t diff_state;
	uint8_t event[EVT_QWIDTH];

	extern uint8_t reg_s;

	pp.new_state = PushButton_Read();
 800073e:	f001 f925 	bl	800198c <PushButton_Read>
 8000742:	4603      	mov	r3, r0
 8000744:	461a      	mov	r2, r3
 8000746:	4b90      	ldr	r3, [pc, #576]	; (8000988 <PushButton_Routine+0x250>)
 8000748:	705a      	strb	r2, [r3, #1]

	// difference in the button state
	diff_state = pp.old_state ^ pp.new_state;
 800074a:	4b8f      	ldr	r3, [pc, #572]	; (8000988 <PushButton_Routine+0x250>)
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	4b8e      	ldr	r3, [pc, #568]	; (8000988 <PushButton_Routine+0x250>)
 8000750:	785b      	ldrb	r3, [r3, #1]
 8000752:	4053      	eors	r3, r2
 8000754:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

	for(i = 0; i < 8; i++)
 8000758:	2300      	movs	r3, #0
 800075a:	657b      	str	r3, [r7, #84]	; 0x54
 800075c:	e107      	b.n	800096e <PushButton_Routine+0x236>
	{
		// skip if no button is assigned
		if(((pp.mask >> i) & 0x01) == 0x00)
 800075e:	4b8a      	ldr	r3, [pc, #552]	; (8000988 <PushButton_Routine+0x250>)
 8000760:	7e9b      	ldrb	r3, [r3, #26]
 8000762:	461a      	mov	r2, r3
 8000764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000766:	fa42 f303 	asr.w	r3, r2, r3
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	2b00      	cmp	r3, #0
 8000770:	f000 80f9 	beq.w	8000966 <PushButton_Routine+0x22e>
		{
			continue;
		}

		// up-down mode
		if(((pp.mode >> i) & 0x01)  == PUSHBTN_MODE_UDOWN)
 8000774:	4b84      	ldr	r3, [pc, #528]	; (8000988 <PushButton_Routine+0x250>)
 8000776:	7edb      	ldrb	r3, [r3, #27]
 8000778:	461a      	mov	r2, r3
 800077a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800077c:	fa42 f303 	asr.w	r3, r2, r3
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	2b00      	cmp	r3, #0
 8000786:	d02c      	beq.n	80007e2 <PushButton_Routine+0xaa>
		{
			// the button pressed
			if(((pp.new_state >> i) & 0x01) == 0x01)
 8000788:	4b7f      	ldr	r3, [pc, #508]	; (8000988 <PushButton_Routine+0x250>)
 800078a:	785b      	ldrb	r3, [r3, #1]
 800078c:	461a      	mov	r2, r3
 800078e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000790:	fa42 f303 	asr.w	r3, r2, r3
 8000794:	f003 0301 	and.w	r3, r3, #1
 8000798:	2b00      	cmp	r3, #0
 800079a:	d00b      	beq.n	80007b4 <PushButton_Routine+0x7c>
			{
				event[0] = EVT_PBTN_INPUT;
 800079c:	2310      	movs	r3, #16
 800079e:	703b      	strb	r3, [r7, #0]
				event[1] = (uint8_t)(i);
 80007a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	707b      	strb	r3, [r7, #1]
				event[2] = PBTN_DOWN;
 80007a6:	2305      	movs	r3, #5
 80007a8:	70bb      	strb	r3, [r7, #2]

				// post the event as long as the button is pressed down
				Evt_EnQueue(event);
 80007aa:	463b      	mov	r3, r7
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fef1 	bl	8000594 <Evt_EnQueue>
 80007b2:	e0d9      	b.n	8000968 <PushButton_Routine+0x230>
			}
			// button released
			else
			{
				// actually it has just risen
				if(((pp.old_state >> i) & 0x01) == 0x01)
 80007b4:	4b74      	ldr	r3, [pc, #464]	; (8000988 <PushButton_Routine+0x250>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	461a      	mov	r2, r3
 80007ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007bc:	fa42 f303 	asr.w	r3, r2, r3
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	f000 80cf 	beq.w	8000968 <PushButton_Routine+0x230>
				{
					event[0] = EVT_PBTN_INPUT;
 80007ca:	2310      	movs	r3, #16
 80007cc:	703b      	strb	r3, [r7, #0]
					event[1] = (uint8_t)(i);
 80007ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	707b      	strb	r3, [r7, #1]
					event[2] = PBTN_ENDN;
 80007d4:	2306      	movs	r3, #6
 80007d6:	70bb      	strb	r3, [r7, #2]

					// post the event to indicate the end of the down state
					Evt_EnQueue(event);
 80007d8:	463b      	mov	r3, r7
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff feda 	bl	8000594 <Evt_EnQueue>
 80007e0:	e0c2      	b.n	8000968 <PushButton_Routine+0x230>
		}
		// click mode
		else
		{
			// the button state changed
			if((diff_state >> i) & 0x01)
 80007e2:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80007e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007e8:	fa42 f303 	asr.w	r3, r2, r3
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d02d      	beq.n	8000850 <PushButton_Routine+0x118>
			{
				// (re)start duration count
				pp.duration[i] = 1;
 80007f4:	4a64      	ldr	r2, [pc, #400]	; (8000988 <PushButton_Routine+0x250>)
 80007f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007f8:	3304      	adds	r3, #4
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	2201      	movs	r2, #1
 8000800:	805a      	strh	r2, [r3, #2]

				// the button released
				if(((pp.new_state >> i) & 0x01) == 0x00)
 8000802:	4b61      	ldr	r3, [pc, #388]	; (8000988 <PushButton_Routine+0x250>)
 8000804:	785b      	ldrb	r3, [r3, #1]
 8000806:	461a      	mov	r2, r3
 8000808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800080a:	fa42 f303 	asr.w	r3, r2, r3
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	2b00      	cmp	r3, #0
 8000814:	d13c      	bne.n	8000890 <PushButton_Routine+0x158>
				{
					if(pp.flag)
 8000816:	4b5c      	ldr	r3, [pc, #368]	; (8000988 <PushButton_Routine+0x250>)
 8000818:	7f1b      	ldrb	r3, [r3, #28]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d00a      	beq.n	8000834 <PushButton_Routine+0xfc>
					{
						pp.flag = false;
 800081e:	4b5a      	ldr	r3, [pc, #360]	; (8000988 <PushButton_Routine+0x250>)
 8000820:	2200      	movs	r2, #0
 8000822:	771a      	strb	r2, [r3, #28]
						//
						pp.duration[i] = 0;
 8000824:	4a58      	ldr	r2, [pc, #352]	; (8000988 <PushButton_Routine+0x250>)
 8000826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000828:	3304      	adds	r3, #4
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	4413      	add	r3, r2
 800082e:	2200      	movs	r2, #0
 8000830:	805a      	strh	r2, [r3, #2]
 8000832:	e02d      	b.n	8000890 <PushButton_Routine+0x158>
					}
					else
					{
						// increase click count
						pp.click[i]++;
 8000834:	4a54      	ldr	r2, [pc, #336]	; (8000988 <PushButton_Routine+0x250>)
 8000836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000838:	4413      	add	r3, r2
 800083a:	3302      	adds	r3, #2
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	3301      	adds	r3, #1
 8000840:	b2d9      	uxtb	r1, r3
 8000842:	4a51      	ldr	r2, [pc, #324]	; (8000988 <PushButton_Routine+0x250>)
 8000844:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000846:	4413      	add	r3, r2
 8000848:	3302      	adds	r3, #2
 800084a:	460a      	mov	r2, r1
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	e01f      	b.n	8000890 <PushButton_Routine+0x158>
			}
			// button state not changed
			else
			{
				// increase duration count
				if((pp.duration[i] > 0) &&
 8000850:	4a4d      	ldr	r2, [pc, #308]	; (8000988 <PushButton_Routine+0x250>)
 8000852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000854:	3304      	adds	r3, #4
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	885b      	ldrh	r3, [r3, #2]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d017      	beq.n	8000890 <PushButton_Routine+0x158>
						(pp.duration[i] < PUSHBTN_TO_MAX))
 8000860:	4a49      	ldr	r2, [pc, #292]	; (8000988 <PushButton_Routine+0x250>)
 8000862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000864:	3304      	adds	r3, #4
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	4413      	add	r3, r2
 800086a:	885b      	ldrh	r3, [r3, #2]
				if((pp.duration[i] > 0) &&
 800086c:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8000870:	d20e      	bcs.n	8000890 <PushButton_Routine+0x158>
				{
					pp.duration[i]++;
 8000872:	4a45      	ldr	r2, [pc, #276]	; (8000988 <PushButton_Routine+0x250>)
 8000874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000876:	3304      	adds	r3, #4
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	4413      	add	r3, r2
 800087c:	885b      	ldrh	r3, [r3, #2]
 800087e:	3301      	adds	r3, #1
 8000880:	b299      	uxth	r1, r3
 8000882:	4a41      	ldr	r2, [pc, #260]	; (8000988 <PushButton_Routine+0x250>)
 8000884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000886:	3304      	adds	r3, #4
 8000888:	005b      	lsls	r3, r3, #1
 800088a:	4413      	add	r3, r2
 800088c:	460a      	mov	r2, r1
 800088e:	805a      	strh	r2, [r3, #2]
				}
			}

			// triple click
			if(pp.click[i] >= 3)
 8000890:	4a3d      	ldr	r2, [pc, #244]	; (8000988 <PushButton_Routine+0x250>)
 8000892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000894:	4413      	add	r3, r2
 8000896:	3302      	adds	r3, #2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b02      	cmp	r3, #2
 800089c:	d910      	bls.n	80008c0 <PushButton_Routine+0x188>
			{
				// triple click event
				event[0] = EVT_PBTN_INPUT;
 800089e:	2310      	movs	r3, #16
 80008a0:	703b      	strb	r3, [r7, #0]
				event[1] = (uint8_t)(i);
 80008a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	707b      	strb	r3, [r7, #1]
				event[2] = PBTN_TCLK;
 80008a8:	2304      	movs	r3, #4
 80008aa:	70bb      	strb	r3, [r7, #2]
				// post event
				Evt_EnQueue(event);
 80008ac:	463b      	mov	r3, r7
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fe70 	bl	8000594 <Evt_EnQueue>

				// clear log
				PushButton_ClearLog(i);
 80008b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff21 	bl	8000700 <PushButton_ClearLog>
 80008be:	e053      	b.n	8000968 <PushButton_Routine+0x230>
			}
			// button relased and short timeout passed
			else if((pp.duration[i] > PUSHBTN_TO_SHORT) &&
 80008c0:	4a31      	ldr	r2, [pc, #196]	; (8000988 <PushButton_Routine+0x250>)
 80008c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008c4:	3304      	adds	r3, #4
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	4413      	add	r3, r2
 80008ca:	885b      	ldrh	r3, [r3, #2]
 80008cc:	2b14      	cmp	r3, #20
 80008ce:	d924      	bls.n	800091a <PushButton_Routine+0x1e2>
					(((pp.new_state >> i) & 0x01) == 0x00))
 80008d0:	4b2d      	ldr	r3, [pc, #180]	; (8000988 <PushButton_Routine+0x250>)
 80008d2:	785b      	ldrb	r3, [r3, #1]
 80008d4:	461a      	mov	r2, r3
 80008d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008d8:	fa42 f303 	asr.w	r3, r2, r3
 80008dc:	f003 0301 	and.w	r3, r3, #1
			else if((pp.duration[i] > PUSHBTN_TO_SHORT) &&
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d11a      	bne.n	800091a <PushButton_Routine+0x1e2>
			{
				event[0] = EVT_PBTN_INPUT;
 80008e4:	2310      	movs	r3, #16
 80008e6:	703b      	strb	r3, [r7, #0]
				event[1] = (uint8_t)(i);
 80008e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	707b      	strb	r3, [r7, #1]

				// double click
				if(pp.click[i] == 2)
 80008ee:	4a26      	ldr	r2, [pc, #152]	; (8000988 <PushButton_Routine+0x250>)
 80008f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80008f2:	4413      	add	r3, r2
 80008f4:	3302      	adds	r3, #2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d102      	bne.n	8000902 <PushButton_Routine+0x1ca>
				{
					// double click event
					event[2] = PBTN_DCLK;
 80008fc:	2303      	movs	r3, #3
 80008fe:	70bb      	strb	r3, [r7, #2]
 8000900:	e001      	b.n	8000906 <PushButton_Routine+0x1ce>
				}
				// single click
				else
				{
					// single click event
					event[2] = PBTN_SCLK;
 8000902:	2301      	movs	r3, #1
 8000904:	70bb      	strb	r3, [r7, #2]
				}
				// post the event
				Evt_EnQueue(event);
 8000906:	463b      	mov	r3, r7
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fe43 	bl	8000594 <Evt_EnQueue>

				// clear log
				PushButton_ClearLog(i);
 800090e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000910:	b2db      	uxtb	r3, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff fef4 	bl	8000700 <PushButton_ClearLog>
 8000918:	e026      	b.n	8000968 <PushButton_Routine+0x230>
			}
			// button pressed and long timeout passed
			else if((pp.duration[i] > PUSHBTN_TO_LONG) &&
 800091a:	4a1b      	ldr	r2, [pc, #108]	; (8000988 <PushButton_Routine+0x250>)
 800091c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800091e:	3304      	adds	r3, #4
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	4413      	add	r3, r2
 8000924:	885b      	ldrh	r3, [r3, #2]
 8000926:	2b64      	cmp	r3, #100	; 0x64
 8000928:	d91e      	bls.n	8000968 <PushButton_Routine+0x230>
					(((pp.new_state >> i) & 0x01) == 0x01))
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <PushButton_Routine+0x250>)
 800092c:	785b      	ldrb	r3, [r3, #1]
 800092e:	461a      	mov	r2, r3
 8000930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000932:	fa42 f303 	asr.w	r3, r2, r3
 8000936:	f003 0301 	and.w	r3, r3, #1
			else if((pp.duration[i] > PUSHBTN_TO_LONG) &&
 800093a:	2b00      	cmp	r3, #0
 800093c:	d014      	beq.n	8000968 <PushButton_Routine+0x230>
			{
				// long click event
				event[0] = EVT_PBTN_INPUT;
 800093e:	2310      	movs	r3, #16
 8000940:	703b      	strb	r3, [r7, #0]
				event[1] = (uint8_t)(i);
 8000942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000944:	b2db      	uxtb	r3, r3
 8000946:	707b      	strb	r3, [r7, #1]
				event[2] = PBTN_LCLK;
 8000948:	2302      	movs	r3, #2
 800094a:	70bb      	strb	r3, [r7, #2]

				// post the event
				Evt_EnQueue(event);
 800094c:	463b      	mov	r3, r7
 800094e:	4618      	mov	r0, r3
 8000950:	f7ff fe20 	bl	8000594 <Evt_EnQueue>

				// clear log
				PushButton_ClearLog(i);
 8000954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000956:	b2db      	uxtb	r3, r3
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fed1 	bl	8000700 <PushButton_ClearLog>

				// raise flag: this will prevent false detect after long click
				pp.flag = true;
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <PushButton_Routine+0x250>)
 8000960:	2201      	movs	r2, #1
 8000962:	771a      	strb	r2, [r3, #28]
 8000964:	e000      	b.n	8000968 <PushButton_Routine+0x230>
			continue;
 8000966:	bf00      	nop
	for(i = 0; i < 8; i++)
 8000968:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800096a:	3301      	adds	r3, #1
 800096c:	657b      	str	r3, [r7, #84]	; 0x54
 800096e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000970:	2b07      	cmp	r3, #7
 8000972:	f77f aef4 	ble.w	800075e <PushButton_Routine+0x26>
			}
		}
	}
	// update pin state
	pp.old_state = pp.new_state;
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <PushButton_Routine+0x250>)
 8000978:	785a      	ldrb	r2, [r3, #1]
 800097a:	4b03      	ldr	r3, [pc, #12]	; (8000988 <PushButton_Routine+0x250>)
 800097c:	701a      	strb	r2, [r3, #0]
}
 800097e:	bf00      	nop
 8000980:	3758      	adds	r7, #88	; 0x58
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000774 	.word	0x20000774

0800098c <UsrTimer_Enable>:
}

/** Call this function to pause or to resume all timers at once.
 */
void UsrTimer_Enable(bool flag)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	71fb      	strb	r3, [r7, #7]
	usrtimer_enable = flag;
 8000996:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <UsrTimer_Enable+0x1c>)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	7013      	strb	r3, [r2, #0]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	20000000 	.word	0x20000000

080009ac <UsrTimer_Set>:
 * \param   duration number of repetition. 0 for perpetual timer.
 * \param   usrtimer_callback callback function
 * \return	the index of the timer created. if failed, -1 will be returned.
 */
int UsrTimer_Set(uint32_t period, uint32_t duration, usrtimer_callback f)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b087      	sub	sp, #28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
	int i;

	// check unoccupied spot
	for(i = 0; i < MAX_USRTIMER; i++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	e04e      	b.n	8000a5c <UsrTimer_Set+0xb0>
	{
		if(USRTimers[i].mode == USRTIMER_UNASGN)
 80009be:	492d      	ldr	r1, [pc, #180]	; (8000a74 <UsrTimer_Set+0xc8>)
 80009c0:	697a      	ldr	r2, [r7, #20]
 80009c2:	4613      	mov	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	440b      	add	r3, r1
 80009cc:	330c      	adds	r3, #12
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d140      	bne.n	8000a56 <UsrTimer_Set+0xaa>
		{
			// finite duration timer
			if(duration > 0)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d00a      	beq.n	80009f0 <UsrTimer_Set+0x44>
			{
				USRTimers[i].mode = USRTIMER_FINITE;
 80009da:	4926      	ldr	r1, [pc, #152]	; (8000a74 <UsrTimer_Set+0xc8>)
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	4613      	mov	r3, r2
 80009e0:	009b      	lsls	r3, r3, #2
 80009e2:	4413      	add	r3, r2
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	440b      	add	r3, r1
 80009e8:	330c      	adds	r3, #12
 80009ea:	2202      	movs	r2, #2
 80009ec:	701a      	strb	r2, [r3, #0]
 80009ee:	e009      	b.n	8000a04 <UsrTimer_Set+0x58>
			}
			// perpetual timer
			else
			{
				USRTimers[i].mode = USRTIMER_FOREVR;
 80009f0:	4920      	ldr	r1, [pc, #128]	; (8000a74 <UsrTimer_Set+0xc8>)
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	4613      	mov	r3, r2
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	4413      	add	r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	440b      	add	r3, r1
 80009fe:	330c      	adds	r3, #12
 8000a00:	2203      	movs	r2, #3
 8000a02:	701a      	strb	r2, [r3, #0]
			}

			USRTimers[i].period = (int32_t)period;
 8000a04:	68f9      	ldr	r1, [r7, #12]
 8000a06:	481b      	ldr	r0, [pc, #108]	; (8000a74 <UsrTimer_Set+0xc8>)
 8000a08:	697a      	ldr	r2, [r7, #20]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	4413      	add	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	4403      	add	r3, r0
 8000a14:	6019      	str	r1, [r3, #0]
			USRTimers[i].duration = (int32_t)duration;
 8000a16:	68b9      	ldr	r1, [r7, #8]
 8000a18:	4816      	ldr	r0, [pc, #88]	; (8000a74 <UsrTimer_Set+0xc8>)
 8000a1a:	697a      	ldr	r2, [r7, #20]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	4403      	add	r3, r0
 8000a26:	3304      	adds	r3, #4
 8000a28:	6019      	str	r1, [r3, #0]
			USRTimers[i].count = 0;
 8000a2a:	4912      	ldr	r1, [pc, #72]	; (8000a74 <UsrTimer_Set+0xc8>)
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
			USRTimers[i].callback = f;
 8000a3e:	490d      	ldr	r1, [pc, #52]	; (8000a74 <UsrTimer_Set+0xc8>)
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	4613      	mov	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4413      	add	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	3310      	adds	r3, #16
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	601a      	str	r2, [r3, #0]
			// return with the timer index
			return i;
 8000a52:	697b      	ldr	r3, [r7, #20]
 8000a54:	e007      	b.n	8000a66 <UsrTimer_Set+0xba>
	for(i = 0; i < MAX_USRTIMER; i++)
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	2b13      	cmp	r3, #19
 8000a60:	ddad      	ble.n	80009be <UsrTimer_Set+0x12>
		}
	}

	// no empty slot
	return -1;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	371c      	adds	r7, #28
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000794 	.word	0x20000794

08000a78 <RingBufferU8_init>:
#include "ringbuffer.h"
#include "stdio.h"

#define MIN(X,Y) ((X) < (Y) ? (X) : (Y))

void RingBufferU8_init(RingBufferU8* ring, uint8_t* storage, uint16_t size) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	60f8      	str	r0, [r7, #12]
 8000a80:	60b9      	str	r1, [r7, #8]
 8000a82:	4613      	mov	r3, r2
 8000a84:	80fb      	strh	r3, [r7, #6]
  ring->storage = storage;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	68ba      	ldr	r2, [r7, #8]
 8000a8a:	601a      	str	r2, [r3, #0]
  ring->size = size;
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	88fa      	ldrh	r2, [r7, #6]
 8000a90:	811a      	strh	r2, [r3, #8]
  ring->end = ring->storage + ring->size;
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	8912      	ldrh	r2, [r2, #8]
 8000a9a:	441a      	add	r2, r3
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	605a      	str	r2, [r3, #4]
  ring->read = ring->storage;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	60da      	str	r2, [r3, #12]
  ring->write = ring->storage;
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  ring->available = 0;
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	829a      	strh	r2, [r3, #20]
}
 8000ab6:	bf00      	nop
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr

08000ac2 <RingBufferU8_readByte>:
  ring->read = ring->storage;
  ring->write = ring->storage;
  ring->available = 0;
}

uint8_t RingBufferU8_readByte(RingBufferU8* ring) {
 8000ac2:	b480      	push	{r7}
 8000ac4:	b085      	sub	sp, #20
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
  if (ring->available == 0) {
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	8a9b      	ldrh	r3, [r3, #20]
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d101      	bne.n	8000ad8 <RingBufferU8_readByte+0x16>
    return 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	e018      	b.n	8000b0a <RingBufferU8_readByte+0x48>
  }
  uint8_t ret = *ring->read++;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	1c59      	adds	r1, r3, #1
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	60d1      	str	r1, [r2, #12]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	73fb      	strb	r3, [r7, #15]
  ring->available--;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	8a9b      	ldrh	r3, [r3, #20]
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	3b01      	subs	r3, #1
 8000aee:	b29a      	uxth	r2, r3
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	829a      	strh	r2, [r3, #20]
  if (ring->read >= ring->end) {
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	68da      	ldr	r2, [r3, #12]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	d303      	bcc.n	8000b08 <RingBufferU8_readByte+0x46>
    ring->read = ring->storage;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	60da      	str	r2, [r3, #12]
  }
  return ret;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <RingBufferU8_read>:

void RingBufferU8_read(RingBufferU8* ring, uint8_t* buffer, uint16_t size) {
 8000b16:	b590      	push	{r4, r7, lr}
 8000b18:	b087      	sub	sp, #28
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	4613      	mov	r3, r2
 8000b22:	80fb      	strh	r3, [r7, #6]
  uint16_t i;

  // TODO can be optimized
  for (i = 0; i < size; i++) {
 8000b24:	2300      	movs	r3, #0
 8000b26:	82fb      	strh	r3, [r7, #22]
 8000b28:	e00a      	b.n	8000b40 <RingBufferU8_read+0x2a>
    buffer[i] = RingBufferU8_readByte(ring);
 8000b2a:	8afb      	ldrh	r3, [r7, #22]
 8000b2c:	68ba      	ldr	r2, [r7, #8]
 8000b2e:	18d4      	adds	r4, r2, r3
 8000b30:	68f8      	ldr	r0, [r7, #12]
 8000b32:	f7ff ffc6 	bl	8000ac2 <RingBufferU8_readByte>
 8000b36:	4603      	mov	r3, r0
 8000b38:	7023      	strb	r3, [r4, #0]
  for (i = 0; i < size; i++) {
 8000b3a:	8afb      	ldrh	r3, [r7, #22]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	82fb      	strh	r3, [r7, #22]
 8000b40:	8afa      	ldrh	r2, [r7, #22]
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d3f0      	bcc.n	8000b2a <RingBufferU8_read+0x14>
  }
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	371c      	adds	r7, #28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd90      	pop	{r4, r7, pc}

08000b52 <RingBufferU8_writeByte>:

void RingBufferU8_writeByte(RingBufferU8* ring, uint8_t b) {
 8000b52:	b580      	push	{r7, lr}
 8000b54:	b082      	sub	sp, #8
 8000b56:	af00      	add	r7, sp, #0
 8000b58:	6078      	str	r0, [r7, #4]
 8000b5a:	460b      	mov	r3, r1
 8000b5c:	70fb      	strb	r3, [r7, #3]
  if (ring->available >= ring->size) {
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	8a9b      	ldrh	r3, [r3, #20]
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	891b      	ldrh	r3, [r3, #8]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d302      	bcc.n	8000b72 <RingBufferU8_writeByte+0x20>
    RingBufferU8_readByte(ring);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff ffa8 	bl	8000ac2 <RingBufferU8_readByte>
  }

  *ring->write = b;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	78fa      	ldrb	r2, [r7, #3]
 8000b78:	701a      	strb	r2, [r3, #0]
  ring->write++;
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	691b      	ldr	r3, [r3, #16]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	611a      	str	r2, [r3, #16]
  ring->available++;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	8a9b      	ldrh	r3, [r3, #20]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	829a      	strh	r2, [r3, #20]
  if (ring->write >= ring->end) {
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	691a      	ldr	r2, [r3, #16]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d303      	bcc.n	8000ba6 <RingBufferU8_writeByte+0x54>
    ring->write = ring->storage;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	611a      	str	r2, [r3, #16]
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}

08000bae <RingBufferU8_write>:

// if terminator is supplied
uint8_t RingBufferU8_write(RingBufferU8* ring, const uint8_t* buffer, uint16_t size, uint8_t terminator) {
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	4611      	mov	r1, r2
 8000bba:	461a      	mov	r2, r3
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	80fb      	strh	r3, [r7, #6]
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	717b      	strb	r3, [r7, #5]
  uint16_t i;
  uint8_t saw_terminator = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	757b      	strb	r3, [r7, #21]

  // TODO can be optimized
  for (i = 0; i < size; i++) {
 8000bc8:	2300      	movs	r3, #0
 8000bca:	82fb      	strh	r3, [r7, #22]
 8000bcc:	e016      	b.n	8000bfc <RingBufferU8_write+0x4e>
    if (terminator && terminator == buffer[i]) saw_terminator = 1;
 8000bce:	797b      	ldrb	r3, [r7, #5]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d008      	beq.n	8000be6 <RingBufferU8_write+0x38>
 8000bd4:	8afb      	ldrh	r3, [r7, #22]
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	4413      	add	r3, r2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	797a      	ldrb	r2, [r7, #5]
 8000bde:	429a      	cmp	r2, r3
 8000be0:	d101      	bne.n	8000be6 <RingBufferU8_write+0x38>
 8000be2:	2301      	movs	r3, #1
 8000be4:	757b      	strb	r3, [r7, #21]
    RingBufferU8_writeByte(ring, buffer[i]);
 8000be6:	8afb      	ldrh	r3, [r7, #22]
 8000be8:	68ba      	ldr	r2, [r7, #8]
 8000bea:	4413      	add	r3, r2
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	4619      	mov	r1, r3
 8000bf0:	68f8      	ldr	r0, [r7, #12]
 8000bf2:	f7ff ffae 	bl	8000b52 <RingBufferU8_writeByte>
  for (i = 0; i < size; i++) {
 8000bf6:	8afb      	ldrh	r3, [r7, #22]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	82fb      	strh	r3, [r7, #22]
 8000bfc:	8afa      	ldrh	r2, [r7, #22]
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d3e4      	bcc.n	8000bce <RingBufferU8_write+0x20>
  }
  return saw_terminator;
 8000c04:	7d7b      	ldrb	r3, [r7, #21]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <RingBufferU8_readUntil>:

uint16_t RingBufferU8_readLine(RingBufferU8* ring, uint8_t* buffer, uint16_t size) {
  return RingBufferU8_readUntil(ring, buffer, size, '\r');
}

uint16_t RingBufferU8_readUntil(RingBufferU8* ring, uint8_t* buffer, uint16_t size, uint8_t stopByte) {
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	60f8      	str	r0, [r7, #12]
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	4611      	mov	r1, r2
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	80fb      	strh	r3, [r7, #6]
 8000c20:	4613      	mov	r3, r2
 8000c22:	717b      	strb	r3, [r7, #5]
  uint8_t b;
  uint16_t i;
  for (i = 0; i < MIN(ring->available, size - 1); i++) {
 8000c24:	2300      	movs	r3, #0
 8000c26:	82fb      	strh	r3, [r7, #22]
 8000c28:	e01d      	b.n	8000c66 <RingBufferU8_readUntil+0x58>
    b = RingBufferU8_peekn(ring, i);
 8000c2a:	8afb      	ldrh	r3, [r7, #22]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f000 f832 	bl	8000c98 <RingBufferU8_peekn>
 8000c34:	4603      	mov	r3, r0
 8000c36:	757b      	strb	r3, [r7, #21]
    if (b == stopByte) {
 8000c38:	7d7a      	ldrb	r2, [r7, #21]
 8000c3a:	797b      	ldrb	r3, [r7, #5]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d10f      	bne.n	8000c60 <RingBufferU8_readUntil+0x52>
      i++;
 8000c40:	8afb      	ldrh	r3, [r7, #22]
 8000c42:	3301      	adds	r3, #1
 8000c44:	82fb      	strh	r3, [r7, #22]
      RingBufferU8_read(ring, (uint8_t*) buffer, i);
 8000c46:	8afb      	ldrh	r3, [r7, #22]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	68b9      	ldr	r1, [r7, #8]
 8000c4c:	68f8      	ldr	r0, [r7, #12]
 8000c4e:	f7ff ff62 	bl	8000b16 <RingBufferU8_read>
      buffer[i] = '\0';
 8000c52:	8afb      	ldrh	r3, [r7, #22]
 8000c54:	68ba      	ldr	r2, [r7, #8]
 8000c56:	4413      	add	r3, r2
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
      return i;
 8000c5c:	8afb      	ldrh	r3, [r7, #22]
 8000c5e:	e017      	b.n	8000c90 <RingBufferU8_readUntil+0x82>
  for (i = 0; i < MIN(ring->available, size - 1); i++) {
 8000c60:	8afb      	ldrh	r3, [r7, #22]
 8000c62:	3301      	adds	r3, #1
 8000c64:	82fb      	strh	r3, [r7, #22]
 8000c66:	8afa      	ldrh	r2, [r7, #22]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	8a9b      	ldrh	r3, [r3, #20]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4619      	mov	r1, r3
 8000c70:	88fb      	ldrh	r3, [r7, #6]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	4299      	cmp	r1, r3
 8000c76:	da03      	bge.n	8000c80 <RingBufferU8_readUntil+0x72>
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	8a9b      	ldrh	r3, [r3, #20]
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	e001      	b.n	8000c84 <RingBufferU8_readUntil+0x76>
 8000c80:	88fb      	ldrh	r3, [r7, #6]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	4293      	cmp	r3, r2
 8000c86:	dcd0      	bgt.n	8000c2a <RingBufferU8_readUntil+0x1c>
    }
  }
  buffer[0] = '\0';
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
  return 0;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <RingBufferU8_peekn>:

uint8_t RingBufferU8_peek(RingBufferU8* ring) {
  return RingBufferU8_peekn(ring, 0);
}

uint8_t RingBufferU8_peekn(RingBufferU8* ring, uint16_t i) {
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	807b      	strh	r3, [r7, #2]
  if (i >= ring->available) {
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	8a9b      	ldrh	r3, [r3, #20]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	887a      	ldrh	r2, [r7, #2]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d301      	bcc.n	8000cb4 <RingBufferU8_peekn+0x1c>
    return 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e013      	b.n	8000cdc <RingBufferU8_peekn+0x44>
  }

  uint8_t* read = (uint8_t*)ring->read;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	60bb      	str	r3, [r7, #8]
  uint8_t* p = read + i;
 8000cba:	887b      	ldrh	r3, [r7, #2]
 8000cbc:	68ba      	ldr	r2, [r7, #8]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  if (p >= ring->end) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d305      	bcc.n	8000cd8 <RingBufferU8_peekn+0x40>
    p -= ring->size;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	891b      	ldrh	r3, [r3, #8]
 8000cd0:	425b      	negs	r3, r3
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]
  }
  return *p;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	781b      	ldrb	r3, [r3, #0]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b3c      	ldr	r3, [pc, #240]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a3b      	ldr	r2, [pc, #236]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d08:	f043 0304 	orr.w	r3, r3, #4
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b39      	ldr	r3, [pc, #228]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0304 	and.w	r3, r3, #4
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	4b35      	ldr	r3, [pc, #212]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a34      	ldr	r2, [pc, #208]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b32      	ldr	r3, [pc, #200]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
 8000d3a:	4b2e      	ldr	r3, [pc, #184]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a2d      	ldr	r2, [pc, #180]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	4a26      	ldr	r2, [pc, #152]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6313      	str	r3, [r2, #48]	; 0x30
 8000d62:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <MX_GPIO_Init+0x10c>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	607b      	str	r3, [r7, #4]
 8000d6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blinker_Pin;
 8000d6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Blinker_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	481d      	ldr	r0, [pc, #116]	; (8000df8 <MX_GPIO_Init+0x110>)
 8000d84:	f001 f940 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin|ENC_DATA_Pin;
 8000d88:	2306      	movs	r3, #6
 8000d8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4818      	ldr	r0, [pc, #96]	; (8000dfc <MX_GPIO_Init+0x114>)
 8000d9c:	f001 f934 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EncoderButton_Pin;
 8000da0:	2308      	movs	r3, #8
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EncoderButton_GPIO_Port, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4812      	ldr	r0, [pc, #72]	; (8000dfc <MX_GPIO_Init+0x114>)
 8000db4:	f001 f928 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin|PTT_Swtich_Pin
 8000db8:	f240 23cf 	movw	r3, #719	; 0x2cf
 8000dbc:	617b      	str	r3, [r7, #20]
                          |VOL_CLK_Pin|VOL_DATA_Pin|VOL_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc6:	f107 0314 	add.w	r3, r7, #20
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480c      	ldr	r0, [pc, #48]	; (8000e00 <MX_GPIO_Init+0x118>)
 8000dce:	f001 f91b 	bl	8002008 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000dd2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000dd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	4806      	ldr	r0, [pc, #24]	; (8000e00 <MX_GPIO_Init+0x118>)
 8000de8:	f001 f90e 	bl	8002008 <HAL_GPIO_Init>

}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	; 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020400 	.word	0x40020400

08000e04 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_I2C3_Init+0x50>)
 8000e0a:	4a13      	ldr	r2, [pc, #76]	; (8000e58 <MX_I2C3_Init+0x54>)
 8000e0c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_I2C3_Init+0x50>)
 8000e10:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <MX_I2C3_Init+0x58>)
 8000e12:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_I2C3_Init+0x50>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_I2C3_Init+0x50>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_I2C3_Init+0x50>)
 8000e22:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e26:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <MX_I2C3_Init+0x50>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_I2C3_Init+0x50>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <MX_I2C3_Init+0x50>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_I2C3_Init+0x50>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_I2C3_Init+0x50>)
 8000e42:	f001 fa97 	bl	8002374 <HAL_I2C_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e4c:	f000 fdd8 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000924 	.word	0x20000924
 8000e58:	40005c00 	.word	0x40005c00
 8000e5c:	000186a0 	.word	0x000186a0

08000e60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a29      	ldr	r2, [pc, #164]	; (8000f24 <HAL_I2C_MspInit+0xc4>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d14b      	bne.n	8000f1a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
 8000e86:	4b28      	ldr	r3, [pc, #160]	; (8000f28 <HAL_I2C_MspInit+0xc8>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a27      	ldr	r2, [pc, #156]	; (8000f28 <HAL_I2C_MspInit+0xc8>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <HAL_I2C_MspInit+0xc8>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <HAL_I2C_MspInit+0xc8>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a20      	ldr	r2, [pc, #128]	; (8000f28 <HAL_I2C_MspInit+0xc8>)
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b1e      	ldr	r3, [pc, #120]	; (8000f28 <HAL_I2C_MspInit+0xc8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ec0:	2312      	movs	r3, #18
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4815      	ldr	r0, [pc, #84]	; (8000f2c <HAL_I2C_MspInit+0xcc>)
 8000ed8:	f001 f896 	bl	8002008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000edc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee2:	2312      	movs	r3, #18
 8000ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eea:	2303      	movs	r3, #3
 8000eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8000eee:	2309      	movs	r3, #9
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <HAL_I2C_MspInit+0xd0>)
 8000efa:	f001 f885 	bl	8002008 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	60bb      	str	r3, [r7, #8]
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_I2C_MspInit+0xc8>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <HAL_I2C_MspInit+0xc8>)
 8000f08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_I2C_MspInit+0xc8>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	3728      	adds	r7, #40	; 0x28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40005c00 	.word	0x40005c00
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020400 	.word	0x40020400

08000f34 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <MX_I2S3_Init+0x54>)
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <MX_I2S3_Init+0x58>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000f3e:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <MX_I2S3_Init+0x54>)
 8000f40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f44:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <MX_I2S3_Init+0x54>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_I2S3_Init+0x54>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000f52:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <MX_I2S3_Init+0x54>)
 8000f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f58:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 8000f5a:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <MX_I2S3_Init+0x54>)
 8000f5c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000f60:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_I2S3_Init+0x54>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <MX_I2S3_Init+0x54>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_I2S3_Init+0x54>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <MX_I2S3_Init+0x54>)
 8000f76:	f001 fb41 	bl	80025fc <HAL_I2S_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8000f80:	f000 fd3e 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000978 	.word	0x20000978
 8000f8c:	40003c00 	.word	0x40003c00

08000f90 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b090      	sub	sp, #64	; 0x40
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
 8000fb8:	615a      	str	r2, [r3, #20]
  if(i2sHandle->Instance==SPI3)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a42      	ldr	r2, [pc, #264]	; (80010c8 <HAL_I2S_MspInit+0x138>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d17d      	bne.n	80010c0 <HAL_I2S_MspInit+0x130>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000fc8:	23c0      	movs	r3, #192	; 0xc0
 8000fca:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8000fcc:	2310      	movs	r3, #16
 8000fce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f003 feeb 	bl	8004db4 <HAL_RCCEx_PeriphCLKConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <HAL_I2S_MspInit+0x58>
    {
      Error_Handler();
 8000fe4:	f000 fd0c 	bl	8001a00 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	4b37      	ldr	r3, [pc, #220]	; (80010cc <HAL_I2S_MspInit+0x13c>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a36      	ldr	r2, [pc, #216]	; (80010cc <HAL_I2S_MspInit+0x13c>)
 8000ff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b34      	ldr	r3, [pc, #208]	; (80010cc <HAL_I2S_MspInit+0x13c>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <HAL_I2S_MspInit+0x13c>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	4a2f      	ldr	r2, [pc, #188]	; (80010cc <HAL_I2S_MspInit+0x13c>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6313      	str	r3, [r2, #48]	; 0x30
 8001014:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <HAL_I2S_MspInit+0x13c>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001020:	2300      	movs	r3, #0
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	4b29      	ldr	r3, [pc, #164]	; (80010cc <HAL_I2S_MspInit+0x13c>)
 8001026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001028:	4a28      	ldr	r2, [pc, #160]	; (80010cc <HAL_I2S_MspInit+0x13c>)
 800102a:	f043 0302 	orr.w	r3, r3, #2
 800102e:	6313      	str	r3, [r2, #48]	; 0x30
 8001030:	4b26      	ldr	r3, [pc, #152]	; (80010cc <HAL_I2S_MspInit+0x13c>)
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	f003 0302 	and.w	r3, r3, #2
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
    PB10     ------> I2S3_MCK
    PB12     ------> I2S3_CK
    PB4     ------> I2S3_ext_SD
    PB5     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800103c:	2310      	movs	r3, #16
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800104c:	2306      	movs	r3, #6
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001050:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001054:	4619      	mov	r1, r3
 8001056:	481e      	ldr	r0, [pc, #120]	; (80010d0 <HAL_I2S_MspInit+0x140>)
 8001058:	f000 ffd6 	bl	8002008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_5;
 800105c:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001062:	2302      	movs	r3, #2
 8001064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800106e:	2306      	movs	r3, #6
 8001070:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001076:	4619      	mov	r1, r3
 8001078:	4816      	ldr	r0, [pc, #88]	; (80010d4 <HAL_I2S_MspInit+0x144>)
 800107a:	f000 ffc5 	bl	8002008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800107e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108c:	2300      	movs	r3, #0
 800108e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001090:	2307      	movs	r3, #7
 8001092:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001098:	4619      	mov	r1, r3
 800109a:	480e      	ldr	r0, [pc, #56]	; (80010d4 <HAL_I2S_MspInit+0x144>)
 800109c:	f000 ffb4 	bl	8002008 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010a0:	2310      	movs	r3, #16
 80010a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_I2S3ext;
 80010b0:	2307      	movs	r3, #7
 80010b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b8:	4619      	mov	r1, r3
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <HAL_I2S_MspInit+0x144>)
 80010bc:	f000 ffa4 	bl	8002008 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80010c0:	bf00      	nop
 80010c2:	3740      	adds	r7, #64	; 0x40
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40003c00 	.word	0x40003c00
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	40020400 	.word	0x40020400

080010d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010dc:	4b17      	ldr	r3, [pc, #92]	; (800113c <MX_SPI1_Init+0x64>)
 80010de:	4a18      	ldr	r2, [pc, #96]	; (8001140 <MX_SPI1_Init+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <MX_SPI1_Init+0x64>)
 80010e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <MX_SPI1_Init+0x64>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010f0:	4b12      	ldr	r3, [pc, #72]	; (800113c <MX_SPI1_Init+0x64>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_SPI1_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010fc:	4b0f      	ldr	r3, [pc, #60]	; (800113c <MX_SPI1_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_SPI1_Init+0x64>)
 8001104:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001108:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_SPI1_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001110:	4b0a      	ldr	r3, [pc, #40]	; (800113c <MX_SPI1_Init+0x64>)
 8001112:	2200      	movs	r2, #0
 8001114:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_SPI1_Init+0x64>)
 8001118:	2200      	movs	r2, #0
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800111c:	4b07      	ldr	r3, [pc, #28]	; (800113c <MX_SPI1_Init+0x64>)
 800111e:	2200      	movs	r2, #0
 8001120:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001122:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_SPI1_Init+0x64>)
 8001124:	220a      	movs	r2, #10
 8001126:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_SPI1_Init+0x64>)
 800112a:	f003 ff93 	bl	8005054 <HAL_SPI_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001134:	f000 fc64 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}
 800113c:	200009c0 	.word	0x200009c0
 8001140:	40013000 	.word	0x40013000

08001144 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <HAL_SPI_MspInit+0x84>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d12c      	bne.n	80011c0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <HAL_SPI_MspInit+0x88>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116e:	4a17      	ldr	r2, [pc, #92]	; (80011cc <HAL_SPI_MspInit+0x88>)
 8001170:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001174:	6453      	str	r3, [r2, #68]	; 0x44
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <HAL_SPI_MspInit+0x88>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <HAL_SPI_MspInit+0x88>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a10      	ldr	r2, [pc, #64]	; (80011cc <HAL_SPI_MspInit+0x88>)
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <HAL_SPI_MspInit+0x88>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 800119e:	f248 03e0 	movw	r3, #32992	; 0x80e0
 80011a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b0:	2305      	movs	r3, #5
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <HAL_SPI_MspInit+0x8c>)
 80011bc:	f000 ff24 	bl	8002008 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011c0:	bf00      	nop
 80011c2:	3728      	adds	r7, #40	; 0x28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40013000 	.word	0x40013000
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40020000 	.word	0x40020000

080011d4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_USART1_UART_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 800120c:	f003 ffab 	bl	8005166 <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001216:	f000 fbf3 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000a18 	.word	0x20000a18
 8001224:	40011000 	.word	0x40011000

08001228 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a19      	ldr	r2, [pc, #100]	; (80012ac <HAL_UART_MspInit+0x84>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d12c      	bne.n	80012a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_UART_MspInit+0x88>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <HAL_UART_MspInit+0x88>)
 8001254:	f043 0310 	orr.w	r3, r3, #16
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_UART_MspInit+0x88>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_UART_MspInit+0x88>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <HAL_UART_MspInit+0x88>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_UART_MspInit+0x88>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001282:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001294:	2307      	movs	r3, #7
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <HAL_UART_MspInit+0x8c>)
 80012a0:	f000 feb2 	bl	8002008 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40011000 	.word	0x40011000
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020000 	.word	0x40020000

080012b8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012bc:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80012c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012c6:	2204      	movs	r2, #4
 80012c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012cc:	2202      	movs	r2, #2
 80012ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012d8:	2202      	movs	r2, #2
 80012da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80012e8:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	; (8001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80012fc:	f001 fe1e 	bl	8002f3c <HAL_PCD_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001306:	f000 fb7b 	bl	8001a00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000a5c 	.word	0x20000a5c

08001314 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001334:	d13a      	bne.n	80013ac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b1e      	ldr	r3, [pc, #120]	; (80013b4 <HAL_PCD_MspInit+0xa0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a1d      	ldr	r2, [pc, #116]	; (80013b4 <HAL_PCD_MspInit+0xa0>)
 8001340:	f043 0301 	orr.w	r3, r3, #1
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <HAL_PCD_MspInit+0xa0>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001352:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001364:	230a      	movs	r3, #10
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	4812      	ldr	r0, [pc, #72]	; (80013b8 <HAL_PCD_MspInit+0xa4>)
 8001370:	f000 fe4a 	bl	8002008 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <HAL_PCD_MspInit+0xa0>)
 8001376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001378:	4a0e      	ldr	r2, [pc, #56]	; (80013b4 <HAL_PCD_MspInit+0xa0>)
 800137a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800137e:	6353      	str	r3, [r2, #52]	; 0x34
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <HAL_PCD_MspInit+0xa0>)
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_PCD_MspInit+0xa0>)
 800138a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138e:	6453      	str	r3, [r2, #68]	; 0x44
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <HAL_PCD_MspInit+0xa0>)
 8001392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]

    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2100      	movs	r1, #0
 80013a0:	2043      	movs	r0, #67	; 0x43
 80013a2:	f000 fdfa 	bl	8001f9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80013a6:	2043      	movs	r0, #67	; 0x43
 80013a8:	f000 fe13 	bl	8001fd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80013ac:	bf00      	nop
 80013ae:	3728      	adds	r7, #40	; 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40020000 	.word	0x40020000

080013bc <uint8_toupper>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t uint8_toupper(uint8_t c){
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
	if (c >= 'a' && c <= 'z') {
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b60      	cmp	r3, #96	; 0x60
 80013ca:	d906      	bls.n	80013da <uint8_toupper+0x1e>
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	2b7a      	cmp	r3, #122	; 0x7a
 80013d0:	d803      	bhi.n	80013da <uint8_toupper+0x1e>
		c = c ^ 0x20;
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	f083 0320 	eor.w	r3, r3, #32
 80013d8:	71fb      	strb	r3, [r7, #7]
	}
	return c;
 80013da:	79fb      	ldrb	r3, [r7, #7]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <report_version>:
void report_version() {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	UartPrintf("F0304;");
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <report_version+0x10>)
 80013ee:	f000 faad 	bl	800194c <UartPrintf>
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	0800d1ac 	.word	0x0800d1ac

080013fc <set_reg_val>:


void set_reg_val(uint8_t *reg, uint8_t *str){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
	unsigned int value;
	if (isxdigit(*str) && isxdigit(*(str + 1)))
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	4a10      	ldr	r2, [pc, #64]	; (8001450 <set_reg_val+0x54>)
 800140e:	4413      	add	r3, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8001416:	2b00      	cmp	r3, #0
 8001418:	d015      	beq.n	8001446 <set_reg_val+0x4a>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	3301      	adds	r3, #1
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <set_reg_val+0x54>)
 8001424:	4413      	add	r3, r2
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00a      	beq.n	8001446 <set_reg_val+0x4a>
	{
		sscanf((char *)str, "%02X", &value);
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	461a      	mov	r2, r3
 8001436:	4907      	ldr	r1, [pc, #28]	; (8001454 <set_reg_val+0x58>)
 8001438:	6838      	ldr	r0, [r7, #0]
 800143a:	f00a fe81 	bl	800c140 <siscanf>
		*reg = (uint8_t) (value & 0xff);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	701a      	strb	r2, [r3, #0]
	}
}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	0800d3b2 	.word	0x0800d3b2
 8001454:	0800d1b4 	.word	0x0800d1b4

08001458 <cmd_proc>:

void cmd_proc(uint8_t *buffer, uint16_t size) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
	// handle commands
	uint8_t *cp = buffer;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	60fb      	str	r3, [r7, #12]
	uint16_t i = size;
 8001468:	887b      	ldrh	r3, [r7, #2]
 800146a:	817b      	strh	r3, [r7, #10]

	if (size == 0)
 800146c:	887b      	ldrh	r3, [r7, #2]
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 80e7 	beq.w	8001642 <cmd_proc+0x1ea>
		return;

	// uppercase everything
	while (i--) {
 8001474:	e00b      	b.n	800148e <cmd_proc+0x36>
		*cp = uint8_toupper(*cp);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ff9e 	bl	80013bc <uint8_toupper>
 8001480:	4603      	mov	r3, r0
 8001482:	461a      	mov	r2, r3
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	701a      	strb	r2, [r3, #0]
		cp++;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3301      	adds	r3, #1
 800148c:	60fb      	str	r3, [r7, #12]
	while (i--) {
 800148e:	897b      	ldrh	r3, [r7, #10]
 8001490:	1e5a      	subs	r2, r3, #1
 8001492:	817a      	strh	r2, [r7, #10]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1ee      	bne.n	8001476 <cmd_proc+0x1e>
	}

	switch (buffer[0]) {
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b5a      	cmp	r3, #90	; 0x5a
 800149e:	d00f      	beq.n	80014c0 <cmd_proc+0x68>
 80014a0:	2b5a      	cmp	r3, #90	; 0x5a
 80014a2:	f300 80d0 	bgt.w	8001646 <cmd_proc+0x1ee>
 80014a6:	2b46      	cmp	r3, #70	; 0x46
 80014a8:	d003      	beq.n	80014b2 <cmd_proc+0x5a>
 80014aa:	2b49      	cmp	r3, #73	; 0x49
 80014ac:	f000 8083 	beq.w	80015b6 <cmd_proc+0x15e>
		if (buffer[3] == '0') {
			HAL_GPIO_WritePin( LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
		}
		break;
	default:
		break;
 80014b0:	e0c9      	b.n	8001646 <cmd_proc+0x1ee>
		if (size != 2)
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	f040 80c8 	bne.w	800164a <cmd_proc+0x1f2>
		report_version();
 80014ba:	f7ff ff95 	bl	80013e8 <report_version>
		break;
 80014be:	e0cd      	b.n	800165c <cmd_proc+0x204>
		if (size < 3 || size > 5)
 80014c0:	887b      	ldrh	r3, [r7, #2]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	f240 80c3 	bls.w	800164e <cmd_proc+0x1f6>
 80014c8:	887b      	ldrh	r3, [r7, #2]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	f200 80bf 	bhi.w	800164e <cmd_proc+0x1f6>
		uint8_t is_set = (size == 5);
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	bf0c      	ite	eq
 80014d6:	2301      	moveq	r3, #1
 80014d8:	2300      	movne	r3, #0
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	727b      	strb	r3, [r7, #9]
		switch (buffer[1]) {
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3301      	adds	r3, #1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	3b43      	subs	r3, #67	; 0x43
 80014e6:	2b0f      	cmp	r3, #15
 80014e8:	f200 80b3 	bhi.w	8001652 <cmd_proc+0x1fa>
 80014ec:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <cmd_proc+0x9c>)
 80014ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f2:	bf00      	nop
 80014f4:	08001575 	.word	0x08001575
 80014f8:	08001653 	.word	0x08001653
 80014fc:	08001535 	.word	0x08001535
 8001500:	08001653 	.word	0x08001653
 8001504:	08001653 	.word	0x08001653
 8001508:	08001653 	.word	0x08001653
 800150c:	08001653 	.word	0x08001653
 8001510:	08001653 	.word	0x08001653
 8001514:	08001653 	.word	0x08001653
 8001518:	08001595 	.word	0x08001595
 800151c:	08001653 	.word	0x08001653
 8001520:	08001653 	.word	0x08001653
 8001524:	08001653 	.word	0x08001653
 8001528:	08001653 	.word	0x08001653
 800152c:	08001653 	.word	0x08001653
 8001530:	08001555 	.word	0x08001555
			if (is_set) {
 8001534:	7a7b      	ldrb	r3, [r7, #9]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <cmd_proc+0xee>
				set_reg_val((uint8_t*) &reg_e, &buffer[2]);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3302      	adds	r3, #2
 800153e:	4619      	mov	r1, r3
 8001540:	4848      	ldr	r0, [pc, #288]	; (8001664 <cmd_proc+0x20c>)
 8001542:	f7ff ff5b 	bl	80013fc <set_reg_val>
			UartPrintf("ZE%02X;", reg_e);
 8001546:	4b47      	ldr	r3, [pc, #284]	; (8001664 <cmd_proc+0x20c>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4619      	mov	r1, r3
 800154c:	4846      	ldr	r0, [pc, #280]	; (8001668 <cmd_proc+0x210>)
 800154e:	f000 f9fd 	bl	800194c <UartPrintf>
			break;
 8001552:	e02f      	b.n	80015b4 <cmd_proc+0x15c>
			if (is_set) {
 8001554:	7a7b      	ldrb	r3, [r7, #9]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d005      	beq.n	8001566 <cmd_proc+0x10e>
				set_reg_val((uint8_t*) &reg_r, &buffer[2]);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3302      	adds	r3, #2
 800155e:	4619      	mov	r1, r3
 8001560:	4842      	ldr	r0, [pc, #264]	; (800166c <cmd_proc+0x214>)
 8001562:	f7ff ff4b 	bl	80013fc <set_reg_val>
			UartPrintf("ZR%02X;", reg_r);
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <cmd_proc+0x214>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	4619      	mov	r1, r3
 800156c:	4840      	ldr	r0, [pc, #256]	; (8001670 <cmd_proc+0x218>)
 800156e:	f000 f9ed 	bl	800194c <UartPrintf>
			break;
 8001572:	e01f      	b.n	80015b4 <cmd_proc+0x15c>
			if (is_set) {
 8001574:	7a7b      	ldrb	r3, [r7, #9]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <cmd_proc+0x12e>
				set_reg_val((uint8_t*) &reg_c, &buffer[2]);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3302      	adds	r3, #2
 800157e:	4619      	mov	r1, r3
 8001580:	483c      	ldr	r0, [pc, #240]	; (8001674 <cmd_proc+0x21c>)
 8001582:	f7ff ff3b 	bl	80013fc <set_reg_val>
			UartPrintf("ZC%02X;", reg_c);
 8001586:	4b3b      	ldr	r3, [pc, #236]	; (8001674 <cmd_proc+0x21c>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	4619      	mov	r1, r3
 800158c:	483a      	ldr	r0, [pc, #232]	; (8001678 <cmd_proc+0x220>)
 800158e:	f000 f9dd 	bl	800194c <UartPrintf>
			break;
 8001592:	e00f      	b.n	80015b4 <cmd_proc+0x15c>
			if (is_set) {
 8001594:	7a7b      	ldrb	r3, [r7, #9]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d005      	beq.n	80015a6 <cmd_proc+0x14e>
				set_reg_val((uint8_t*) &reg_l, &buffer[2]);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	3302      	adds	r3, #2
 800159e:	4619      	mov	r1, r3
 80015a0:	4836      	ldr	r0, [pc, #216]	; (800167c <cmd_proc+0x224>)
 80015a2:	f7ff ff2b 	bl	80013fc <set_reg_val>
			UartPrintf("ZL%02X;", reg_l);
 80015a6:	4b35      	ldr	r3, [pc, #212]	; (800167c <cmd_proc+0x224>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	4619      	mov	r1, r3
 80015ac:	4834      	ldr	r0, [pc, #208]	; (8001680 <cmd_proc+0x228>)
 80015ae:	f000 f9cd 	bl	800194c <UartPrintf>
			break;
 80015b2:	bf00      	nop
		break;
 80015b4:	e04d      	b.n	8001652 <cmd_proc+0x1fa>
		if (size != 5)
 80015b6:	887b      	ldrh	r3, [r7, #2]
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d14c      	bne.n	8001656 <cmd_proc+0x1fe>
		if (buffer[1] == '1') {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	3301      	adds	r3, #1
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b31      	cmp	r3, #49	; 0x31
 80015c4:	d105      	bne.n	80015d2 <cmd_proc+0x17a>
			HAL_GPIO_WritePin( LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015cc:	482d      	ldr	r0, [pc, #180]	; (8001684 <cmd_proc+0x22c>)
 80015ce:	f000 feb7 	bl	8002340 <HAL_GPIO_WritePin>
		if (buffer[2] == '1') {
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3302      	adds	r3, #2
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b31      	cmp	r3, #49	; 0x31
 80015da:	d105      	bne.n	80015e8 <cmd_proc+0x190>
			HAL_GPIO_WritePin( LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80015dc:	2200      	movs	r2, #0
 80015de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e2:	4828      	ldr	r0, [pc, #160]	; (8001684 <cmd_proc+0x22c>)
 80015e4:	f000 feac 	bl	8002340 <HAL_GPIO_WritePin>
		if (buffer[3] == '1') {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3303      	adds	r3, #3
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b31      	cmp	r3, #49	; 0x31
 80015f0:	d105      	bne.n	80015fe <cmd_proc+0x1a6>
			HAL_GPIO_WritePin( LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80015f2:	2200      	movs	r2, #0
 80015f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f8:	4822      	ldr	r0, [pc, #136]	; (8001684 <cmd_proc+0x22c>)
 80015fa:	f000 fea1 	bl	8002340 <HAL_GPIO_WritePin>
		if (buffer[1] == '0') {
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3301      	adds	r3, #1
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	2b30      	cmp	r3, #48	; 0x30
 8001606:	d105      	bne.n	8001614 <cmd_proc+0x1bc>
			HAL_GPIO_WritePin( LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8001608:	2201      	movs	r2, #1
 800160a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160e:	481d      	ldr	r0, [pc, #116]	; (8001684 <cmd_proc+0x22c>)
 8001610:	f000 fe96 	bl	8002340 <HAL_GPIO_WritePin>
		if (buffer[2] == '0') {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	3302      	adds	r3, #2
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b30      	cmp	r3, #48	; 0x30
 800161c:	d105      	bne.n	800162a <cmd_proc+0x1d2>
			HAL_GPIO_WritePin( LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800161e:	2201      	movs	r2, #1
 8001620:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001624:	4817      	ldr	r0, [pc, #92]	; (8001684 <cmd_proc+0x22c>)
 8001626:	f000 fe8b 	bl	8002340 <HAL_GPIO_WritePin>
		if (buffer[3] == '0') {
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	3303      	adds	r3, #3
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b30      	cmp	r3, #48	; 0x30
 8001632:	d112      	bne.n	800165a <cmd_proc+0x202>
			HAL_GPIO_WritePin( LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800163a:	4812      	ldr	r0, [pc, #72]	; (8001684 <cmd_proc+0x22c>)
 800163c:	f000 fe80 	bl	8002340 <HAL_GPIO_WritePin>
		break;
 8001640:	e00b      	b.n	800165a <cmd_proc+0x202>
		return;
 8001642:	bf00      	nop
 8001644:	e00a      	b.n	800165c <cmd_proc+0x204>
		break;
 8001646:	bf00      	nop
 8001648:	e008      	b.n	800165c <cmd_proc+0x204>
			return;
 800164a:	bf00      	nop
 800164c:	e006      	b.n	800165c <cmd_proc+0x204>
			return;  //
 800164e:	bf00      	nop
 8001650:	e004      	b.n	800165c <cmd_proc+0x204>
		break;
 8001652:	bf00      	nop
 8001654:	e002      	b.n	800165c <cmd_proc+0x204>
			return;
 8001656:	bf00      	nop
 8001658:	e000      	b.n	800165c <cmd_proc+0x204>
		break;
 800165a:	bf00      	nop
	}
}
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000001 	.word	0x20000001
 8001668:	0800d1bc 	.word	0x0800d1bc
 800166c:	20000002 	.word	0x20000002
 8001670:	0800d1c4 	.word	0x0800d1c4
 8001674:	20000003 	.word	0x20000003
 8001678:	0800d1cc 	.word	0x0800d1cc
 800167c:	20000004 	.word	0x20000004
 8001680:	0800d1d4 	.word	0x0800d1d4
 8001684:	40020400 	.word	0x40020400

08001688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	f5ad 6d07 	sub.w	sp, sp, #2160	; 0x870
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t event[EVT_QWIDTH];
	uint8_t usb_data[USB_BUFFER_SIZE];
	uint8_t single_cmd[CMD_BUFFER_SIZE];
	RingBufferU8 rb1;
	uint8_t saw_terminator=0;
 8001690:	2300      	movs	r3, #0
 8001692:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f
	int len = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	f8c7 3868 	str.w	r3, [r7, #2152]	; 0x868

	RingBufferU8_init(&rb1, usb_data, USB_BUFFER_SIZE);
 800169c:	f507 6183 	add.w	r1, r7, #1048	; 0x418
 80016a0:	463b      	mov	r3, r7
 80016a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff f9e6 	bl	8000a78 <RingBufferU8_init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ac:	f000 fb04 	bl	8001cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b0:	f000 f8e0 	bl	8001874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b4:	f7ff fb18 	bl	8000ce8 <MX_GPIO_Init>
  MX_I2C3_Init();
 80016b8:	f7ff fba4 	bl	8000e04 <MX_I2C3_Init>
  MX_I2S3_Init();
 80016bc:	f7ff fc3a 	bl	8000f34 <MX_I2S3_Init>
  MX_SPI1_Init();
 80016c0:	f7ff fd0a 	bl	80010d8 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80016c4:	f7ff fd86 	bl	80011d4 <MX_USART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80016c8:	f7ff fdf6 	bl	80012b8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80016cc:	f005 fc5a 	bl	8006f84 <MX_USB_DEVICE_Init>

	// initialize the pushbutton handler with mask byte.
	PushButton_Init(0x0F);
 80016d0:	200f      	movs	r0, #15
 80016d2:	f7fe ffe5 	bl	80006a0 <PushButton_Init>
	report_version();
 80016d6:	f7ff fe87 	bl	80013e8 <report_version>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (Evt_DeQueue(event)) {
 80016da:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff98 	bl	8000614 <Evt_DeQueue>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 80a5 	beq.w	8001836 <main+0x1ae>
				switch (event[0]) {
 80016ec:	f897 3818 	ldrb.w	r3, [r7, #2072]	; 0x818
 80016f0:	2b40      	cmp	r3, #64	; 0x40
 80016f2:	d06b      	beq.n	80017cc <main+0x144>
 80016f4:	2b40      	cmp	r3, #64	; 0x40
 80016f6:	f300 80a2 	bgt.w	800183e <main+0x1b6>
 80016fa:	2b31      	cmp	r3, #49	; 0x31
 80016fc:	d016      	beq.n	800172c <main+0xa4>
 80016fe:	2b31      	cmp	r3, #49	; 0x31
 8001700:	f300 809d 	bgt.w	800183e <main+0x1b6>
 8001704:	2b10      	cmp	r3, #16
 8001706:	d020      	beq.n	800174a <main+0xc2>
 8001708:	2b30      	cmp	r3, #48	; 0x30
 800170a:	f040 8098 	bne.w	800183e <main+0x1b6>

				case EVT_ENCODER_UP:
					// event[1]: encoder_id
					// event[2]: encoder_delta
					//UartPrintf("\r\nEncoder UP %d: delta %d", event[1], event[2]);
					if (event[2] == 1) {
 800170e:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 8001712:	2b01      	cmp	r3, #1
 8001714:	d103      	bne.n	800171e <main+0x96>
						UartPrintf("U;");
 8001716:	484d      	ldr	r0, [pc, #308]	; (800184c <main+0x1c4>)
 8001718:	f000 f918 	bl	800194c <UartPrintf>
					} else {
						UartPrintf("U%02X;", event[2]);
					}
					break;
 800171c:	e094      	b.n	8001848 <main+0x1c0>
						UartPrintf("U%02X;", event[2]);
 800171e:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 8001722:	4619      	mov	r1, r3
 8001724:	484a      	ldr	r0, [pc, #296]	; (8001850 <main+0x1c8>)
 8001726:	f000 f911 	bl	800194c <UartPrintf>
					break;
 800172a:	e08d      	b.n	8001848 <main+0x1c0>

				case EVT_ENCODER_DOWN:
					// event[1]: encoder_id
					// event[2]: encoder_delta
					//UartPrintf("\r\nEncoder DOWN %d: delta %d", event[1], event[2]);
					if (event[2] == 1) {
 800172c:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 8001730:	2b01      	cmp	r3, #1
 8001732:	d103      	bne.n	800173c <main+0xb4>
						UartPrintf("D;");
 8001734:	4847      	ldr	r0, [pc, #284]	; (8001854 <main+0x1cc>)
 8001736:	f000 f909 	bl	800194c <UartPrintf>
					} else {
						UartPrintf("D%02X;",event[2]);
					}
					break;
 800173a:	e085      	b.n	8001848 <main+0x1c0>
						UartPrintf("D%02X;",event[2]);
 800173c:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 8001740:	4619      	mov	r1, r3
 8001742:	4845      	ldr	r0, [pc, #276]	; (8001858 <main+0x1d0>)
 8001744:	f000 f902 	bl	800194c <UartPrintf>
					break;
 8001748:	e07e      	b.n	8001848 <main+0x1c0>
				// event[1]: button id
				// event[2]: PBTN_SCLK, _DCLK, _TCLK, _LCLK, _DOWN, _ENDN

				case EVT_PBTN_INPUT:
					//UartPrintf("\r\nButton id %d, event %d\r\n", event[1], event[2]);
					if (event[2] == PBTN_SCLK) { // single click event
 800174a:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 800174e:	2b01      	cmp	r3, #1
 8001750:	d10e      	bne.n	8001770 <main+0xe8>
						if (event[1] == 0) {
 8001752:	f897 3819 	ldrb.w	r3, [r7, #2073]	; 0x819
 8001756:	2b00      	cmp	r3, #0
 8001758:	d103      	bne.n	8001762 <main+0xda>
							UartPrintf("S;");
 800175a:	4840      	ldr	r0, [pc, #256]	; (800185c <main+0x1d4>)
 800175c:	f000 f8f6 	bl	800194c <UartPrintf>
					} else if (event[2] == PBTN_ENDN) {
						//UartPrintf("\r\nButton %d: has been released.", event[1]);
						//PushButton_SetMode(PUSHBTN_MODE_CLICK, true);
						//UartPrintf("\r\n --> Switch to click mode.");
					}
					break;
 8001760:	e06f      	b.n	8001842 <main+0x1ba>
							UartPrintf("X%1dS;", event[1]);
 8001762:	f897 3819 	ldrb.w	r3, [r7, #2073]	; 0x819
 8001766:	4619      	mov	r1, r3
 8001768:	483d      	ldr	r0, [pc, #244]	; (8001860 <main+0x1d8>)
 800176a:	f000 f8ef 	bl	800194c <UartPrintf>
					break;
 800176e:	e068      	b.n	8001842 <main+0x1ba>
					} else if (event[2] == PBTN_LCLK) { // long click event
 8001770:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 8001774:	2b02      	cmp	r3, #2
 8001776:	d10e      	bne.n	8001796 <main+0x10e>
						if (event[1] == 0) {
 8001778:	f897 3819 	ldrb.w	r3, [r7, #2073]	; 0x819
 800177c:	2b00      	cmp	r3, #0
 800177e:	d103      	bne.n	8001788 <main+0x100>
							UartPrintf("L;");
 8001780:	4838      	ldr	r0, [pc, #224]	; (8001864 <main+0x1dc>)
 8001782:	f000 f8e3 	bl	800194c <UartPrintf>
					break;
 8001786:	e05c      	b.n	8001842 <main+0x1ba>
							UartPrintf("X%1dL;", event[1]);
 8001788:	f897 3819 	ldrb.w	r3, [r7, #2073]	; 0x819
 800178c:	4619      	mov	r1, r3
 800178e:	4836      	ldr	r0, [pc, #216]	; (8001868 <main+0x1e0>)
 8001790:	f000 f8dc 	bl	800194c <UartPrintf>
					break;
 8001794:	e055      	b.n	8001842 <main+0x1ba>
					} else if (event[2] == PBTN_DCLK) { // double click
 8001796:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 800179a:	2b03      	cmp	r3, #3
 800179c:	d10e      	bne.n	80017bc <main+0x134>
						if (event[1] == 0) {
 800179e:	f897 3819 	ldrb.w	r3, [r7, #2073]	; 0x819
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d103      	bne.n	80017ae <main+0x126>
							UartPrintf("C;");
 80017a6:	4831      	ldr	r0, [pc, #196]	; (800186c <main+0x1e4>)
 80017a8:	f000 f8d0 	bl	800194c <UartPrintf>
					break;
 80017ac:	e049      	b.n	8001842 <main+0x1ba>
							UartPrintf("X%1dC;", event[1]);
 80017ae:	f897 3819 	ldrb.w	r3, [r7, #2073]	; 0x819
 80017b2:	4619      	mov	r1, r3
 80017b4:	482e      	ldr	r0, [pc, #184]	; (8001870 <main+0x1e8>)
 80017b6:	f000 f8c9 	bl	800194c <UartPrintf>
					break;
 80017ba:	e042      	b.n	8001842 <main+0x1ba>
					} else if (event[2] == PBTN_TCLK) {
 80017bc:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	d03e      	beq.n	8001842 <main+0x1ba>
					} else if (event[2] == PBTN_DOWN) {
 80017c4:	f897 381a 	ldrb.w	r3, [r7, #2074]	; 0x81a
 80017c8:	2b05      	cmp	r3, #5
					break;
 80017ca:	e03a      	b.n	8001842 <main+0x1ba>

				case EVT_USB_DATA:
					// evt[1] = size
					// evt[16]..[16+USB_MAX_PAYLOAD] is data
					saw_terminator = RingBufferU8_write(&rb1, (const unsigned char *)&event[16], event[1], ';');
 80017cc:	f897 3819 	ldrb.w	r3, [r7, #2073]	; 0x819
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	f607 0318 	addw	r3, r7, #2072	; 0x818
 80017d6:	f103 0110 	add.w	r1, r3, #16
 80017da:	4638      	mov	r0, r7
 80017dc:	233b      	movs	r3, #59	; 0x3b
 80017de:	f7ff f9e6 	bl	8000bae <RingBufferU8_write>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f887 386f 	strb.w	r3, [r7, #2159]	; 0x86f

					// handle the commands
					if (saw_terminator) {
 80017e8:	f897 386f 	ldrb.w	r3, [r7, #2159]	; 0x86f
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d02a      	beq.n	8001846 <main+0x1be>
						while ((len = RingBufferU8_readUntil(&rb1, single_cmd, CMD_BUFFER_SIZE, ';'))) {
 80017f0:	e011      	b.n	8001816 <main+0x18e>
							single_cmd[len] = 0;
 80017f2:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80017f6:	f6a3 0258 	subw	r2, r3, #2136	; 0x858
 80017fa:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 80017fe:	4413      	add	r3, r2
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
							cmd_proc(single_cmd, len);
 8001804:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8001808:	b29a      	uxth	r2, r3
 800180a:	f107 0318 	add.w	r3, r7, #24
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff fe21 	bl	8001458 <cmd_proc>
						while ((len = RingBufferU8_readUntil(&rb1, single_cmd, CMD_BUFFER_SIZE, ';'))) {
 8001816:	f107 0118 	add.w	r1, r7, #24
 800181a:	4638      	mov	r0, r7
 800181c:	233b      	movs	r3, #59	; 0x3b
 800181e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001822:	f7ff f9f4 	bl	8000c0e <RingBufferU8_readUntil>
 8001826:	4603      	mov	r3, r0
 8001828:	f8c7 3868 	str.w	r3, [r7, #2152]	; 0x868
 800182c:	f8d7 3868 	ldr.w	r3, [r7, #2152]	; 0x868
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1de      	bne.n	80017f2 <main+0x16a>
							//UartPrintf("USB cmd: [%s]\n",single_cmd);
						}
					}
					break;
 8001834:	e007      	b.n	8001846 <main+0x1be>
				default:
					break;
				}
			} else {
				// delay here is recommended not to call Evt_DeQueue too frequently
				HAL_Delay(10);
 8001836:	200a      	movs	r0, #10
 8001838:	f000 fab0 	bl	8001d9c <HAL_Delay>
 800183c:	e74d      	b.n	80016da <main+0x52>
					break;
 800183e:	bf00      	nop
 8001840:	e74b      	b.n	80016da <main+0x52>
					break;
 8001842:	bf00      	nop
 8001844:	e749      	b.n	80016da <main+0x52>
					break;
 8001846:	bf00      	nop
		if (Evt_DeQueue(event)) {
 8001848:	e747      	b.n	80016da <main+0x52>
 800184a:	bf00      	nop
 800184c:	0800d1dc 	.word	0x0800d1dc
 8001850:	0800d1e0 	.word	0x0800d1e0
 8001854:	0800d1e8 	.word	0x0800d1e8
 8001858:	0800d1ec 	.word	0x0800d1ec
 800185c:	0800d1f4 	.word	0x0800d1f4
 8001860:	0800d1f8 	.word	0x0800d1f8
 8001864:	0800d200 	.word	0x0800d200
 8001868:	0800d204 	.word	0x0800d204
 800186c:	0800d20c 	.word	0x0800d20c
 8001870:	0800d210 	.word	0x0800d210

08001874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b094      	sub	sp, #80	; 0x50
 8001878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187a:	f107 0320 	add.w	r3, r7, #32
 800187e:	2230      	movs	r2, #48	; 0x30
 8001880:	2100      	movs	r1, #0
 8001882:	4618      	mov	r0, r3
 8001884:	f00a fb30 	bl	800bee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]
 8001890:	605a      	str	r2, [r3, #4]
 8001892:	609a      	str	r2, [r3, #8]
 8001894:	60da      	str	r2, [r3, #12]
 8001896:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001898:	2300      	movs	r3, #0
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	4b29      	ldr	r3, [pc, #164]	; (8001944 <SystemClock_Config+0xd0>)
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	4a28      	ldr	r2, [pc, #160]	; (8001944 <SystemClock_Config+0xd0>)
 80018a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a6:	6413      	str	r3, [r2, #64]	; 0x40
 80018a8:	4b26      	ldr	r3, [pc, #152]	; (8001944 <SystemClock_Config+0xd0>)
 80018aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b4:	2300      	movs	r3, #0
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	4b23      	ldr	r3, [pc, #140]	; (8001948 <SystemClock_Config+0xd4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a22      	ldr	r2, [pc, #136]	; (8001948 <SystemClock_Config+0xd4>)
 80018be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b20      	ldr	r3, [pc, #128]	; (8001948 <SystemClock_Config+0xd4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018cc:	607b      	str	r3, [r7, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80018d0:	2303      	movs	r3, #3
 80018d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018da:	2301      	movs	r3, #1
 80018dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018de:	2310      	movs	r3, #16
 80018e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e2:	2302      	movs	r3, #2
 80018e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80018ec:	230f      	movs	r3, #15
 80018ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80018f0:	2390      	movs	r3, #144	; 0x90
 80018f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018f4:	2302      	movs	r3, #2
 80018f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80018f8:	2305      	movs	r3, #5
 80018fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018fc:	f107 0320 	add.w	r3, r7, #32
 8001900:	4618      	mov	r0, r3
 8001902:	f002 fdff 	bl	8004504 <HAL_RCC_OscConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800190c:	f000 f878 	bl	8001a00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001910:	230f      	movs	r3, #15
 8001912:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800191c:	2300      	movs	r3, #0
 800191e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001920:	2300      	movs	r3, #0
 8001922:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f003 f862 	bl	80049f4 <HAL_RCC_ClockConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001936:	f000 f863 	bl	8001a00 <Error_Handler>
  }
}
 800193a:	bf00      	nop
 800193c:	3750      	adds	r7, #80	; 0x50
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40007000 	.word	0x40007000

0800194c <UartPrintf>:
/* USER CODE BEGIN 4 */
/** Printf() style UART output. Check the standard c library that comes
 * with the compiler for the scope of the format string it supports.
 */
void UartPrintf(const char *format, ...)
{
 800194c:	b40f      	push	{r0, r1, r2, r3}
 800194e:	b580      	push	{r7, lr}
 8001950:	b0a2      	sub	sp, #136	; 0x88
 8001952:	af00      	add	r7, sp, #0
	char buffer[128];
	uint16_t size;
	va_list args;

	va_start(args, format);
 8001954:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001958:	603b      	str	r3, [r7, #0]
	size = vsprintf(buffer, format, args);
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001962:	4618      	mov	r0, r3
 8001964:	f00a fc30 	bl	800c1c8 <vsiprintf>
 8001968:	4603      	mov	r3, r0
 800196a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
	va_end(args);
	CDC_Transmit(0,(uint8_t*)buffer, size);
 800196e:	f8b7 2086 	ldrh.w	r2, [r7, #134]	; 0x86
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	4619      	mov	r1, r3
 8001976:	2000      	movs	r0, #0
 8001978:	f005 fd5a 	bl	8007430 <CDC_Transmit>
	//HAL_UART_Transmit(&huart1, (uint8_t*)buffer, size, 1000);
}
 800197c:	bf00      	nop
 800197e:	3788      	adds	r7, #136	; 0x88
 8001980:	46bd      	mov	sp, r7
 8001982:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001986:	b004      	add	sp, #16
 8001988:	4770      	bx	lr
	...

0800198c <PushButton_Read>:
 * button is released.
 *
 * \return	pushbutton state packed in a uint8_t.
 */
uint8_t PushButton_Read()
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
	uint8_t buttons = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	71fb      	strb	r3, [r7, #7]
	// button pushed
	if (!HAL_GPIO_ReadPin(EncoderButton_GPIO_Port, EncoderButton_Pin))
 8001996:	2108      	movs	r1, #8
 8001998:	4817      	ldr	r0, [pc, #92]	; (80019f8 <PushButton_Read+0x6c>)
 800199a:	f000 fcb9 	bl	8002310 <HAL_GPIO_ReadPin>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d103      	bne.n	80019ac <PushButton_Read+0x20>
	{
		buttons |= 1;
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	71fb      	strb	r3, [r7, #7]
	}
	if (!HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin)) {
 80019ac:	2101      	movs	r1, #1
 80019ae:	4813      	ldr	r0, [pc, #76]	; (80019fc <PushButton_Read+0x70>)
 80019b0:	f000 fcae 	bl	8002310 <HAL_GPIO_ReadPin>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d103      	bne.n	80019c2 <PushButton_Read+0x36>
		buttons |= 2;
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f043 0302 	orr.w	r3, r3, #2
 80019c0:	71fb      	strb	r3, [r7, #7]
	}
	if (!HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin)) {
 80019c2:	2102      	movs	r1, #2
 80019c4:	480d      	ldr	r0, [pc, #52]	; (80019fc <PushButton_Read+0x70>)
 80019c6:	f000 fca3 	bl	8002310 <HAL_GPIO_ReadPin>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d103      	bne.n	80019d8 <PushButton_Read+0x4c>
		buttons |= 4;
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f043 0304 	orr.w	r3, r3, #4
 80019d6:	71fb      	strb	r3, [r7, #7]
	}
	if (!HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin)) {
 80019d8:	2104      	movs	r1, #4
 80019da:	4808      	ldr	r0, [pc, #32]	; (80019fc <PushButton_Read+0x70>)
 80019dc:	f000 fc98 	bl	8002310 <HAL_GPIO_ReadPin>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d103      	bne.n	80019ee <PushButton_Read+0x62>
		buttons |= 8;
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	f043 0308 	orr.w	r3, r3, #8
 80019ec:	71fb      	strb	r3, [r7, #7]
	}
	//if (buttons) {
	//	UartPrintf("Buttons! %02x",buttons);
	//}

	return buttons;
 80019ee:	79fb      	ldrb	r3, [r7, #7]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40020000 	.word	0x40020000
 80019fc:	40020400 	.word	0x40020400

08001a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a04:	b672      	cpsid	i
}
 8001a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <Error_Handler+0x8>
	...

08001a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	4a0f      	ldr	r2, [pc, #60]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a20:	6453      	str	r3, [r2, #68]	; 0x44
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	4a08      	ldr	r2, [pc, #32]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <HAL_MspInit+0x4c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800

08001a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a60:	e7fe      	b.n	8001a60 <NMI_Handler+0x4>

08001a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a66:	e7fe      	b.n	8001a66 <HardFault_Handler+0x4>

08001a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <MemManage_Handler+0x4>

08001a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <BusFault_Handler+0x4>

08001a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <UsageFault_Handler+0x4>

08001a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa8:	f000 f958 	bl	8001d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aac:	bf00      	nop
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <OTG_FS_IRQHandler+0x10>)
 8001ab6:	f001 fbca 	bl	800324e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000a5c 	.word	0x20000a5c

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	; (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f00a f9c0 	bl	800be78 <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20020000 	.word	0x20020000
 8001b24:	00000400 	.word	0x00000400
 8001b28:	20000f68 	.word	0x20000f68
 8001b2c:	20003c98 	.word	0x20003c98

08001b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <SystemInit+0x20>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <SystemInit+0x20>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b5a:	490e      	ldr	r1, [pc, #56]	; (8001b94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0b      	ldr	r2, [pc, #44]	; (8001b9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b70:	4c0b      	ldr	r4, [pc, #44]	; (8001ba0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b7e:	f7ff ffd7 	bl	8001b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b82:	f00a f97f 	bl	800be84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7ff fd7f 	bl	8001688 <main>
  bx  lr    
 8001b8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	200004d4 	.word	0x200004d4
  ldr r2, =_sidata
 8001b98:	0800d574 	.word	0x0800d574
  ldr r2, =_sbss
 8001b9c:	200004d4 	.word	0x200004d4
  ldr r4, =_ebss
 8001ba0:	20003c94 	.word	0x20003c94

08001ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC_IRQHandler>

08001ba6 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bae:	f3ef 8310 	mrs	r3, PRIMASK
 8001bb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bbe:	b672      	cpsid	i
}
 8001bc0:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001bc2:	f3bf 8f4f 	dsb	sy
}
 8001bc6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bc8:	f3bf 8f6f 	isb	sy
}
 8001bcc:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d104      	bne.n	8001bde <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
 8001bd8:	f7ff ff12 	bl	8001a00 <Error_Handler>
 8001bdc:	e7fe      	b.n	8001bdc <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	785b      	ldrb	r3, [r3, #1]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d103      	bne.n	8001bee <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	701a      	strb	r2, [r3, #0]
 8001bec:	e008      	b.n	8001c00 <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	785b      	ldrb	r3, [r3, #1]
 8001bf2:	2bff      	cmp	r3, #255	; 0xff
 8001bf4:	d104      	bne.n	8001c00 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf6:	b672      	cpsid	i
}
 8001bf8:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001bfa:	f7ff ff01 	bl	8001a00 <Error_Handler>
 8001bfe:	e7fe      	b.n	8001bfe <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	785b      	ldrb	r3, [r3, #1]
 8001c04:	3301      	adds	r3, #1
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	705a      	strb	r2, [r3, #1]
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d104      	bne.n	8001c2c <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c22:	b672      	cpsid	i
}
 8001c24:	bf00      	nop
 8001c26:	f7ff feeb 	bl	8001a00 <Error_Handler>
 8001c2a:	e7fe      	b.n	8001c2a <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	785b      	ldrb	r3, [r3, #1]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d104      	bne.n	8001c3e <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c34:	b672      	cpsid	i
}
 8001c36:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001c38:	f7ff fee2 	bl	8001a00 <Error_Handler>
 8001c3c:	e7fe      	b.n	8001c3c <stm32_lock_release+0x28>
  }
  lock->counter--;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	785b      	ldrb	r3, [r3, #1]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	785b      	ldrb	r3, [r3, #1]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d105      	bne.n	8001c5e <stm32_lock_release+0x4a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001c5a:	b662      	cpsie	i
}
 8001c5c:	bf00      	nop
  {
    __enable_irq();
  }
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d104      	bne.n	8001c7e <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c74:	b672      	cpsid	i
}
 8001c76:	bf00      	nop
 8001c78:	f7ff fec2 	bl	8001a00 <Error_Handler>
 8001c7c:	e7fe      	b.n	8001c7c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff90 	bl	8001ba6 <stm32_lock_acquire>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d104      	bne.n	8001ca6 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c9c:	b672      	cpsid	i
}
 8001c9e:	bf00      	nop
 8001ca0:	f7ff feae 	bl	8001a00 <Error_Handler>
 8001ca4:	e7fe      	b.n	8001ca4 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ffb3 	bl	8001c14 <stm32_lock_release>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_Init+0x40>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <HAL_Init+0x40>)
 8001cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_Init+0x40>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a0a      	ldr	r2, [pc, #40]	; (8001cf8 <HAL_Init+0x40>)
 8001cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd4:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <HAL_Init+0x40>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a07      	ldr	r2, [pc, #28]	; (8001cf8 <HAL_Init+0x40>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ce0:	2003      	movs	r0, #3
 8001ce2:	f000 f94f 	bl	8001f84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce6:	200f      	movs	r0, #15
 8001ce8:	f000 f808 	bl	8001cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cec:	f7ff fe8e 	bl	8001a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023c00 	.word	0x40023c00

08001cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_InitTick+0x54>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_InitTick+0x58>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f000 f967 	bl	8001fee <HAL_SYSTICK_Config>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e00e      	b.n	8001d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b0f      	cmp	r3, #15
 8001d2e:	d80a      	bhi.n	8001d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d30:	2200      	movs	r2, #0
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	f000 f92f 	bl	8001f9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d3c:	4a06      	ldr	r2, [pc, #24]	; (8001d58 <HAL_InitTick+0x5c>)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e000      	b.n	8001d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000008 	.word	0x20000008
 8001d54:	20000010 	.word	0x20000010
 8001d58:	2000000c 	.word	0x2000000c

08001d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_IncTick+0x20>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <HAL_IncTick+0x24>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	4a04      	ldr	r2, [pc, #16]	; (8001d80 <HAL_IncTick+0x24>)
 8001d6e:	6013      	str	r3, [r2, #0]
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	20000010 	.word	0x20000010
 8001d80:	20000f70 	.word	0x20000f70

08001d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return uwTick;
 8001d88:	4b03      	ldr	r3, [pc, #12]	; (8001d98 <HAL_GetTick+0x14>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000f70 	.word	0x20000f70

08001d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001da4:	f7ff ffee 	bl	8001d84 <HAL_GetTick>
 8001da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db4:	d005      	beq.n	8001dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_Delay+0x44>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001dc2:	bf00      	nop
 8001dc4:	f7ff ffde 	bl	8001d84 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d8f7      	bhi.n	8001dc4 <HAL_Delay+0x28>
  {
  }
}
 8001dd4:	bf00      	nop
 8001dd6:	bf00      	nop
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000010 	.word	0x20000010

08001de4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df4:	4b0c      	ldr	r3, [pc, #48]	; (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e00:	4013      	ands	r3, r2
 8001e02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e16:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <__NVIC_SetPriorityGrouping+0x44>)
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	60d3      	str	r3, [r2, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <__NVIC_GetPriorityGrouping+0x18>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 0307 	and.w	r3, r3, #7
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	db0b      	blt.n	8001e72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	f003 021f 	and.w	r2, r3, #31
 8001e60:	4907      	ldr	r1, [pc, #28]	; (8001e80 <__NVIC_EnableIRQ+0x38>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	095b      	lsrs	r3, r3, #5
 8001e68:	2001      	movs	r0, #1
 8001e6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000e100 	.word	0xe000e100

08001e84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	6039      	str	r1, [r7, #0]
 8001e8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	db0a      	blt.n	8001eae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	490c      	ldr	r1, [pc, #48]	; (8001ed0 <__NVIC_SetPriority+0x4c>)
 8001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea2:	0112      	lsls	r2, r2, #4
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eac:	e00a      	b.n	8001ec4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4908      	ldr	r1, [pc, #32]	; (8001ed4 <__NVIC_SetPriority+0x50>)
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	3b04      	subs	r3, #4
 8001ebc:	0112      	lsls	r2, r2, #4
 8001ebe:	b2d2      	uxtb	r2, r2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	761a      	strb	r2, [r3, #24]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	e000e100 	.word	0xe000e100
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f1c3 0307 	rsb	r3, r3, #7
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	bf28      	it	cs
 8001ef6:	2304      	movcs	r3, #4
 8001ef8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3304      	adds	r3, #4
 8001efe:	2b06      	cmp	r3, #6
 8001f00:	d902      	bls.n	8001f08 <NVIC_EncodePriority+0x30>
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3b03      	subs	r3, #3
 8001f06:	e000      	b.n	8001f0a <NVIC_EncodePriority+0x32>
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43da      	mvns	r2, r3
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	401a      	ands	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f20:	f04f 31ff 	mov.w	r1, #4294967295
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2a:	43d9      	mvns	r1, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	4313      	orrs	r3, r2
         );
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f50:	d301      	bcc.n	8001f56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00f      	b.n	8001f76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <SysTick_Config+0x40>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f5e:	210f      	movs	r1, #15
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	f7ff ff8e 	bl	8001e84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <SysTick_Config+0x40>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f6e:	4b04      	ldr	r3, [pc, #16]	; (8001f80 <SysTick_Config+0x40>)
 8001f70:	2207      	movs	r2, #7
 8001f72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	e000e010 	.word	0xe000e010

08001f84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff ff29 	bl	8001de4 <__NVIC_SetPriorityGrouping>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b086      	sub	sp, #24
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fac:	f7ff ff3e 	bl	8001e2c <__NVIC_GetPriorityGrouping>
 8001fb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	68b9      	ldr	r1, [r7, #8]
 8001fb6:	6978      	ldr	r0, [r7, #20]
 8001fb8:	f7ff ff8e 	bl	8001ed8 <NVIC_EncodePriority>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc2:	4611      	mov	r1, r2
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff5d 	bl	8001e84 <__NVIC_SetPriority>
}
 8001fca:	bf00      	nop
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	4603      	mov	r3, r0
 8001fda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff31 	bl	8001e48 <__NVIC_EnableIRQ>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff ffa2 	bl	8001f40 <SysTick_Config>
 8001ffc:	4603      	mov	r3, r0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002008:	b480      	push	{r7}
 800200a:	b089      	sub	sp, #36	; 0x24
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	e159      	b.n	80022d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002024:	2201      	movs	r2, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	429a      	cmp	r2, r3
 800203e:	f040 8148 	bne.w	80022d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b01      	cmp	r3, #1
 800204c:	d005      	beq.n	800205a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002056:	2b02      	cmp	r3, #2
 8002058:	d130      	bne.n	80020bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	2203      	movs	r2, #3
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002090:	2201      	movs	r2, #1
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 0201 	and.w	r2, r3, #1
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d017      	beq.n	80020f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	2203      	movs	r2, #3
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d123      	bne.n	800214c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	08da      	lsrs	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3208      	adds	r2, #8
 800210c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	220f      	movs	r2, #15
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	08da      	lsrs	r2, r3, #3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3208      	adds	r2, #8
 8002146:	69b9      	ldr	r1, [r7, #24]
 8002148:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	2203      	movs	r2, #3
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f003 0203 	and.w	r2, r3, #3
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4313      	orrs	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002188:	2b00      	cmp	r3, #0
 800218a:	f000 80a2 	beq.w	80022d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4b57      	ldr	r3, [pc, #348]	; (80022f0 <HAL_GPIO_Init+0x2e8>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4a56      	ldr	r2, [pc, #344]	; (80022f0 <HAL_GPIO_Init+0x2e8>)
 8002198:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800219c:	6453      	str	r3, [r2, #68]	; 0x44
 800219e:	4b54      	ldr	r3, [pc, #336]	; (80022f0 <HAL_GPIO_Init+0x2e8>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021aa:	4a52      	ldr	r2, [pc, #328]	; (80022f4 <HAL_GPIO_Init+0x2ec>)
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	3302      	adds	r3, #2
 80021b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	f003 0303 	and.w	r3, r3, #3
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	220f      	movs	r2, #15
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a49      	ldr	r2, [pc, #292]	; (80022f8 <HAL_GPIO_Init+0x2f0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d019      	beq.n	800220a <HAL_GPIO_Init+0x202>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a48      	ldr	r2, [pc, #288]	; (80022fc <HAL_GPIO_Init+0x2f4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d013      	beq.n	8002206 <HAL_GPIO_Init+0x1fe>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a47      	ldr	r2, [pc, #284]	; (8002300 <HAL_GPIO_Init+0x2f8>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00d      	beq.n	8002202 <HAL_GPIO_Init+0x1fa>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a46      	ldr	r2, [pc, #280]	; (8002304 <HAL_GPIO_Init+0x2fc>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d007      	beq.n	80021fe <HAL_GPIO_Init+0x1f6>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a45      	ldr	r2, [pc, #276]	; (8002308 <HAL_GPIO_Init+0x300>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d101      	bne.n	80021fa <HAL_GPIO_Init+0x1f2>
 80021f6:	2304      	movs	r3, #4
 80021f8:	e008      	b.n	800220c <HAL_GPIO_Init+0x204>
 80021fa:	2307      	movs	r3, #7
 80021fc:	e006      	b.n	800220c <HAL_GPIO_Init+0x204>
 80021fe:	2303      	movs	r3, #3
 8002200:	e004      	b.n	800220c <HAL_GPIO_Init+0x204>
 8002202:	2302      	movs	r3, #2
 8002204:	e002      	b.n	800220c <HAL_GPIO_Init+0x204>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_GPIO_Init+0x204>
 800220a:	2300      	movs	r3, #0
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	f002 0203 	and.w	r2, r2, #3
 8002212:	0092      	lsls	r2, r2, #2
 8002214:	4093      	lsls	r3, r2
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800221c:	4935      	ldr	r1, [pc, #212]	; (80022f4 <HAL_GPIO_Init+0x2ec>)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	3302      	adds	r3, #2
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800222a:	4b38      	ldr	r3, [pc, #224]	; (800230c <HAL_GPIO_Init+0x304>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800224e:	4a2f      	ldr	r2, [pc, #188]	; (800230c <HAL_GPIO_Init+0x304>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <HAL_GPIO_Init+0x304>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002278:	4a24      	ldr	r2, [pc, #144]	; (800230c <HAL_GPIO_Init+0x304>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800227e:	4b23      	ldr	r3, [pc, #140]	; (800230c <HAL_GPIO_Init+0x304>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022a2:	4a1a      	ldr	r2, [pc, #104]	; (800230c <HAL_GPIO_Init+0x304>)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022a8:	4b18      	ldr	r3, [pc, #96]	; (800230c <HAL_GPIO_Init+0x304>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022cc:	4a0f      	ldr	r2, [pc, #60]	; (800230c <HAL_GPIO_Init+0x304>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3301      	adds	r3, #1
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b0f      	cmp	r3, #15
 80022dc:	f67f aea2 	bls.w	8002024 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3724      	adds	r7, #36	; 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40013800 	.word	0x40013800
 80022f8:	40020000 	.word	0x40020000
 80022fc:	40020400 	.word	0x40020400
 8002300:	40020800 	.word	0x40020800
 8002304:	40020c00 	.word	0x40020c00
 8002308:	40021000 	.word	0x40021000
 800230c:	40013c00 	.word	0x40013c00

08002310 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002310:	b480      	push	{r7}
 8002312:	b085      	sub	sp, #20
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	460b      	mov	r3, r1
 800231a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002328:	2301      	movs	r3, #1
 800232a:	73fb      	strb	r3, [r7, #15]
 800232c:	e001      	b.n	8002332 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002332:	7bfb      	ldrb	r3, [r7, #15]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
 800234c:	4613      	mov	r3, r2
 800234e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002350:	787b      	ldrb	r3, [r7, #1]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800235c:	e003      	b.n	8002366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	041a      	lsls	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	619a      	str	r2, [r3, #24]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e12b      	b.n	80025de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe fd60 	bl	8000e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2224      	movs	r2, #36	; 0x24
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023d8:	f002 fcc4 	bl	8004d64 <HAL_RCC_GetPCLK1Freq>
 80023dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4a81      	ldr	r2, [pc, #516]	; (80025e8 <HAL_I2C_Init+0x274>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d807      	bhi.n	80023f8 <HAL_I2C_Init+0x84>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4a80      	ldr	r2, [pc, #512]	; (80025ec <HAL_I2C_Init+0x278>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	bf94      	ite	ls
 80023f0:	2301      	movls	r3, #1
 80023f2:	2300      	movhi	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	e006      	b.n	8002406 <HAL_I2C_Init+0x92>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a7d      	ldr	r2, [pc, #500]	; (80025f0 <HAL_I2C_Init+0x27c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	bf94      	ite	ls
 8002400:	2301      	movls	r3, #1
 8002402:	2300      	movhi	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0e7      	b.n	80025de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4a78      	ldr	r2, [pc, #480]	; (80025f4 <HAL_I2C_Init+0x280>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0c9b      	lsrs	r3, r3, #18
 8002418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a6a      	ldr	r2, [pc, #424]	; (80025e8 <HAL_I2C_Init+0x274>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d802      	bhi.n	8002448 <HAL_I2C_Init+0xd4>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	3301      	adds	r3, #1
 8002446:	e009      	b.n	800245c <HAL_I2C_Init+0xe8>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	4a69      	ldr	r2, [pc, #420]	; (80025f8 <HAL_I2C_Init+0x284>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	3301      	adds	r3, #1
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	430b      	orrs	r3, r1
 8002462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800246e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	495c      	ldr	r1, [pc, #368]	; (80025e8 <HAL_I2C_Init+0x274>)
 8002478:	428b      	cmp	r3, r1
 800247a:	d819      	bhi.n	80024b0 <HAL_I2C_Init+0x13c>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1e59      	subs	r1, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fbb1 f3f3 	udiv	r3, r1, r3
 800248a:	1c59      	adds	r1, r3, #1
 800248c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002490:	400b      	ands	r3, r1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_I2C_Init+0x138>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1e59      	subs	r1, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a4:	3301      	adds	r3, #1
 80024a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024aa:	e051      	b.n	8002550 <HAL_I2C_Init+0x1dc>
 80024ac:	2304      	movs	r3, #4
 80024ae:	e04f      	b.n	8002550 <HAL_I2C_Init+0x1dc>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d111      	bne.n	80024dc <HAL_I2C_Init+0x168>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1e58      	subs	r0, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	440b      	add	r3, r1
 80024c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ca:	3301      	adds	r3, #1
 80024cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e012      	b.n	8002502 <HAL_I2C_Init+0x18e>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1e58      	subs	r0, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	0099      	lsls	r1, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_Init+0x196>
 8002506:	2301      	movs	r3, #1
 8002508:	e022      	b.n	8002550 <HAL_I2C_Init+0x1dc>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10e      	bne.n	8002530 <HAL_I2C_Init+0x1bc>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1e58      	subs	r0, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6859      	ldr	r1, [r3, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	440b      	add	r3, r1
 8002520:	fbb0 f3f3 	udiv	r3, r0, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800252e:	e00f      	b.n	8002550 <HAL_I2C_Init+0x1dc>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1e58      	subs	r0, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	0099      	lsls	r1, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	fbb0 f3f3 	udiv	r3, r0, r3
 8002546:	3301      	adds	r3, #1
 8002548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	6809      	ldr	r1, [r1, #0]
 8002554:	4313      	orrs	r3, r2
 8002556:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800257e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6911      	ldr	r1, [r2, #16]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68d2      	ldr	r2, [r2, #12]
 800258a:	4311      	orrs	r1, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	430b      	orrs	r3, r1
 8002592:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	000186a0 	.word	0x000186a0
 80025ec:	001e847f 	.word	0x001e847f
 80025f0:	003d08ff 	.word	0x003d08ff
 80025f4:	431bde83 	.word	0x431bde83
 80025f8:	10624dd3 	.word	0x10624dd3

080025fc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e128      	b.n	8002860 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a90      	ldr	r2, [pc, #576]	; (8002868 <HAL_I2S_Init+0x26c>)
 8002626:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7fe fcb1 	bl	8000f90 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2202      	movs	r2, #2
 8002632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002644:	f023 030f 	bic.w	r3, r3, #15
 8002648:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2202      	movs	r2, #2
 8002650:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d060      	beq.n	800271c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d102      	bne.n	8002668 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002662:	2310      	movs	r3, #16
 8002664:	617b      	str	r3, [r7, #20]
 8002666:	e001      	b.n	800266c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002668:	2320      	movs	r3, #32
 800266a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	2b20      	cmp	r3, #32
 8002672:	d802      	bhi.n	800267a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	005b      	lsls	r3, r3, #1
 8002678:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800267a:	2001      	movs	r0, #1
 800267c:	f002 fc8a 	bl	8004f94 <HAL_RCCEx_GetPeriphCLKFreq>
 8002680:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800268a:	d125      	bne.n	80026d8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d010      	beq.n	80026b6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	fbb2 f2f3 	udiv	r2, r2, r3
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	461a      	mov	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b0:	3305      	adds	r3, #5
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	e01f      	b.n	80026f6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	461a      	mov	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d2:	3305      	adds	r3, #5
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	e00e      	b.n	80026f6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	461a      	mov	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f2:	3305      	adds	r3, #5
 80026f4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	4a5c      	ldr	r2, [pc, #368]	; (800286c <HAL_I2S_Init+0x270>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	08db      	lsrs	r3, r3, #3
 8002700:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	085b      	lsrs	r3, r3, #1
 8002712:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	61bb      	str	r3, [r7, #24]
 800271a:	e003      	b.n	8002724 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800271c:	2302      	movs	r3, #2
 800271e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d902      	bls.n	8002730 <HAL_I2S_Init+0x134>
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	2bff      	cmp	r3, #255	; 0xff
 800272e:	d907      	bls.n	8002740 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	f043 0210 	orr.w	r2, r3, #16
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e08f      	b.n	8002860 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	ea42 0103 	orr.w	r1, r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	69fa      	ldr	r2, [r7, #28]
 8002750:	430a      	orrs	r2, r1
 8002752:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800275e:	f023 030f 	bic.w	r3, r3, #15
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	6851      	ldr	r1, [r2, #4]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6892      	ldr	r2, [r2, #8]
 800276a:	4311      	orrs	r1, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	68d2      	ldr	r2, [r2, #12]
 8002770:	4311      	orrs	r1, r2
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6992      	ldr	r2, [r2, #24]
 8002776:	430a      	orrs	r2, r1
 8002778:	431a      	orrs	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002782:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d161      	bne.n	8002850 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a38      	ldr	r2, [pc, #224]	; (8002870 <HAL_I2S_Init+0x274>)
 8002790:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a37      	ldr	r2, [pc, #220]	; (8002874 <HAL_I2S_Init+0x278>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d101      	bne.n	80027a0 <HAL_I2S_Init+0x1a4>
 800279c:	4b36      	ldr	r3, [pc, #216]	; (8002878 <HAL_I2S_Init+0x27c>)
 800279e:	e001      	b.n	80027a4 <HAL_I2S_Init+0x1a8>
 80027a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	4932      	ldr	r1, [pc, #200]	; (8002874 <HAL_I2S_Init+0x278>)
 80027ac:	428a      	cmp	r2, r1
 80027ae:	d101      	bne.n	80027b4 <HAL_I2S_Init+0x1b8>
 80027b0:	4a31      	ldr	r2, [pc, #196]	; (8002878 <HAL_I2S_Init+0x27c>)
 80027b2:	e001      	b.n	80027b8 <HAL_I2S_Init+0x1bc>
 80027b4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80027b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027bc:	f023 030f 	bic.w	r3, r3, #15
 80027c0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2b      	ldr	r2, [pc, #172]	; (8002874 <HAL_I2S_Init+0x278>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d101      	bne.n	80027d0 <HAL_I2S_Init+0x1d4>
 80027cc:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <HAL_I2S_Init+0x27c>)
 80027ce:	e001      	b.n	80027d4 <HAL_I2S_Init+0x1d8>
 80027d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027d4:	2202      	movs	r2, #2
 80027d6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a25      	ldr	r2, [pc, #148]	; (8002874 <HAL_I2S_Init+0x278>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_I2S_Init+0x1ea>
 80027e2:	4b25      	ldr	r3, [pc, #148]	; (8002878 <HAL_I2S_Init+0x27c>)
 80027e4:	e001      	b.n	80027ea <HAL_I2S_Init+0x1ee>
 80027e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f6:	d003      	beq.n	8002800 <HAL_I2S_Init+0x204>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d103      	bne.n	8002808 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	e001      	b.n	800280c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002808:	2300      	movs	r3, #0
 800280a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002816:	4313      	orrs	r3, r2
 8002818:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002820:	4313      	orrs	r3, r2
 8002822:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800282a:	4313      	orrs	r3, r2
 800282c:	b29a      	uxth	r2, r3
 800282e:	897b      	ldrh	r3, [r7, #10]
 8002830:	4313      	orrs	r3, r2
 8002832:	b29b      	uxth	r3, r3
 8002834:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002838:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a0d      	ldr	r2, [pc, #52]	; (8002874 <HAL_I2S_Init+0x278>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d101      	bne.n	8002848 <HAL_I2S_Init+0x24c>
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <HAL_I2S_Init+0x27c>)
 8002846:	e001      	b.n	800284c <HAL_I2S_Init+0x250>
 8002848:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800284c:	897a      	ldrh	r2, [r7, #10]
 800284e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3720      	adds	r7, #32
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	08002973 	.word	0x08002973
 800286c:	cccccccd 	.word	0xcccccccd
 8002870:	08002a89 	.word	0x08002a89
 8002874:	40003800 	.word	0x40003800
 8002878:	40003400 	.word	0x40003400

0800287c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	881a      	ldrh	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	1c9a      	adds	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10e      	bne.n	800290c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	685a      	ldr	r2, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028fc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ffb8 	bl	800287c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800290c:	bf00      	nop
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002926:	b292      	uxth	r2, r2
 8002928:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	1c9a      	adds	r2, r3, #2
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002938:	b29b      	uxth	r3, r3
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002946:	b29b      	uxth	r3, r3
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10e      	bne.n	800296a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800295a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff ff93 	bl	8002890 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b086      	sub	sp, #24
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b04      	cmp	r3, #4
 800298c:	d13a      	bne.n	8002a04 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b01      	cmp	r3, #1
 8002996:	d109      	bne.n	80029ac <I2S_IRQHandler+0x3a>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a2:	2b40      	cmp	r3, #64	; 0x40
 80029a4:	d102      	bne.n	80029ac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f7ff ffb4 	bl	8002914 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b2:	2b40      	cmp	r3, #64	; 0x40
 80029b4:	d126      	bne.n	8002a04 <I2S_IRQHandler+0x92>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0320 	and.w	r3, r3, #32
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	d11f      	bne.n	8002a04 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029d4:	2300      	movs	r3, #0
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f043 0202 	orr.w	r2, r3, #2
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7ff ff50 	bl	80028a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d136      	bne.n	8002a7e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d109      	bne.n	8002a2e <I2S_IRQHandler+0xbc>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a24:	2b80      	cmp	r3, #128	; 0x80
 8002a26:	d102      	bne.n	8002a2e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f7ff ff45 	bl	80028b8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d122      	bne.n	8002a7e <I2S_IRQHandler+0x10c>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	d11b      	bne.n	8002a7e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	685a      	ldr	r2, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a54:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a56:	2300      	movs	r3, #0
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a70:	f043 0204 	orr.w	r2, r3, #4
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ff13 	bl	80028a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a92      	ldr	r2, [pc, #584]	; (8002ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002aa2:	4b92      	ldr	r3, [pc, #584]	; (8002cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002aa4:	e001      	b.n	8002aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002aa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a8b      	ldr	r2, [pc, #556]	; (8002ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d101      	bne.n	8002ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002ac0:	4b8a      	ldr	r3, [pc, #552]	; (8002cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ac2:	e001      	b.n	8002ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002ac4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ad4:	d004      	beq.n	8002ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	f040 8099 	bne.w	8002c12 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d107      	bne.n	8002afa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d002      	beq.n	8002afa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f925 	bl	8002d44 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002afa:	69bb      	ldr	r3, [r7, #24]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d107      	bne.n	8002b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d002      	beq.n	8002b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f9c8 	bl	8002ea4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d13a      	bne.n	8002b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d035      	beq.n	8002b94 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a6e      	ldr	r2, [pc, #440]	; (8002ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d101      	bne.n	8002b36 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002b32:	4b6e      	ldr	r3, [pc, #440]	; (8002cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b34:	e001      	b.n	8002b3a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002b36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4969      	ldr	r1, [pc, #420]	; (8002ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002b42:	428b      	cmp	r3, r1
 8002b44:	d101      	bne.n	8002b4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002b46:	4b69      	ldr	r3, [pc, #420]	; (8002cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002b48:	e001      	b.n	8002b4e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002b4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b4e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b52:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b62:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	f043 0202 	orr.w	r2, r3, #2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff fe88 	bl	80028a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0308 	and.w	r3, r3, #8
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	f040 80c3 	bne.w	8002d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 80bd 	beq.w	8002d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a49      	ldr	r2, [pc, #292]	; (8002ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d101      	bne.n	8002bca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002bc6:	4b49      	ldr	r3, [pc, #292]	; (8002cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bc8:	e001      	b.n	8002bce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002bca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4944      	ldr	r1, [pc, #272]	; (8002ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002bd6:	428b      	cmp	r3, r1
 8002bd8:	d101      	bne.n	8002bde <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002bda:	4b44      	ldr	r3, [pc, #272]	; (8002cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002bdc:	e001      	b.n	8002be2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002bde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002be2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002be6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c02:	f043 0204 	orr.w	r2, r3, #4
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff fe4a 	bl	80028a4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c10:	e089      	b.n	8002d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d107      	bne.n	8002c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d002      	beq.n	8002c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f8be 	bl	8002da8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d107      	bne.n	8002c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f8fd 	bl	8002e40 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4c:	2b40      	cmp	r3, #64	; 0x40
 8002c4e:	d12f      	bne.n	8002cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d02a      	beq.n	8002cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c68:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1e      	ldr	r2, [pc, #120]	; (8002ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d101      	bne.n	8002c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002c74:	4b1d      	ldr	r3, [pc, #116]	; (8002cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c76:	e001      	b.n	8002c7c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002c78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4919      	ldr	r1, [pc, #100]	; (8002ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002c84:	428b      	cmp	r3, r1
 8002c86:	d101      	bne.n	8002c8c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002c88:	4b18      	ldr	r3, [pc, #96]	; (8002cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002c8a:	e001      	b.n	8002c90 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002c8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c94:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	f043 0202 	orr.w	r2, r3, #2
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff fdfa 	bl	80028a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b08      	cmp	r3, #8
 8002cb8:	d136      	bne.n	8002d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d031      	beq.n	8002d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a07      	ldr	r2, [pc, #28]	; (8002ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d101      	bne.n	8002cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002cce:	4b07      	ldr	r3, [pc, #28]	; (8002cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002cd0:	e001      	b.n	8002cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002cd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4902      	ldr	r1, [pc, #8]	; (8002ce8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002cde:	428b      	cmp	r3, r1
 8002ce0:	d106      	bne.n	8002cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002ce2:	4b02      	ldr	r3, [pc, #8]	; (8002cec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ce4:	e006      	b.n	8002cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002ce6:	bf00      	nop
 8002ce8:	40003800 	.word	0x40003800
 8002cec:	40003400 	.word	0x40003400
 8002cf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cf4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cf8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d08:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f043 0204 	orr.w	r2, r3, #4
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7ff fdc0 	bl	80028a4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d24:	e000      	b.n	8002d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d26:	bf00      	nop
}
 8002d28:	bf00      	nop
 8002d2a:	3720      	adds	r7, #32
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	1c99      	adds	r1, r3, #2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6251      	str	r1, [r2, #36]	; 0x24
 8002d56:	881a      	ldrh	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d113      	bne.n	8002d9e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002d84:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d106      	bne.n	8002d9e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ffc9 	bl	8002d30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	1c99      	adds	r1, r3, #2
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6251      	str	r1, [r2, #36]	; 0x24
 8002dba:	8819      	ldrh	r1, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a1d      	ldr	r2, [pc, #116]	; (8002e38 <I2SEx_TxISR_I2SExt+0x90>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <I2SEx_TxISR_I2SExt+0x22>
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <I2SEx_TxISR_I2SExt+0x94>)
 8002dc8:	e001      	b.n	8002dce <I2SEx_TxISR_I2SExt+0x26>
 8002dca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dce:	460a      	mov	r2, r1
 8002dd0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d121      	bne.n	8002e2e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <I2SEx_TxISR_I2SExt+0x90>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d101      	bne.n	8002df8 <I2SEx_TxISR_I2SExt+0x50>
 8002df4:	4b11      	ldr	r3, [pc, #68]	; (8002e3c <I2SEx_TxISR_I2SExt+0x94>)
 8002df6:	e001      	b.n	8002dfc <I2SEx_TxISR_I2SExt+0x54>
 8002df8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	490d      	ldr	r1, [pc, #52]	; (8002e38 <I2SEx_TxISR_I2SExt+0x90>)
 8002e04:	428b      	cmp	r3, r1
 8002e06:	d101      	bne.n	8002e0c <I2SEx_TxISR_I2SExt+0x64>
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <I2SEx_TxISR_I2SExt+0x94>)
 8002e0a:	e001      	b.n	8002e10 <I2SEx_TxISR_I2SExt+0x68>
 8002e0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e10:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e14:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d106      	bne.n	8002e2e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff ff81 	bl	8002d30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40003800 	.word	0x40003800
 8002e3c:	40003400 	.word	0x40003400

08002e40 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68d8      	ldr	r0, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e52:	1c99      	adds	r1, r3, #2
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002e58:	b282      	uxth	r2, r0
 8002e5a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	3b01      	subs	r3, #1
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d113      	bne.n	8002e9c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e82:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d106      	bne.n	8002e9c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff ff4a 	bl	8002d30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a20      	ldr	r2, [pc, #128]	; (8002f34 <I2SEx_RxISR_I2SExt+0x90>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d101      	bne.n	8002eba <I2SEx_RxISR_I2SExt+0x16>
 8002eb6:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <I2SEx_RxISR_I2SExt+0x94>)
 8002eb8:	e001      	b.n	8002ebe <I2SEx_RxISR_I2SExt+0x1a>
 8002eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ebe:	68d8      	ldr	r0, [r3, #12]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	1c99      	adds	r1, r3, #2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002eca:	b282      	uxth	r2, r0
 8002ecc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29a      	uxth	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d121      	bne.n	8002f2a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <I2SEx_RxISR_I2SExt+0x90>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <I2SEx_RxISR_I2SExt+0x50>
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <I2SEx_RxISR_I2SExt+0x94>)
 8002ef2:	e001      	b.n	8002ef8 <I2SEx_RxISR_I2SExt+0x54>
 8002ef4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ef8:	685a      	ldr	r2, [r3, #4]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	490d      	ldr	r1, [pc, #52]	; (8002f34 <I2SEx_RxISR_I2SExt+0x90>)
 8002f00:	428b      	cmp	r3, r1
 8002f02:	d101      	bne.n	8002f08 <I2SEx_RxISR_I2SExt+0x64>
 8002f04:	4b0c      	ldr	r3, [pc, #48]	; (8002f38 <I2SEx_RxISR_I2SExt+0x94>)
 8002f06:	e001      	b.n	8002f0c <I2SEx_RxISR_I2SExt+0x68>
 8002f08:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f10:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d106      	bne.n	8002f2a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff03 	bl	8002d30 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40003800 	.word	0x40003800
 8002f38:	40003400 	.word	0x40003400

08002f3c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f3e:	b08f      	sub	sp, #60	; 0x3c
 8002f40:	af0a      	add	r7, sp, #40	; 0x28
 8002f42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e10f      	b.n	800316e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d106      	bne.n	8002f6e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7fe f9d3 	bl	8001314 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2203      	movs	r2, #3
 8002f72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2200      	movs	r2, #0
 8002f86:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f002 fcc0 	bl	8005912 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	687e      	ldr	r6, [r7, #4]
 8002f9a:	466d      	mov	r5, sp
 8002f9c:	f106 0410 	add.w	r4, r6, #16
 8002fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002fa6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002fa8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002fac:	e885 0003 	stmia.w	r5, {r0, r1}
 8002fb0:	1d33      	adds	r3, r6, #4
 8002fb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fb4:	6838      	ldr	r0, [r7, #0]
 8002fb6:	f002 fb97 	bl	80056e8 <USB_CoreInit>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e0d0      	b.n	800316e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f002 fcae 	bl	8005934 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fd8:	2300      	movs	r3, #0
 8002fda:	73fb      	strb	r3, [r7, #15]
 8002fdc:	e04a      	b.n	8003074 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002fde:	7bfa      	ldrb	r2, [r7, #15]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	333d      	adds	r3, #61	; 0x3d
 8002fee:	2201      	movs	r2, #1
 8002ff0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ff2:	7bfa      	ldrb	r2, [r7, #15]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	333c      	adds	r3, #60	; 0x3c
 8003002:	7bfa      	ldrb	r2, [r7, #15]
 8003004:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003006:	7bfa      	ldrb	r2, [r7, #15]
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	b298      	uxth	r0, r3
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	3344      	adds	r3, #68	; 0x44
 800301a:	4602      	mov	r2, r0
 800301c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800301e:	7bfa      	ldrb	r2, [r7, #15]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	3340      	adds	r3, #64	; 0x40
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003032:	7bfa      	ldrb	r2, [r7, #15]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3348      	adds	r3, #72	; 0x48
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003046:	7bfa      	ldrb	r2, [r7, #15]
 8003048:	6879      	ldr	r1, [r7, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	440b      	add	r3, r1
 8003054:	334c      	adds	r3, #76	; 0x4c
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	3354      	adds	r3, #84	; 0x54
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	3301      	adds	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]
 8003074:	7bfa      	ldrb	r2, [r7, #15]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	d3af      	bcc.n	8002fde <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800307e:	2300      	movs	r3, #0
 8003080:	73fb      	strb	r3, [r7, #15]
 8003082:	e044      	b.n	800310e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003084:	7bfa      	ldrb	r2, [r7, #15]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800309a:	7bfa      	ldrb	r2, [r7, #15]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80030ac:	7bfa      	ldrb	r2, [r7, #15]
 80030ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80030b0:	7bfa      	ldrb	r2, [r7, #15]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80030dc:	7bfa      	ldrb	r2, [r7, #15]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4413      	add	r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80030ee:	2200      	movs	r2, #0
 80030f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80030f2:	7bfa      	ldrb	r2, [r7, #15]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003108:	7bfb      	ldrb	r3, [r7, #15]
 800310a:	3301      	adds	r3, #1
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	7bfa      	ldrb	r2, [r7, #15]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	d3b5      	bcc.n	8003084 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	603b      	str	r3, [r7, #0]
 800311e:	687e      	ldr	r6, [r7, #4]
 8003120:	466d      	mov	r5, sp
 8003122:	f106 0410 	add.w	r4, r6, #16
 8003126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800312a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800312c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800312e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003132:	e885 0003 	stmia.w	r5, {r0, r1}
 8003136:	1d33      	adds	r3, r6, #4
 8003138:	cb0e      	ldmia	r3, {r1, r2, r3}
 800313a:	6838      	ldr	r0, [r7, #0]
 800313c:	f002 fc46 	bl	80059cc <USB_DevInit>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2202      	movs	r2, #2
 800314a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e00d      	b.n	800316e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f003 fd95 	bl	8006c96 <USB_DevDisconnect>

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003176 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_PCD_Start+0x1c>
 800318e:	2302      	movs	r3, #2
 8003190:	e020      	b.n	80031d4 <HAL_PCD_Start+0x5e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d109      	bne.n	80031b6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d005      	beq.n	80031b6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f002 fb98 	bl	80058f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f003 fd45 	bl	8006c54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_PCD_Stop+0x1c>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e026      	b.n	8003246 <HAL_PCD_Stop+0x6a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_DISABLE(hpcd);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f002 fb84 	bl	8005912 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f003 fd41 	bl	8006c96 <USB_DevDisconnect>

  (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2110      	movs	r1, #16
 800321a:	4618      	mov	r0, r3
 800321c:	f002 fd3a 	bl	8005c94 <USB_FlushTxFifo>

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	2b01      	cmp	r3, #1
 8003226:	d109      	bne.n	800323c <HAL_PCD_Stop+0x60>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800322c:	2b01      	cmp	r3, #1
 800322e:	d005      	beq.n	800323c <HAL_PCD_Stop+0x60>
  {
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_UNLOCK(hpcd);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800324e:	b590      	push	{r4, r7, lr}
 8003250:	b08d      	sub	sp, #52	; 0x34
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f003 fdca 	bl	8006dfe <USB_GetMode>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	f040 848a 	bne.w	8003b86 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f003 fd2e 	bl	8006cd8 <USB_ReadInterrupts>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8480 	beq.w	8003b84 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	0a1b      	lsrs	r3, r3, #8
 800328e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f003 fd1b 	bl	8006cd8 <USB_ReadInterrupts>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d107      	bne.n	80032bc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	695a      	ldr	r2, [r3, #20]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f002 0202 	and.w	r2, r2, #2
 80032ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f003 fd09 	bl	8006cd8 <USB_ReadInterrupts>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	2b10      	cmp	r3, #16
 80032ce:	d161      	bne.n	8003394 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0210 	bic.w	r2, r2, #16
 80032de:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f003 020f 	and.w	r2, r3, #15
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4413      	add	r3, r2
 80032fc:	3304      	adds	r3, #4
 80032fe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	0c5b      	lsrs	r3, r3, #17
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	2b02      	cmp	r3, #2
 800330a:	d124      	bne.n	8003356 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003312:	4013      	ands	r3, r2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d035      	beq.n	8003384 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	091b      	lsrs	r3, r3, #4
 8003320:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003322:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003326:	b29b      	uxth	r3, r3
 8003328:	461a      	mov	r2, r3
 800332a:	6a38      	ldr	r0, [r7, #32]
 800332c:	f003 fb40 	bl	80069b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	691a      	ldr	r2, [r3, #16]
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800333c:	441a      	add	r2, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	6a1a      	ldr	r2, [r3, #32]
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	091b      	lsrs	r3, r3, #4
 800334a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800334e:	441a      	add	r2, r3
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	621a      	str	r2, [r3, #32]
 8003354:	e016      	b.n	8003384 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	0c5b      	lsrs	r3, r3, #17
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	2b06      	cmp	r3, #6
 8003360:	d110      	bne.n	8003384 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003368:	2208      	movs	r2, #8
 800336a:	4619      	mov	r1, r3
 800336c:	6a38      	ldr	r0, [r7, #32]
 800336e:	f003 fb1f 	bl	80069b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	6a1a      	ldr	r2, [r3, #32]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	091b      	lsrs	r3, r3, #4
 800337a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800337e:	441a      	add	r2, r3
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699a      	ldr	r2, [r3, #24]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 0210 	orr.w	r2, r2, #16
 8003392:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f003 fc9d 	bl	8006cd8 <USB_ReadInterrupts>
 800339e:	4603      	mov	r3, r0
 80033a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80033a8:	f040 80a7 	bne.w	80034fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80033ac:	2300      	movs	r3, #0
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f003 fca2 	bl	8006cfe <USB_ReadDevAllOutEpInterrupt>
 80033ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80033bc:	e099      	b.n	80034f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 808e 	beq.w	80034e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d0:	b2d2      	uxtb	r2, r2
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f003 fcc6 	bl	8006d66 <USB_ReadDevOutEPInterrupt>
 80033da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00c      	beq.n	8003400 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033f2:	461a      	mov	r2, r3
 80033f4:	2301      	movs	r3, #1
 80033f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fef0 	bl	80041e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00c      	beq.n	8003424 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	015a      	lsls	r2, r3, #5
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	4413      	add	r3, r2
 8003412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003416:	461a      	mov	r2, r3
 8003418:	2308      	movs	r3, #8
 800341a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800341c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 ffc6 	bl	80043b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	2b00      	cmp	r3, #0
 800342c:	d008      	beq.n	8003440 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343a:	461a      	mov	r2, r3
 800343c:	2310      	movs	r3, #16
 800343e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d030      	beq.n	80034ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003452:	2b80      	cmp	r3, #128	; 0x80
 8003454:	d109      	bne.n	800346a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003464:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003468:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800346a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	3304      	adds	r3, #4
 800347e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	78db      	ldrb	r3, [r3, #3]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d108      	bne.n	800349a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2200      	movs	r2, #0
 800348c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	b2db      	uxtb	r3, r3
 8003492:	4619      	mov	r1, r3
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f008 faad 	bl	800b9f4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a6:	461a      	mov	r2, r3
 80034a8:	2302      	movs	r3, #2
 80034aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b8:	015a      	lsls	r2, r3, #5
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	4413      	add	r3, r2
 80034be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c2:	461a      	mov	r2, r3
 80034c4:	2320      	movs	r3, #32
 80034c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	015a      	lsls	r2, r3, #5
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	4413      	add	r3, r2
 80034da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034de:	461a      	mov	r2, r3
 80034e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	3301      	adds	r3, #1
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ee:	085b      	lsrs	r3, r3, #1
 80034f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f47f af62 	bne.w	80033be <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f003 fbea 	bl	8006cd8 <USB_ReadInterrupts>
 8003504:	4603      	mov	r3, r0
 8003506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800350a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800350e:	f040 80db 	bne.w	80036c8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f003 fc0b 	bl	8006d32 <USB_ReadDevAllInEpInterrupt>
 800351c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003522:	e0cd      	b.n	80036c0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	f000 80c2 	beq.w	80036b4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	4611      	mov	r1, r2
 800353a:	4618      	mov	r0, r3
 800353c:	f003 fc31 	bl	8006da2 <USB_ReadDevInEPInterrupt>
 8003540:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d057      	beq.n	80035fc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f003 030f 	and.w	r3, r3, #15
 8003552:	2201      	movs	r2, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	43db      	mvns	r3, r3
 8003566:	69f9      	ldr	r1, [r7, #28]
 8003568:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800356c:	4013      	ands	r3, r2
 800356e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357c:	461a      	mov	r2, r3
 800357e:	2301      	movs	r3, #1
 8003580:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d132      	bne.n	80035f0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800358a:	6879      	ldr	r1, [r7, #4]
 800358c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800358e:	4613      	mov	r3, r2
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	4413      	add	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	440b      	add	r3, r1
 8003598:	334c      	adds	r3, #76	; 0x4c
 800359a:	6819      	ldr	r1, [r3, #0]
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4403      	add	r3, r0
 80035aa:	3348      	adds	r3, #72	; 0x48
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4419      	add	r1, r3
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b4:	4613      	mov	r3, r2
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	4413      	add	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4403      	add	r3, r0
 80035be:	334c      	adds	r3, #76	; 0x4c
 80035c0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d113      	bne.n	80035f0 <HAL_PCD_IRQHandler+0x3a2>
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	3354      	adds	r3, #84	; 0x54
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d108      	bne.n	80035f0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035e8:	461a      	mov	r2, r3
 80035ea:	2101      	movs	r1, #1
 80035ec:	f003 fc38 	bl	8006e60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	4619      	mov	r1, r3
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f008 f977 	bl	800b8ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003612:	461a      	mov	r2, r3
 8003614:	2308      	movs	r3, #8
 8003616:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	d008      	beq.n	8003634 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362e:	461a      	mov	r2, r3
 8003630:	2310      	movs	r3, #16
 8003632:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d008      	beq.n	8003650 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364a:	461a      	mov	r2, r3
 800364c:	2340      	movs	r3, #64	; 0x40
 800364e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d023      	beq.n	80036a2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800365a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800365c:	6a38      	ldr	r0, [r7, #32]
 800365e:	f002 fb19 	bl	8005c94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003664:	4613      	mov	r3, r2
 8003666:	00db      	lsls	r3, r3, #3
 8003668:	4413      	add	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	3338      	adds	r3, #56	; 0x38
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	3304      	adds	r3, #4
 8003674:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	78db      	ldrb	r3, [r3, #3]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d108      	bne.n	8003690 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2200      	movs	r2, #0
 8003682:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	b2db      	uxtb	r3, r3
 8003688:	4619      	mov	r1, r3
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f008 f9c4 	bl	800ba18 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	4413      	add	r3, r2
 8003698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800369c:	461a      	mov	r2, r3
 800369e:	2302      	movs	r3, #2
 80036a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80036ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 fd08 	bl	80040c4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80036b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b6:	3301      	adds	r3, #1
 80036b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80036ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036bc:	085b      	lsrs	r3, r3, #1
 80036be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80036c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f47f af2e 	bne.w	8003524 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f003 fb03 	bl	8006cd8 <USB_ReadInterrupts>
 80036d2:	4603      	mov	r3, r0
 80036d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036dc:	d122      	bne.n	8003724 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	69fa      	ldr	r2, [r7, #28]
 80036e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036ec:	f023 0301 	bic.w	r3, r3, #1
 80036f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d108      	bne.n	800370e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003704:	2100      	movs	r1, #0
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fef0 	bl	80044ec <HAL_PCDEx_LPM_Callback>
 800370c:	e002      	b.n	8003714 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f008 f962 	bl	800b9d8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003722:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f003 fad5 	bl	8006cd8 <USB_ReadInterrupts>
 800372e:	4603      	mov	r3, r0
 8003730:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003738:	d112      	bne.n	8003760 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d102      	bne.n	8003750 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f008 f91e 	bl	800b98c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800375e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f003 fab7 	bl	8006cd8 <USB_ReadInterrupts>
 800376a:	4603      	mov	r3, r0
 800376c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003774:	f040 80b7 	bne.w	80038e6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	69fa      	ldr	r2, [r7, #28]
 8003782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003786:	f023 0301 	bic.w	r3, r3, #1
 800378a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2110      	movs	r1, #16
 8003792:	4618      	mov	r0, r3
 8003794:	f002 fa7e 	bl	8005c94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003798:	2300      	movs	r3, #0
 800379a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800379c:	e046      	b.n	800382c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800379e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037aa:	461a      	mov	r2, r3
 80037ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80037b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c2:	0151      	lsls	r1, r2, #5
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	440a      	add	r2, r1
 80037c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80037d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037de:	461a      	mov	r2, r3
 80037e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80037e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80037e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f6:	0151      	lsls	r1, r2, #5
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	440a      	add	r2, r1
 80037fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003800:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003804:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	4413      	add	r3, r2
 800380e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003816:	0151      	lsls	r1, r2, #5
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	440a      	add	r2, r1
 800381c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003820:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003824:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	3301      	adds	r3, #1
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003832:	429a      	cmp	r2, r3
 8003834:	d3b3      	bcc.n	800379e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800383c:	69db      	ldr	r3, [r3, #28]
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003844:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003848:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	2b00      	cmp	r3, #0
 8003850:	d016      	beq.n	8003880 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800385c:	69fa      	ldr	r2, [r7, #28]
 800385e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003862:	f043 030b 	orr.w	r3, r3, #11
 8003866:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	69fa      	ldr	r2, [r7, #28]
 8003874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003878:	f043 030b 	orr.w	r3, r3, #11
 800387c:	6453      	str	r3, [r2, #68]	; 0x44
 800387e:	e015      	b.n	80038ac <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800388e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003892:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003896:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	69fa      	ldr	r2, [r7, #28]
 80038a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038a6:	f043 030b 	orr.w	r3, r3, #11
 80038aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80038be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80038d0:	461a      	mov	r2, r3
 80038d2:	f003 fac5 	bl	8006e60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695a      	ldr	r2, [r3, #20]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80038e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f003 f9f4 	bl	8006cd8 <USB_ReadInterrupts>
 80038f0:	4603      	mov	r3, r0
 80038f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fa:	d124      	bne.n	8003946 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f003 fa8a 	bl	8006e1a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f002 fa3f 	bl	8005d8e <USB_GetDevSpeed>
 8003910:	4603      	mov	r3, r0
 8003912:	461a      	mov	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681c      	ldr	r4, [r3, #0]
 800391c:	f001 fa16 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8003920:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003926:	b2db      	uxtb	r3, r3
 8003928:	461a      	mov	r2, r3
 800392a:	4620      	mov	r0, r4
 800392c:	f001 ff3e 	bl	80057ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f008 f802 	bl	800b93a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003944:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f003 f9c4 	bl	8006cd8 <USB_ReadInterrupts>
 8003950:	4603      	mov	r3, r0
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	2b08      	cmp	r3, #8
 8003958:	d10a      	bne.n	8003970 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f007 ffdf 	bl	800b91e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f002 0208 	and.w	r2, r2, #8
 800396e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4618      	mov	r0, r3
 8003976:	f003 f9af 	bl	8006cd8 <USB_ReadInterrupts>
 800397a:	4603      	mov	r3, r0
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d122      	bne.n	80039ca <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003990:	2301      	movs	r3, #1
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
 8003994:	e014      	b.n	80039c0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	4613      	mov	r3, r2
 800399c:	00db      	lsls	r3, r3, #3
 800399e:	4413      	add	r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d105      	bne.n	80039ba <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80039ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	4619      	mov	r1, r3
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fb27 	bl	8004008 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	3301      	adds	r3, #1
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d3e5      	bcc.n	8003996 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f003 f982 	bl	8006cd8 <USB_ReadInterrupts>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039de:	d13b      	bne.n	8003a58 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80039e0:	2301      	movs	r3, #1
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
 80039e4:	e02b      	b.n	8003a3e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fa:	4613      	mov	r3, r2
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	3340      	adds	r3, #64	; 0x40
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d115      	bne.n	8003a38 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003a0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	da12      	bge.n	8003a38 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a16:	4613      	mov	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	440b      	add	r3, r1
 8003a20:	333f      	adds	r3, #63	; 0x3f
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	4619      	mov	r1, r3
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f000 fae8 	bl	8004008 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d3ce      	bcc.n	80039e6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f003 f93b 	bl	8006cd8 <USB_ReadInterrupts>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a6c:	d155      	bne.n	8003b1a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003a6e:	2301      	movs	r3, #1
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
 8003a72:	e045      	b.n	8003b00 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a88:	4613      	mov	r3, r2
 8003a8a:	00db      	lsls	r3, r3, #3
 8003a8c:	4413      	add	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d12e      	bne.n	8003afa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003a9c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	da2b      	bge.n	8003afa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003aae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d121      	bne.n	8003afa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aba:	4613      	mov	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	4413      	add	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003ac8:	2201      	movs	r2, #1
 8003aca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d10a      	bne.n	8003afa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003af6:	6053      	str	r3, [r2, #4]
            break;
 8003af8:	e007      	b.n	8003b0a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	3301      	adds	r3, #1
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d3b4      	bcc.n	8003a74 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f003 f8da 	bl	8006cd8 <USB_ReadInterrupts>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2e:	d10a      	bne.n	8003b46 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f007 ff83 	bl	800ba3c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	695a      	ldr	r2, [r3, #20]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f003 f8c4 	bl	8006cd8 <USB_ReadInterrupts>
 8003b50:	4603      	mov	r3, r0
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	d115      	bne.n	8003b86 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f007 ff73 	bl	800ba58 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6859      	ldr	r1, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
 8003b82:	e000      	b.n	8003b86 <HAL_PCD_IRQHandler+0x938>
      return;
 8003b84:	bf00      	nop
    }
  }
}
 8003b86:	3734      	adds	r7, #52	; 0x34
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd90      	pop	{r4, r7, pc}

08003b8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d101      	bne.n	8003ba6 <HAL_PCD_SetAddress+0x1a>
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	e013      	b.n	8003bce <HAL_PCD_SetAddress+0x42>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f003 f822 	bl	8006c08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3708      	adds	r7, #8
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b084      	sub	sp, #16
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
 8003bde:	4608      	mov	r0, r1
 8003be0:	4611      	mov	r1, r2
 8003be2:	461a      	mov	r2, r3
 8003be4:	4603      	mov	r3, r0
 8003be6:	70fb      	strb	r3, [r7, #3]
 8003be8:	460b      	mov	r3, r1
 8003bea:	803b      	strh	r3, [r7, #0]
 8003bec:	4613      	mov	r3, r2
 8003bee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	da0f      	bge.n	8003c1c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	f003 020f 	and.w	r2, r3, #15
 8003c02:	4613      	mov	r3, r2
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	3338      	adds	r3, #56	; 0x38
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	4413      	add	r3, r2
 8003c10:	3304      	adds	r3, #4
 8003c12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	705a      	strb	r2, [r3, #1]
 8003c1a:	e00f      	b.n	8003c3c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c1c:	78fb      	ldrb	r3, [r7, #3]
 8003c1e:	f003 020f 	and.w	r2, r3, #15
 8003c22:	4613      	mov	r3, r2
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4413      	add	r3, r2
 8003c32:	3304      	adds	r3, #4
 8003c34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003c3c:	78fb      	ldrb	r3, [r7, #3]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c48:	883a      	ldrh	r2, [r7, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	78ba      	ldrb	r2, [r7, #2]
 8003c52:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	785b      	ldrb	r3, [r3, #1]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d004      	beq.n	8003c66 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c66:	78bb      	ldrb	r3, [r7, #2]
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d102      	bne.n	8003c72 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d101      	bne.n	8003c80 <HAL_PCD_EP_Open+0xaa>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e00e      	b.n	8003c9e <HAL_PCD_EP_Open+0xc8>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68f9      	ldr	r1, [r7, #12]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f002 f8a2 	bl	8005dd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003c9c:	7afb      	ldrb	r3, [r7, #11]
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b084      	sub	sp, #16
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003cb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	da0f      	bge.n	8003cda <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cba:	78fb      	ldrb	r3, [r7, #3]
 8003cbc:	f003 020f 	and.w	r2, r3, #15
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	3338      	adds	r3, #56	; 0x38
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	4413      	add	r3, r2
 8003cce:	3304      	adds	r3, #4
 8003cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	705a      	strb	r2, [r3, #1]
 8003cd8:	e00f      	b.n	8003cfa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cda:	78fb      	ldrb	r3, [r7, #3]
 8003cdc:	f003 020f 	and.w	r2, r3, #15
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	4413      	add	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	4413      	add	r3, r2
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	b2da      	uxtb	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_PCD_EP_Close+0x6e>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e00e      	b.n	8003d32 <HAL_PCD_EP_Close+0x8c>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68f9      	ldr	r1, [r7, #12]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f002 f8e0 	bl	8005ee8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b086      	sub	sp, #24
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	460b      	mov	r3, r1
 8003d48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d4a:	7afb      	ldrb	r3, [r7, #11]
 8003d4c:	f003 020f 	and.w	r2, r3, #15
 8003d50:	4613      	mov	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d5c:	68fa      	ldr	r2, [r7, #12]
 8003d5e:	4413      	add	r3, r2
 8003d60:	3304      	adds	r3, #4
 8003d62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2200      	movs	r2, #0
 8003d74:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d7c:	7afb      	ldrb	r3, [r7, #11]
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d102      	bne.n	8003d96 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d96:	7afb      	ldrb	r3, [r7, #11]
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d109      	bne.n	8003db4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	6979      	ldr	r1, [r7, #20]
 8003dae:	f002 fbbf 	bl	8006530 <USB_EP0StartXfer>
 8003db2:	e008      	b.n	8003dc6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6979      	ldr	r1, [r7, #20]
 8003dc2:	f002 f96d 	bl	80060a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	f003 020f 	and.w	r2, r3, #15
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003df2:	681b      	ldr	r3, [r3, #0]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	607a      	str	r2, [r7, #4]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e10:	7afb      	ldrb	r3, [r7, #11]
 8003e12:	f003 020f 	and.w	r2, r3, #15
 8003e16:	4613      	mov	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	4413      	add	r3, r2
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	3338      	adds	r3, #56	; 0x38
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	3304      	adds	r3, #4
 8003e26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2200      	movs	r2, #0
 8003e38:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e40:	7afb      	ldrb	r3, [r7, #11]
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d102      	bne.n	8003e5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e5a:	7afb      	ldrb	r3, [r7, #11]
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d109      	bne.n	8003e78 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	461a      	mov	r2, r3
 8003e70:	6979      	ldr	r1, [r7, #20]
 8003e72:	f002 fb5d 	bl	8006530 <USB_EP0StartXfer>
 8003e76:	e008      	b.n	8003e8a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	6979      	ldr	r1, [r7, #20]
 8003e86:	f002 f90b 	bl	80060a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	f003 020f 	and.w	r2, r3, #15
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d901      	bls.n	8003eb2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e050      	b.n	8003f54 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	da0f      	bge.n	8003eda <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eba:	78fb      	ldrb	r3, [r7, #3]
 8003ebc:	f003 020f 	and.w	r2, r3, #15
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	4413      	add	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	3338      	adds	r3, #56	; 0x38
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	3304      	adds	r3, #4
 8003ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	705a      	strb	r2, [r3, #1]
 8003ed8:	e00d      	b.n	8003ef6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003eda:	78fa      	ldrb	r2, [r7, #3]
 8003edc:	4613      	mov	r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	4413      	add	r3, r2
 8003eec:	3304      	adds	r3, #4
 8003eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <HAL_PCD_EP_SetStall+0x82>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e01e      	b.n	8003f54 <HAL_PCD_EP_SetStall+0xc0>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68f9      	ldr	r1, [r7, #12]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f002 fd9b 	bl	8006a60 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f2a:	78fb      	ldrb	r3, [r7, #3]
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10a      	bne.n	8003f4a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6818      	ldr	r0, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	b2d9      	uxtb	r1, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f44:	461a      	mov	r2, r3
 8003f46:	f002 ff8b 	bl	8006e60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	460b      	mov	r3, r1
 8003f66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003f68:	78fb      	ldrb	r3, [r7, #3]
 8003f6a:	f003 020f 	and.w	r2, r3, #15
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d901      	bls.n	8003f7a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e042      	b.n	8004000 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	da0f      	bge.n	8003fa2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f82:	78fb      	ldrb	r3, [r7, #3]
 8003f84:	f003 020f 	and.w	r2, r3, #15
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	3338      	adds	r3, #56	; 0x38
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	4413      	add	r3, r2
 8003f96:	3304      	adds	r3, #4
 8003f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	705a      	strb	r2, [r3, #1]
 8003fa0:	e00f      	b.n	8003fc2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	f003 020f 	and.w	r2, r3, #15
 8003fa8:	4613      	mov	r3, r2
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	3304      	adds	r3, #4
 8003fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fc8:	78fb      	ldrb	r3, [r7, #3]
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_PCD_EP_ClrStall+0x86>
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e00e      	b.n	8004000 <HAL_PCD_EP_ClrStall+0xa4>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68f9      	ldr	r1, [r7, #12]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f002 fda3 	bl	8006b3c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004014:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004018:	2b00      	cmp	r3, #0
 800401a:	da0c      	bge.n	8004036 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800401c:	78fb      	ldrb	r3, [r7, #3]
 800401e:	f003 020f 	and.w	r2, r3, #15
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	3338      	adds	r3, #56	; 0x38
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	4413      	add	r3, r2
 8004030:	3304      	adds	r3, #4
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	e00c      	b.n	8004050 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004036:	78fb      	ldrb	r3, [r7, #3]
 8004038:	f003 020f 	and.w	r2, r3, #15
 800403c:	4613      	mov	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4413      	add	r3, r2
 800404c:	3304      	adds	r3, #4
 800404e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68f9      	ldr	r1, [r7, #12]
 8004056:	4618      	mov	r0, r3
 8004058:	f002 fbc2 	bl	80067e0 <USB_EPStopXfer>
 800405c:	4603      	mov	r3, r0
 800405e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004060:	7afb      	ldrb	r3, [r7, #11]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	460b      	mov	r3, r1
 8004074:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800407c:	2b01      	cmp	r3, #1
 800407e:	d101      	bne.n	8004084 <HAL_PCD_EP_Flush+0x1a>
 8004080:	2302      	movs	r3, #2
 8004082:	e01b      	b.n	80040bc <HAL_PCD_EP_Flush+0x52>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 800408c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004090:	2b00      	cmp	r3, #0
 8004092:	da09      	bge.n	80040a8 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	78fb      	ldrb	r3, [r7, #3]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	4619      	mov	r1, r3
 80040a0:	4610      	mov	r0, r2
 80040a2:	f001 fdf7 	bl	8005c94 <USB_FlushTxFifo>
 80040a6:	e004      	b.n	80040b2 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f001 fe25 	bl	8005cfc <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08a      	sub	sp, #40	; 0x28
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	4613      	mov	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4413      	add	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	3338      	adds	r3, #56	; 0x38
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	4413      	add	r3, r2
 80040e8:	3304      	adds	r3, #4
 80040ea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6a1a      	ldr	r2, [r3, #32]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d901      	bls.n	80040fc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e06c      	b.n	80041d6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	699a      	ldr	r2, [r3, #24]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	429a      	cmp	r2, r3
 8004110:	d902      	bls.n	8004118 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	3303      	adds	r3, #3
 800411c:	089b      	lsrs	r3, r3, #2
 800411e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004120:	e02b      	b.n	800417a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	429a      	cmp	r2, r3
 8004136:	d902      	bls.n	800413e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	3303      	adds	r3, #3
 8004142:	089b      	lsrs	r3, r3, #2
 8004144:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6919      	ldr	r1, [r3, #16]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	b2da      	uxtb	r2, r3
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004156:	b2db      	uxtb	r3, r3
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	4603      	mov	r3, r0
 800415c:	6978      	ldr	r0, [r7, #20]
 800415e:	f002 fbe9 	bl	8006934 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	441a      	add	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a1a      	ldr	r2, [r3, #32]
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	441a      	add	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004186:	699b      	ldr	r3, [r3, #24]
 8004188:	b29b      	uxth	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	429a      	cmp	r2, r3
 800418e:	d809      	bhi.n	80041a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1a      	ldr	r2, [r3, #32]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004198:	429a      	cmp	r2, r3
 800419a:	d203      	bcs.n	80041a4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1be      	bne.n	8004122 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	699a      	ldr	r2, [r3, #24]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a1b      	ldr	r3, [r3, #32]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d811      	bhi.n	80041d4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	f003 030f 	and.w	r3, r3, #15
 80041b6:	2201      	movs	r2, #1
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	43db      	mvns	r3, r3
 80041ca:	6939      	ldr	r1, [r7, #16]
 80041cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041d0:	4013      	ands	r3, r2
 80041d2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3720      	adds	r7, #32
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	333c      	adds	r3, #60	; 0x3c
 80041f8:	3304      	adds	r3, #4
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d17b      	bne.n	800430e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d015      	beq.n	800424c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	4a61      	ldr	r2, [pc, #388]	; (80043a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	f240 80b9 	bls.w	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80b3 	beq.w	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	461a      	mov	r2, r3
 8004244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004248:	6093      	str	r3, [r2, #8]
 800424a:	e0a7      	b.n	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	461a      	mov	r2, r3
 8004264:	2320      	movs	r3, #32
 8004266:	6093      	str	r3, [r2, #8]
 8004268:	e098      	b.n	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004270:	2b00      	cmp	r3, #0
 8004272:	f040 8093 	bne.w	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	4a4b      	ldr	r2, [pc, #300]	; (80043a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d90f      	bls.n	800429e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	4413      	add	r3, r2
 8004290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004294:	461a      	mov	r2, r3
 8004296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800429a:	6093      	str	r3, [r2, #8]
 800429c:	e07e      	b.n	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	4613      	mov	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	4413      	add	r3, r2
 80042b0:	3304      	adds	r3, #4
 80042b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	69da      	ldr	r2, [r3, #28]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	0159      	lsls	r1, r3, #5
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	440b      	add	r3, r1
 80042c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ca:	1ad2      	subs	r2, r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d114      	bne.n	8004300 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042e8:	461a      	mov	r2, r3
 80042ea:	2101      	movs	r1, #1
 80042ec:	f002 fdb8 	bl	8006e60 <USB_EP0_OutStart>
 80042f0:	e006      	b.n	8004300 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	441a      	add	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	4619      	mov	r1, r3
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f007 fad4 	bl	800b8b4 <HAL_PCD_DataOutStageCallback>
 800430c:	e046      	b.n	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	4a26      	ldr	r2, [pc, #152]	; (80043ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d124      	bne.n	8004360 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432c:	461a      	mov	r2, r3
 800432e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004332:	6093      	str	r3, [r2, #8]
 8004334:	e032      	b.n	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f003 0320 	and.w	r3, r3, #32
 800433c:	2b00      	cmp	r3, #0
 800433e:	d008      	beq.n	8004352 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434c:	461a      	mov	r2, r3
 800434e:	2320      	movs	r3, #32
 8004350:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	4619      	mov	r1, r3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f007 faab 	bl	800b8b4 <HAL_PCD_DataOutStageCallback>
 800435e:	e01d      	b.n	800439c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d114      	bne.n	8004390 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004366:	6879      	ldr	r1, [r7, #4]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	4613      	mov	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	440b      	add	r3, r1
 8004374:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d108      	bne.n	8004390 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6818      	ldr	r0, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004388:	461a      	mov	r2, r3
 800438a:	2100      	movs	r1, #0
 800438c:	f002 fd68 	bl	8006e60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	4619      	mov	r1, r3
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f007 fa8c 	bl	800b8b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	4f54300a 	.word	0x4f54300a
 80043ac:	4f54310a 	.word	0x4f54310a

080043b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	333c      	adds	r3, #60	; 0x3c
 80043c8:	3304      	adds	r3, #4
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4a15      	ldr	r2, [pc, #84]	; (8004438 <PCD_EP_OutSetupPacket_int+0x88>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d90e      	bls.n	8004404 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fc:	461a      	mov	r2, r3
 80043fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004402:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f007 fa43 	bl	800b890 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4a0a      	ldr	r2, [pc, #40]	; (8004438 <PCD_EP_OutSetupPacket_int+0x88>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d90c      	bls.n	800442c <PCD_EP_OutSetupPacket_int+0x7c>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d108      	bne.n	800442c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6818      	ldr	r0, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004424:	461a      	mov	r2, r3
 8004426:	2101      	movs	r1, #1
 8004428:	f002 fd1a 	bl	8006e60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	4f54300a 	.word	0x4f54300a

0800443c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	70fb      	strb	r3, [r7, #3]
 8004448:	4613      	mov	r3, r2
 800444a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004452:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d107      	bne.n	800446a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800445a:	883b      	ldrh	r3, [r7, #0]
 800445c:	0419      	lsls	r1, r3, #16
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	430a      	orrs	r2, r1
 8004466:	629a      	str	r2, [r3, #40]	; 0x28
 8004468:	e028      	b.n	80044bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	4413      	add	r3, r2
 8004476:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004478:	2300      	movs	r3, #0
 800447a:	73fb      	strb	r3, [r7, #15]
 800447c:	e00d      	b.n	800449a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	7bfb      	ldrb	r3, [r7, #15]
 8004484:	3340      	adds	r3, #64	; 0x40
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	0c1b      	lsrs	r3, r3, #16
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	4413      	add	r3, r2
 8004492:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004494:	7bfb      	ldrb	r3, [r7, #15]
 8004496:	3301      	adds	r3, #1
 8004498:	73fb      	strb	r3, [r7, #15]
 800449a:	7bfa      	ldrb	r2, [r7, #15]
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	3b01      	subs	r3, #1
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d3ec      	bcc.n	800447e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044a4:	883b      	ldrh	r3, [r7, #0]
 80044a6:	0418      	lsls	r0, r3, #16
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6819      	ldr	r1, [r3, #0]
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	3b01      	subs	r3, #1
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	4302      	orrs	r2, r0
 80044b4:	3340      	adds	r3, #64	; 0x40
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3714      	adds	r7, #20
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	887a      	ldrh	r2, [r7, #2]
 80044dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	460b      	mov	r3, r1
 80044f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e267      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d075      	beq.n	800460e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004522:	4b88      	ldr	r3, [pc, #544]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b04      	cmp	r3, #4
 800452c:	d00c      	beq.n	8004548 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800452e:	4b85      	ldr	r3, [pc, #532]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004536:	2b08      	cmp	r3, #8
 8004538:	d112      	bne.n	8004560 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800453a:	4b82      	ldr	r3, [pc, #520]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004546:	d10b      	bne.n	8004560 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004548:	4b7e      	ldr	r3, [pc, #504]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d05b      	beq.n	800460c <HAL_RCC_OscConfig+0x108>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d157      	bne.n	800460c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e242      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004568:	d106      	bne.n	8004578 <HAL_RCC_OscConfig+0x74>
 800456a:	4b76      	ldr	r3, [pc, #472]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a75      	ldr	r2, [pc, #468]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	e01d      	b.n	80045b4 <HAL_RCC_OscConfig+0xb0>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004580:	d10c      	bne.n	800459c <HAL_RCC_OscConfig+0x98>
 8004582:	4b70      	ldr	r3, [pc, #448]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a6f      	ldr	r2, [pc, #444]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	4b6d      	ldr	r3, [pc, #436]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a6c      	ldr	r2, [pc, #432]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e00b      	b.n	80045b4 <HAL_RCC_OscConfig+0xb0>
 800459c:	4b69      	ldr	r3, [pc, #420]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a68      	ldr	r2, [pc, #416]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80045a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a6:	6013      	str	r3, [r2, #0]
 80045a8:	4b66      	ldr	r3, [pc, #408]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a65      	ldr	r2, [pc, #404]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80045ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d013      	beq.n	80045e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045bc:	f7fd fbe2 	bl	8001d84 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	e008      	b.n	80045d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045c4:	f7fd fbde 	bl	8001d84 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	2b64      	cmp	r3, #100	; 0x64
 80045d0:	d901      	bls.n	80045d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e207      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d6:	4b5b      	ldr	r3, [pc, #364]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d0f0      	beq.n	80045c4 <HAL_RCC_OscConfig+0xc0>
 80045e2:	e014      	b.n	800460e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e4:	f7fd fbce 	bl	8001d84 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045ec:	f7fd fbca 	bl	8001d84 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b64      	cmp	r3, #100	; 0x64
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e1f3      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fe:	4b51      	ldr	r3, [pc, #324]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0xe8>
 800460a:	e000      	b.n	800460e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d063      	beq.n	80046e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800461a:	4b4a      	ldr	r3, [pc, #296]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00b      	beq.n	800463e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004626:	4b47      	ldr	r3, [pc, #284]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800462e:	2b08      	cmp	r3, #8
 8004630:	d11c      	bne.n	800466c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004632:	4b44      	ldr	r3, [pc, #272]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d116      	bne.n	800466c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463e:	4b41      	ldr	r3, [pc, #260]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_RCC_OscConfig+0x152>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d001      	beq.n	8004656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e1c7      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004656:	4b3b      	ldr	r3, [pc, #236]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4937      	ldr	r1, [pc, #220]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004666:	4313      	orrs	r3, r2
 8004668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800466a:	e03a      	b.n	80046e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d020      	beq.n	80046b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004674:	4b34      	ldr	r3, [pc, #208]	; (8004748 <HAL_RCC_OscConfig+0x244>)
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467a:	f7fd fb83 	bl	8001d84 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004682:	f7fd fb7f 	bl	8001d84 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e1a8      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004694:	4b2b      	ldr	r3, [pc, #172]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0f0      	beq.n	8004682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a0:	4b28      	ldr	r3, [pc, #160]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	00db      	lsls	r3, r3, #3
 80046ae:	4925      	ldr	r1, [pc, #148]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80046b0:	4313      	orrs	r3, r2
 80046b2:	600b      	str	r3, [r1, #0]
 80046b4:	e015      	b.n	80046e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b6:	4b24      	ldr	r3, [pc, #144]	; (8004748 <HAL_RCC_OscConfig+0x244>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fd fb62 	bl	8001d84 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046c4:	f7fd fb5e 	bl	8001d84 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e187      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d6:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f0      	bne.n	80046c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0308 	and.w	r3, r3, #8
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d036      	beq.n	800475c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d016      	beq.n	8004724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f6:	4b15      	ldr	r3, [pc, #84]	; (800474c <HAL_RCC_OscConfig+0x248>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fc:	f7fd fb42 	bl	8001d84 <HAL_GetTick>
 8004700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004704:	f7fd fb3e 	bl	8001d84 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e167      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004716:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCC_OscConfig+0x240>)
 8004718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0f0      	beq.n	8004704 <HAL_RCC_OscConfig+0x200>
 8004722:	e01b      	b.n	800475c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCC_OscConfig+0x248>)
 8004726:	2200      	movs	r2, #0
 8004728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472a:	f7fd fb2b 	bl	8001d84 <HAL_GetTick>
 800472e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004730:	e00e      	b.n	8004750 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004732:	f7fd fb27 	bl	8001d84 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d907      	bls.n	8004750 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e150      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
 8004744:	40023800 	.word	0x40023800
 8004748:	42470000 	.word	0x42470000
 800474c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004750:	4b88      	ldr	r3, [pc, #544]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1ea      	bne.n	8004732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8097 	beq.w	8004898 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800476a:	2300      	movs	r3, #0
 800476c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800476e:	4b81      	ldr	r3, [pc, #516]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10f      	bne.n	800479a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800477a:	2300      	movs	r3, #0
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	4b7d      	ldr	r3, [pc, #500]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	4a7c      	ldr	r2, [pc, #496]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004788:	6413      	str	r3, [r2, #64]	; 0x40
 800478a:	4b7a      	ldr	r3, [pc, #488]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004796:	2301      	movs	r3, #1
 8004798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479a:	4b77      	ldr	r3, [pc, #476]	; (8004978 <HAL_RCC_OscConfig+0x474>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d118      	bne.n	80047d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047a6:	4b74      	ldr	r3, [pc, #464]	; (8004978 <HAL_RCC_OscConfig+0x474>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a73      	ldr	r2, [pc, #460]	; (8004978 <HAL_RCC_OscConfig+0x474>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b2:	f7fd fae7 	bl	8001d84 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ba:	f7fd fae3 	bl	8001d84 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e10c      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047cc:	4b6a      	ldr	r3, [pc, #424]	; (8004978 <HAL_RCC_OscConfig+0x474>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d106      	bne.n	80047ee <HAL_RCC_OscConfig+0x2ea>
 80047e0:	4b64      	ldr	r3, [pc, #400]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a63      	ldr	r2, [pc, #396]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
 80047ec:	e01c      	b.n	8004828 <HAL_RCC_OscConfig+0x324>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	d10c      	bne.n	8004810 <HAL_RCC_OscConfig+0x30c>
 80047f6:	4b5f      	ldr	r3, [pc, #380]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	4a5e      	ldr	r2, [pc, #376]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80047fc:	f043 0304 	orr.w	r3, r3, #4
 8004800:	6713      	str	r3, [r2, #112]	; 0x70
 8004802:	4b5c      	ldr	r3, [pc, #368]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004806:	4a5b      	ldr	r2, [pc, #364]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004808:	f043 0301 	orr.w	r3, r3, #1
 800480c:	6713      	str	r3, [r2, #112]	; 0x70
 800480e:	e00b      	b.n	8004828 <HAL_RCC_OscConfig+0x324>
 8004810:	4b58      	ldr	r3, [pc, #352]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004814:	4a57      	ldr	r2, [pc, #348]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004816:	f023 0301 	bic.w	r3, r3, #1
 800481a:	6713      	str	r3, [r2, #112]	; 0x70
 800481c:	4b55      	ldr	r3, [pc, #340]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	4a54      	ldr	r2, [pc, #336]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004822:	f023 0304 	bic.w	r3, r3, #4
 8004826:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d015      	beq.n	800485c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004830:	f7fd faa8 	bl	8001d84 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004836:	e00a      	b.n	800484e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004838:	f7fd faa4 	bl	8001d84 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f241 3288 	movw	r2, #5000	; 0x1388
 8004846:	4293      	cmp	r3, r2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e0cb      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800484e:	4b49      	ldr	r3, [pc, #292]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0ee      	beq.n	8004838 <HAL_RCC_OscConfig+0x334>
 800485a:	e014      	b.n	8004886 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800485c:	f7fd fa92 	bl	8001d84 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004862:	e00a      	b.n	800487a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004864:	f7fd fa8e 	bl	8001d84 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e0b5      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800487a:	4b3e      	ldr	r3, [pc, #248]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1ee      	bne.n	8004864 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004886:	7dfb      	ldrb	r3, [r7, #23]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d105      	bne.n	8004898 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800488c:	4b39      	ldr	r3, [pc, #228]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	4a38      	ldr	r2, [pc, #224]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004896:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80a1 	beq.w	80049e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048a2:	4b34      	ldr	r3, [pc, #208]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 030c 	and.w	r3, r3, #12
 80048aa:	2b08      	cmp	r3, #8
 80048ac:	d05c      	beq.n	8004968 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	699b      	ldr	r3, [r3, #24]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d141      	bne.n	800493a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b6:	4b31      	ldr	r3, [pc, #196]	; (800497c <HAL_RCC_OscConfig+0x478>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048bc:	f7fd fa62 	bl	8001d84 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c4:	f7fd fa5e 	bl	8001d84 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e087      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048d6:	4b27      	ldr	r3, [pc, #156]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f0      	bne.n	80048c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69da      	ldr	r2, [r3, #28]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a1b      	ldr	r3, [r3, #32]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	019b      	lsls	r3, r3, #6
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	085b      	lsrs	r3, r3, #1
 80048fa:	3b01      	subs	r3, #1
 80048fc:	041b      	lsls	r3, r3, #16
 80048fe:	431a      	orrs	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	061b      	lsls	r3, r3, #24
 8004906:	491b      	ldr	r1, [pc, #108]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 8004908:	4313      	orrs	r3, r2
 800490a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800490c:	4b1b      	ldr	r3, [pc, #108]	; (800497c <HAL_RCC_OscConfig+0x478>)
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004912:	f7fd fa37 	bl	8001d84 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800491a:	f7fd fa33 	bl	8001d84 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e05c      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800492c:	4b11      	ldr	r3, [pc, #68]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x416>
 8004938:	e054      	b.n	80049e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493a:	4b10      	ldr	r3, [pc, #64]	; (800497c <HAL_RCC_OscConfig+0x478>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004940:	f7fd fa20 	bl	8001d84 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004948:	f7fd fa1c 	bl	8001d84 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e045      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800495a:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_RCC_OscConfig+0x470>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x444>
 8004966:	e03d      	b.n	80049e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d107      	bne.n	8004980 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e038      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
 8004974:	40023800 	.word	0x40023800
 8004978:	40007000 	.word	0x40007000
 800497c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004980:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <HAL_RCC_OscConfig+0x4ec>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d028      	beq.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004998:	429a      	cmp	r2, r3
 800499a:	d121      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d11a      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049b0:	4013      	ands	r3, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d111      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	085b      	lsrs	r3, r3, #1
 80049c8:	3b01      	subs	r3, #1
 80049ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d107      	bne.n	80049e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049dc:	429a      	cmp	r2, r3
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e000      	b.n	80049e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3718      	adds	r7, #24
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}
 80049ee:	bf00      	nop
 80049f0:	40023800 	.word	0x40023800

080049f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0cc      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a08:	4b68      	ldr	r3, [pc, #416]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d90c      	bls.n	8004a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b65      	ldr	r3, [pc, #404]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1e:	4b63      	ldr	r3, [pc, #396]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e0b8      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d020      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a48:	4b59      	ldr	r3, [pc, #356]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	4a58      	ldr	r2, [pc, #352]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a60:	4b53      	ldr	r3, [pc, #332]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	4a52      	ldr	r2, [pc, #328]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a6c:	4b50      	ldr	r3, [pc, #320]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	494d      	ldr	r1, [pc, #308]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d044      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d107      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a92:	4b47      	ldr	r3, [pc, #284]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d119      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e07f      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d003      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d107      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab2:	4b3f      	ldr	r3, [pc, #252]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e06f      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac2:	4b3b      	ldr	r3, [pc, #236]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e067      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ad2:	4b37      	ldr	r3, [pc, #220]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f023 0203 	bic.w	r2, r3, #3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	4934      	ldr	r1, [pc, #208]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ae4:	f7fd f94e 	bl	8001d84 <HAL_GetTick>
 8004ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aea:	e00a      	b.n	8004b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aec:	f7fd f94a 	bl	8001d84 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e04f      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b02:	4b2b      	ldr	r3, [pc, #172]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 020c 	and.w	r2, r3, #12
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d1eb      	bne.n	8004aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b14:	4b25      	ldr	r3, [pc, #148]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d20c      	bcs.n	8004b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b22:	4b22      	ldr	r3, [pc, #136]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	b2d2      	uxtb	r2, r2
 8004b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2a:	4b20      	ldr	r3, [pc, #128]	; (8004bac <HAL_RCC_ClockConfig+0x1b8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e032      	b.n	8004ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b48:	4b19      	ldr	r3, [pc, #100]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4916      	ldr	r1, [pc, #88]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b66:	4b12      	ldr	r3, [pc, #72]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	490e      	ldr	r1, [pc, #56]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b7a:	f000 f821 	bl	8004bc0 <HAL_RCC_GetSysClockFreq>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	091b      	lsrs	r3, r3, #4
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	490a      	ldr	r1, [pc, #40]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8004b8c:	5ccb      	ldrb	r3, [r1, r3]
 8004b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b92:	4a09      	ldr	r2, [pc, #36]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b96:	4b09      	ldr	r3, [pc, #36]	; (8004bbc <HAL_RCC_ClockConfig+0x1c8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fd f8ae 	bl	8001cfc <HAL_InitTick>

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40023c00 	.word	0x40023c00
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	0800d318 	.word	0x0800d318
 8004bb8:	20000008 	.word	0x20000008
 8004bbc:	2000000c 	.word	0x2000000c

08004bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc4:	b090      	sub	sp, #64	; 0x40
 8004bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	637b      	str	r3, [r7, #52]	; 0x34
 8004bcc:	2300      	movs	r3, #0
 8004bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bd8:	4b59      	ldr	r3, [pc, #356]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 030c 	and.w	r3, r3, #12
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d00d      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0x40>
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	f200 80a1 	bhi.w	8004d2c <HAL_RCC_GetSysClockFreq+0x16c>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8004bee:	2b04      	cmp	r3, #4
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8004bf2:	e09b      	b.n	8004d2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bf4:	4b53      	ldr	r3, [pc, #332]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bf6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004bf8:	e09b      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bfa:	4b53      	ldr	r3, [pc, #332]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bfc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004bfe:	e098      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c00:	4b4f      	ldr	r3, [pc, #316]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c08:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c0a:	4b4d      	ldr	r3, [pc, #308]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d028      	beq.n	8004c68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c16:	4b4a      	ldr	r3, [pc, #296]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	099b      	lsrs	r3, r3, #6
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	623b      	str	r3, [r7, #32]
 8004c20:	627a      	str	r2, [r7, #36]	; 0x24
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4b47      	ldr	r3, [pc, #284]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c2c:	fb03 f201 	mul.w	r2, r3, r1
 8004c30:	2300      	movs	r3, #0
 8004c32:	fb00 f303 	mul.w	r3, r0, r3
 8004c36:	4413      	add	r3, r2
 8004c38:	4a43      	ldr	r2, [pc, #268]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c3a:	fba0 1202 	umull	r1, r2, r0, r2
 8004c3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c40:	460a      	mov	r2, r1
 8004c42:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c46:	4413      	add	r3, r2
 8004c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	61bb      	str	r3, [r7, #24]
 8004c50:	61fa      	str	r2, [r7, #28]
 8004c52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c5a:	f7fb fb19 	bl	8000290 <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4613      	mov	r3, r2
 8004c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c66:	e053      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c68:	4b35      	ldr	r3, [pc, #212]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	099b      	lsrs	r3, r3, #6
 8004c6e:	2200      	movs	r2, #0
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	617a      	str	r2, [r7, #20]
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c7a:	f04f 0b00 	mov.w	fp, #0
 8004c7e:	4652      	mov	r2, sl
 8004c80:	465b      	mov	r3, fp
 8004c82:	f04f 0000 	mov.w	r0, #0
 8004c86:	f04f 0100 	mov.w	r1, #0
 8004c8a:	0159      	lsls	r1, r3, #5
 8004c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c90:	0150      	lsls	r0, r2, #5
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	ebb2 080a 	subs.w	r8, r2, sl
 8004c9a:	eb63 090b 	sbc.w	r9, r3, fp
 8004c9e:	f04f 0200 	mov.w	r2, #0
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004caa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cb2:	ebb2 0408 	subs.w	r4, r2, r8
 8004cb6:	eb63 0509 	sbc.w	r5, r3, r9
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	f04f 0300 	mov.w	r3, #0
 8004cc2:	00eb      	lsls	r3, r5, #3
 8004cc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cc8:	00e2      	lsls	r2, r4, #3
 8004cca:	4614      	mov	r4, r2
 8004ccc:	461d      	mov	r5, r3
 8004cce:	eb14 030a 	adds.w	r3, r4, sl
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	eb45 030b 	adc.w	r3, r5, fp
 8004cd8:	607b      	str	r3, [r7, #4]
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004ce6:	4629      	mov	r1, r5
 8004ce8:	028b      	lsls	r3, r1, #10
 8004cea:	4621      	mov	r1, r4
 8004cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	028a      	lsls	r2, r1, #10
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	60fa      	str	r2, [r7, #12]
 8004d00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d04:	f7fb fac4 	bl	8000290 <__aeabi_uldivmod>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	460b      	mov	r3, r1
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d10:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	0c1b      	lsrs	r3, r3, #16
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004d20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d2a:	e002      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3740      	adds	r7, #64	; 0x40
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3e:	bf00      	nop
 8004d40:	40023800 	.word	0x40023800
 8004d44:	00f42400 	.word	0x00f42400
 8004d48:	017d7840 	.word	0x017d7840

08004d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d50:	4b03      	ldr	r3, [pc, #12]	; (8004d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d52:	681b      	ldr	r3, [r3, #0]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000008 	.word	0x20000008

08004d64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d68:	f7ff fff0 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	4b05      	ldr	r3, [pc, #20]	; (8004d84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	0a9b      	lsrs	r3, r3, #10
 8004d74:	f003 0307 	and.w	r3, r3, #7
 8004d78:	4903      	ldr	r1, [pc, #12]	; (8004d88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d7a:	5ccb      	ldrb	r3, [r1, r3]
 8004d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	40023800 	.word	0x40023800
 8004d88:	0800d328 	.word	0x0800d328

08004d8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d90:	f7ff ffdc 	bl	8004d4c <HAL_RCC_GetHCLKFreq>
 8004d94:	4602      	mov	r2, r0
 8004d96:	4b05      	ldr	r3, [pc, #20]	; (8004dac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	0b5b      	lsrs	r3, r3, #13
 8004d9c:	f003 0307 	and.w	r3, r3, #7
 8004da0:	4903      	ldr	r1, [pc, #12]	; (8004db0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da2:	5ccb      	ldrb	r3, [r1, r3]
 8004da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40023800 	.word	0x40023800
 8004db0:	0800d328 	.word	0x0800d328

08004db4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d105      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d038      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ddc:	4b68      	ldr	r3, [pc, #416]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004de2:	f7fc ffcf 	bl	8001d84 <HAL_GetTick>
 8004de6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004de8:	e008      	b.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004dea:	f7fc ffcb 	bl	8001d84 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e0bd      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004dfc:	4b61      	ldr	r3, [pc, #388]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1f0      	bne.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	019b      	lsls	r3, r3, #6
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	071b      	lsls	r3, r3, #28
 8004e1a:	495a      	ldr	r1, [pc, #360]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e22:	4b57      	ldr	r3, [pc, #348]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e28:	f7fc ffac 	bl	8001d84 <HAL_GetTick>
 8004e2c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e2e:	e008      	b.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e30:	f7fc ffa8 	bl	8001d84 <HAL_GetTick>
 8004e34:	4602      	mov	r2, r0
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e09a      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e42:	4b50      	ldr	r3, [pc, #320]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d0f0      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	f000 8083 	beq.w	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	4b48      	ldr	r3, [pc, #288]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	4a47      	ldr	r2, [pc, #284]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	6413      	str	r3, [r2, #64]	; 0x40
 8004e6c:	4b45      	ldr	r3, [pc, #276]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e78:	4b43      	ldr	r3, [pc, #268]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a42      	ldr	r2, [pc, #264]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e82:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e84:	f7fc ff7e 	bl	8001d84 <HAL_GetTick>
 8004e88:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004e8c:	f7fc ff7a 	bl	8001d84 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d901      	bls.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e06c      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004e9e:	4b3a      	ldr	r3, [pc, #232]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d0f0      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eaa:	4b36      	ldr	r3, [pc, #216]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004eb2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d02f      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d028      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ec8:	4b2e      	ldr	r3, [pc, #184]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ed0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ed2:	4b2e      	ldr	r3, [pc, #184]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ed8:	4b2c      	ldr	r3, [pc, #176]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ede:	4a29      	ldr	r2, [pc, #164]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ee4:	4b27      	ldr	r3, [pc, #156]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d114      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ef0:	f7fc ff48 	bl	8001d84 <HAL_GetTick>
 8004ef4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef6:	e00a      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef8:	f7fc ff44 	bl	8001d84 <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e034      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f0e:	4b1d      	ldr	r3, [pc, #116]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0ee      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f26:	d10d      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004f28:	4b16      	ldr	r3, [pc, #88]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	691b      	ldr	r3, [r3, #16]
 8004f34:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3c:	4911      	ldr	r1, [pc, #68]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
 8004f42:	e005      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004f44:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	4a0e      	ldr	r2, [pc, #56]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f4e:	6093      	str	r3, [r2, #8]
 8004f50:	4b0c      	ldr	r3, [pc, #48]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f5c:	4909      	ldr	r1, [pc, #36]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	7d1a      	ldrb	r2, [r3, #20]
 8004f72:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f74:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3718      	adds	r7, #24
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	42470068 	.word	0x42470068
 8004f84:	40023800 	.word	0x40023800
 8004f88:	40007000 	.word	0x40007000
 8004f8c:	42470e40 	.word	0x42470e40
 8004f90:	424711e0 	.word	0x424711e0

08004f94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b087      	sub	sp, #28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d140      	bne.n	8005034 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004fb2:	4b24      	ldr	r3, [pc, #144]	; (8005044 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d131      	bne.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fc8:	4b1f      	ldr	r3, [pc, #124]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fca:	617b      	str	r3, [r7, #20]
          break;
 8004fcc:	e031      	b.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004fce:	4b1d      	ldr	r3, [pc, #116]	; (8005044 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fda:	d109      	bne.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004fdc:	4b19      	ldr	r3, [pc, #100]	; (8005044 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fe2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fe6:	4a19      	ldr	r2, [pc, #100]	; (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fec:	613b      	str	r3, [r7, #16]
 8004fee:	e008      	b.n	8005002 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8004ff0:	4b14      	ldr	r3, [pc, #80]	; (8005044 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ff6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ffa:	4a15      	ldr	r2, [pc, #84]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005000:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005002:	4b10      	ldr	r3, [pc, #64]	; (8005044 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005004:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005008:	099b      	lsrs	r3, r3, #6
 800500a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	fb02 f303 	mul.w	r3, r2, r3
 8005014:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005016:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800501c:	0f1b      	lsrs	r3, r3, #28
 800501e:	f003 0307 	and.w	r3, r3, #7
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	fbb2 f3f3 	udiv	r3, r2, r3
 8005028:	617b      	str	r3, [r7, #20]
          break;
 800502a:	e002      	b.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]
          break;
 8005030:	bf00      	nop
        }
      }
      break;
 8005032:	bf00      	nop
    }
  }
  return frequency;
 8005034:	697b      	ldr	r3, [r7, #20]
}
 8005036:	4618      	mov	r0, r3
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40023800 	.word	0x40023800
 8005048:	00bb8000 	.word	0x00bb8000
 800504c:	017d7840 	.word	0x017d7840
 8005050:	00f42400 	.word	0x00f42400

08005054 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e07b      	b.n	800515e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	2b00      	cmp	r3, #0
 800506c:	d108      	bne.n	8005080 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005076:	d009      	beq.n	800508c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	61da      	str	r2, [r3, #28]
 800507e:	e005      	b.n	800508c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f7fc f84c 	bl	8001144 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2202      	movs	r2, #2
 80050b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050de:	431a      	orrs	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	431a      	orrs	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	431a      	orrs	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050fc:	431a      	orrs	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005110:	ea42 0103 	orr.w	r1, r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005118:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	f003 0104 	and.w	r1, r3, #4
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	f003 0210 	and.w	r2, r3, #16
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	430a      	orrs	r2, r1
 800513c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69da      	ldr	r2, [r3, #28]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800514c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b082      	sub	sp, #8
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e03f      	b.n	80051f8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d106      	bne.n	8005192 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7fc f84b 	bl	8001228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2224      	movs	r2, #36	; 0x24
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f828 	bl	8005200 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695a      	ldr	r2, [r3, #20]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68da      	ldr	r2, [r3, #12]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005204:	b0c0      	sub	sp, #256	; 0x100
 8005206:	af00      	add	r7, sp, #0
 8005208:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521c:	68d9      	ldr	r1, [r3, #12]
 800521e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	ea40 0301 	orr.w	r3, r0, r1
 8005228:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800522a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522e:	689a      	ldr	r2, [r3, #8]
 8005230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	431a      	orrs	r2, r3
 8005238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	431a      	orrs	r2, r3
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	4313      	orrs	r3, r2
 8005248:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005258:	f021 010c 	bic.w	r1, r1, #12
 800525c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005266:	430b      	orrs	r3, r1
 8005268:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800526a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800527a:	6999      	ldr	r1, [r3, #24]
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	ea40 0301 	orr.w	r3, r0, r1
 8005286:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b8f      	ldr	r3, [pc, #572]	; (80054cc <UART_SetConfig+0x2cc>)
 8005290:	429a      	cmp	r2, r3
 8005292:	d005      	beq.n	80052a0 <UART_SetConfig+0xa0>
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4b8d      	ldr	r3, [pc, #564]	; (80054d0 <UART_SetConfig+0x2d0>)
 800529c:	429a      	cmp	r2, r3
 800529e:	d104      	bne.n	80052aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052a0:	f7ff fd74 	bl	8004d8c <HAL_RCC_GetPCLK2Freq>
 80052a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052a8:	e003      	b.n	80052b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052aa:	f7ff fd5b 	bl	8004d64 <HAL_RCC_GetPCLK1Freq>
 80052ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052bc:	f040 810c 	bne.w	80054d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c4:	2200      	movs	r2, #0
 80052c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052d2:	4622      	mov	r2, r4
 80052d4:	462b      	mov	r3, r5
 80052d6:	1891      	adds	r1, r2, r2
 80052d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80052da:	415b      	adcs	r3, r3
 80052dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052e2:	4621      	mov	r1, r4
 80052e4:	eb12 0801 	adds.w	r8, r2, r1
 80052e8:	4629      	mov	r1, r5
 80052ea:	eb43 0901 	adc.w	r9, r3, r1
 80052ee:	f04f 0200 	mov.w	r2, #0
 80052f2:	f04f 0300 	mov.w	r3, #0
 80052f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005302:	4690      	mov	r8, r2
 8005304:	4699      	mov	r9, r3
 8005306:	4623      	mov	r3, r4
 8005308:	eb18 0303 	adds.w	r3, r8, r3
 800530c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005310:	462b      	mov	r3, r5
 8005312:	eb49 0303 	adc.w	r3, r9, r3
 8005316:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800531a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005326:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800532a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800532e:	460b      	mov	r3, r1
 8005330:	18db      	adds	r3, r3, r3
 8005332:	653b      	str	r3, [r7, #80]	; 0x50
 8005334:	4613      	mov	r3, r2
 8005336:	eb42 0303 	adc.w	r3, r2, r3
 800533a:	657b      	str	r3, [r7, #84]	; 0x54
 800533c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005340:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005344:	f7fa ffa4 	bl	8000290 <__aeabi_uldivmod>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4b61      	ldr	r3, [pc, #388]	; (80054d4 <UART_SetConfig+0x2d4>)
 800534e:	fba3 2302 	umull	r2, r3, r3, r2
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	011c      	lsls	r4, r3, #4
 8005356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535a:	2200      	movs	r2, #0
 800535c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005360:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005364:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005368:	4642      	mov	r2, r8
 800536a:	464b      	mov	r3, r9
 800536c:	1891      	adds	r1, r2, r2
 800536e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005370:	415b      	adcs	r3, r3
 8005372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005374:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005378:	4641      	mov	r1, r8
 800537a:	eb12 0a01 	adds.w	sl, r2, r1
 800537e:	4649      	mov	r1, r9
 8005380:	eb43 0b01 	adc.w	fp, r3, r1
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005390:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005394:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005398:	4692      	mov	sl, r2
 800539a:	469b      	mov	fp, r3
 800539c:	4643      	mov	r3, r8
 800539e:	eb1a 0303 	adds.w	r3, sl, r3
 80053a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053a6:	464b      	mov	r3, r9
 80053a8:	eb4b 0303 	adc.w	r3, fp, r3
 80053ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053c4:	460b      	mov	r3, r1
 80053c6:	18db      	adds	r3, r3, r3
 80053c8:	643b      	str	r3, [r7, #64]	; 0x40
 80053ca:	4613      	mov	r3, r2
 80053cc:	eb42 0303 	adc.w	r3, r2, r3
 80053d0:	647b      	str	r3, [r7, #68]	; 0x44
 80053d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053da:	f7fa ff59 	bl	8000290 <__aeabi_uldivmod>
 80053de:	4602      	mov	r2, r0
 80053e0:	460b      	mov	r3, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	4b3b      	ldr	r3, [pc, #236]	; (80054d4 <UART_SetConfig+0x2d4>)
 80053e6:	fba3 2301 	umull	r2, r3, r3, r1
 80053ea:	095b      	lsrs	r3, r3, #5
 80053ec:	2264      	movs	r2, #100	; 0x64
 80053ee:	fb02 f303 	mul.w	r3, r2, r3
 80053f2:	1acb      	subs	r3, r1, r3
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053fa:	4b36      	ldr	r3, [pc, #216]	; (80054d4 <UART_SetConfig+0x2d4>)
 80053fc:	fba3 2302 	umull	r2, r3, r3, r2
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005408:	441c      	add	r4, r3
 800540a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800540e:	2200      	movs	r2, #0
 8005410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005414:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005418:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800541c:	4642      	mov	r2, r8
 800541e:	464b      	mov	r3, r9
 8005420:	1891      	adds	r1, r2, r2
 8005422:	63b9      	str	r1, [r7, #56]	; 0x38
 8005424:	415b      	adcs	r3, r3
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005428:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800542c:	4641      	mov	r1, r8
 800542e:	1851      	adds	r1, r2, r1
 8005430:	6339      	str	r1, [r7, #48]	; 0x30
 8005432:	4649      	mov	r1, r9
 8005434:	414b      	adcs	r3, r1
 8005436:	637b      	str	r3, [r7, #52]	; 0x34
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005444:	4659      	mov	r1, fp
 8005446:	00cb      	lsls	r3, r1, #3
 8005448:	4651      	mov	r1, sl
 800544a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800544e:	4651      	mov	r1, sl
 8005450:	00ca      	lsls	r2, r1, #3
 8005452:	4610      	mov	r0, r2
 8005454:	4619      	mov	r1, r3
 8005456:	4603      	mov	r3, r0
 8005458:	4642      	mov	r2, r8
 800545a:	189b      	adds	r3, r3, r2
 800545c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005460:	464b      	mov	r3, r9
 8005462:	460a      	mov	r2, r1
 8005464:	eb42 0303 	adc.w	r3, r2, r3
 8005468:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005478:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800547c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005480:	460b      	mov	r3, r1
 8005482:	18db      	adds	r3, r3, r3
 8005484:	62bb      	str	r3, [r7, #40]	; 0x28
 8005486:	4613      	mov	r3, r2
 8005488:	eb42 0303 	adc.w	r3, r2, r3
 800548c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800548e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005492:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005496:	f7fa fefb 	bl	8000290 <__aeabi_uldivmod>
 800549a:	4602      	mov	r2, r0
 800549c:	460b      	mov	r3, r1
 800549e:	4b0d      	ldr	r3, [pc, #52]	; (80054d4 <UART_SetConfig+0x2d4>)
 80054a0:	fba3 1302 	umull	r1, r3, r3, r2
 80054a4:	095b      	lsrs	r3, r3, #5
 80054a6:	2164      	movs	r1, #100	; 0x64
 80054a8:	fb01 f303 	mul.w	r3, r1, r3
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	3332      	adds	r3, #50	; 0x32
 80054b2:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <UART_SetConfig+0x2d4>)
 80054b4:	fba2 2303 	umull	r2, r3, r2, r3
 80054b8:	095b      	lsrs	r3, r3, #5
 80054ba:	f003 0207 	and.w	r2, r3, #7
 80054be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4422      	add	r2, r4
 80054c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054c8:	e105      	b.n	80056d6 <UART_SetConfig+0x4d6>
 80054ca:	bf00      	nop
 80054cc:	40011000 	.word	0x40011000
 80054d0:	40011400 	.word	0x40011400
 80054d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054dc:	2200      	movs	r2, #0
 80054de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054ea:	4642      	mov	r2, r8
 80054ec:	464b      	mov	r3, r9
 80054ee:	1891      	adds	r1, r2, r2
 80054f0:	6239      	str	r1, [r7, #32]
 80054f2:	415b      	adcs	r3, r3
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
 80054f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054fa:	4641      	mov	r1, r8
 80054fc:	1854      	adds	r4, r2, r1
 80054fe:	4649      	mov	r1, r9
 8005500:	eb43 0501 	adc.w	r5, r3, r1
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	00eb      	lsls	r3, r5, #3
 800550e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005512:	00e2      	lsls	r2, r4, #3
 8005514:	4614      	mov	r4, r2
 8005516:	461d      	mov	r5, r3
 8005518:	4643      	mov	r3, r8
 800551a:	18e3      	adds	r3, r4, r3
 800551c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005520:	464b      	mov	r3, r9
 8005522:	eb45 0303 	adc.w	r3, r5, r3
 8005526:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800552a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005536:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005546:	4629      	mov	r1, r5
 8005548:	008b      	lsls	r3, r1, #2
 800554a:	4621      	mov	r1, r4
 800554c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005550:	4621      	mov	r1, r4
 8005552:	008a      	lsls	r2, r1, #2
 8005554:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005558:	f7fa fe9a 	bl	8000290 <__aeabi_uldivmod>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4b60      	ldr	r3, [pc, #384]	; (80056e4 <UART_SetConfig+0x4e4>)
 8005562:	fba3 2302 	umull	r2, r3, r3, r2
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	011c      	lsls	r4, r3, #4
 800556a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800556e:	2200      	movs	r2, #0
 8005570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005574:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005578:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800557c:	4642      	mov	r2, r8
 800557e:	464b      	mov	r3, r9
 8005580:	1891      	adds	r1, r2, r2
 8005582:	61b9      	str	r1, [r7, #24]
 8005584:	415b      	adcs	r3, r3
 8005586:	61fb      	str	r3, [r7, #28]
 8005588:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800558c:	4641      	mov	r1, r8
 800558e:	1851      	adds	r1, r2, r1
 8005590:	6139      	str	r1, [r7, #16]
 8005592:	4649      	mov	r1, r9
 8005594:	414b      	adcs	r3, r1
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	f04f 0300 	mov.w	r3, #0
 80055a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055a4:	4659      	mov	r1, fp
 80055a6:	00cb      	lsls	r3, r1, #3
 80055a8:	4651      	mov	r1, sl
 80055aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ae:	4651      	mov	r1, sl
 80055b0:	00ca      	lsls	r2, r1, #3
 80055b2:	4610      	mov	r0, r2
 80055b4:	4619      	mov	r1, r3
 80055b6:	4603      	mov	r3, r0
 80055b8:	4642      	mov	r2, r8
 80055ba:	189b      	adds	r3, r3, r2
 80055bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055c0:	464b      	mov	r3, r9
 80055c2:	460a      	mov	r2, r1
 80055c4:	eb42 0303 	adc.w	r3, r2, r3
 80055c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80055d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055e4:	4649      	mov	r1, r9
 80055e6:	008b      	lsls	r3, r1, #2
 80055e8:	4641      	mov	r1, r8
 80055ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ee:	4641      	mov	r1, r8
 80055f0:	008a      	lsls	r2, r1, #2
 80055f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055f6:	f7fa fe4b 	bl	8000290 <__aeabi_uldivmod>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4b39      	ldr	r3, [pc, #228]	; (80056e4 <UART_SetConfig+0x4e4>)
 8005600:	fba3 1302 	umull	r1, r3, r3, r2
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	2164      	movs	r1, #100	; 0x64
 8005608:	fb01 f303 	mul.w	r3, r1, r3
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	3332      	adds	r3, #50	; 0x32
 8005612:	4a34      	ldr	r2, [pc, #208]	; (80056e4 <UART_SetConfig+0x4e4>)
 8005614:	fba2 2303 	umull	r2, r3, r2, r3
 8005618:	095b      	lsrs	r3, r3, #5
 800561a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800561e:	441c      	add	r4, r3
 8005620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005624:	2200      	movs	r2, #0
 8005626:	673b      	str	r3, [r7, #112]	; 0x70
 8005628:	677a      	str	r2, [r7, #116]	; 0x74
 800562a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800562e:	4642      	mov	r2, r8
 8005630:	464b      	mov	r3, r9
 8005632:	1891      	adds	r1, r2, r2
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	415b      	adcs	r3, r3
 8005638:	60fb      	str	r3, [r7, #12]
 800563a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800563e:	4641      	mov	r1, r8
 8005640:	1851      	adds	r1, r2, r1
 8005642:	6039      	str	r1, [r7, #0]
 8005644:	4649      	mov	r1, r9
 8005646:	414b      	adcs	r3, r1
 8005648:	607b      	str	r3, [r7, #4]
 800564a:	f04f 0200 	mov.w	r2, #0
 800564e:	f04f 0300 	mov.w	r3, #0
 8005652:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005656:	4659      	mov	r1, fp
 8005658:	00cb      	lsls	r3, r1, #3
 800565a:	4651      	mov	r1, sl
 800565c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005660:	4651      	mov	r1, sl
 8005662:	00ca      	lsls	r2, r1, #3
 8005664:	4610      	mov	r0, r2
 8005666:	4619      	mov	r1, r3
 8005668:	4603      	mov	r3, r0
 800566a:	4642      	mov	r2, r8
 800566c:	189b      	adds	r3, r3, r2
 800566e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005670:	464b      	mov	r3, r9
 8005672:	460a      	mov	r2, r1
 8005674:	eb42 0303 	adc.w	r3, r2, r3
 8005678:	66fb      	str	r3, [r7, #108]	; 0x6c
 800567a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	663b      	str	r3, [r7, #96]	; 0x60
 8005684:	667a      	str	r2, [r7, #100]	; 0x64
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005692:	4649      	mov	r1, r9
 8005694:	008b      	lsls	r3, r1, #2
 8005696:	4641      	mov	r1, r8
 8005698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800569c:	4641      	mov	r1, r8
 800569e:	008a      	lsls	r2, r1, #2
 80056a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056a4:	f7fa fdf4 	bl	8000290 <__aeabi_uldivmod>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4b0d      	ldr	r3, [pc, #52]	; (80056e4 <UART_SetConfig+0x4e4>)
 80056ae:	fba3 1302 	umull	r1, r3, r3, r2
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	2164      	movs	r1, #100	; 0x64
 80056b6:	fb01 f303 	mul.w	r3, r1, r3
 80056ba:	1ad3      	subs	r3, r2, r3
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	3332      	adds	r3, #50	; 0x32
 80056c0:	4a08      	ldr	r2, [pc, #32]	; (80056e4 <UART_SetConfig+0x4e4>)
 80056c2:	fba2 2303 	umull	r2, r3, r2, r3
 80056c6:	095b      	lsrs	r3, r3, #5
 80056c8:	f003 020f 	and.w	r2, r3, #15
 80056cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4422      	add	r2, r4
 80056d4:	609a      	str	r2, [r3, #8]
}
 80056d6:	bf00      	nop
 80056d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056dc:	46bd      	mov	sp, r7
 80056de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056e2:	bf00      	nop
 80056e4:	51eb851f 	.word	0x51eb851f

080056e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80056e8:	b084      	sub	sp, #16
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b084      	sub	sp, #16
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
 80056f2:	f107 001c 	add.w	r0, r7, #28
 80056f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d122      	bne.n	8005746 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005704:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572a:	2b01      	cmp	r3, #1
 800572c:	d105      	bne.n	800573a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f001 fbee 	bl	8006f1c <USB_CoreReset>
 8005740:	4603      	mov	r3, r0
 8005742:	73fb      	strb	r3, [r7, #15]
 8005744:	e01a      	b.n	800577c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f001 fbe2 	bl	8006f1c <USB_CoreReset>
 8005758:	4603      	mov	r3, r0
 800575a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800575c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d106      	bne.n	8005770 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005766:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	639a      	str	r2, [r3, #56]	; 0x38
 800576e:	e005      	b.n	800577c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577e:	2b01      	cmp	r3, #1
 8005780:	d10b      	bne.n	800579a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f043 0206 	orr.w	r2, r3, #6
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f043 0220 	orr.w	r2, r3, #32
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800579a:	7bfb      	ldrb	r3, [r7, #15]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057a6:	b004      	add	sp, #16
 80057a8:	4770      	bx	lr
	...

080057ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	4613      	mov	r3, r2
 80057b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d165      	bne.n	800588c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4a41      	ldr	r2, [pc, #260]	; (80058c8 <USB_SetTurnaroundTime+0x11c>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d906      	bls.n	80057d6 <USB_SetTurnaroundTime+0x2a>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4a40      	ldr	r2, [pc, #256]	; (80058cc <USB_SetTurnaroundTime+0x120>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d202      	bcs.n	80057d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80057d0:	230f      	movs	r3, #15
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	e062      	b.n	800589c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4a3c      	ldr	r2, [pc, #240]	; (80058cc <USB_SetTurnaroundTime+0x120>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d306      	bcc.n	80057ec <USB_SetTurnaroundTime+0x40>
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	4a3b      	ldr	r2, [pc, #236]	; (80058d0 <USB_SetTurnaroundTime+0x124>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d202      	bcs.n	80057ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80057e6:	230e      	movs	r3, #14
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	e057      	b.n	800589c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4a38      	ldr	r2, [pc, #224]	; (80058d0 <USB_SetTurnaroundTime+0x124>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d306      	bcc.n	8005802 <USB_SetTurnaroundTime+0x56>
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	4a37      	ldr	r2, [pc, #220]	; (80058d4 <USB_SetTurnaroundTime+0x128>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d202      	bcs.n	8005802 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80057fc:	230d      	movs	r3, #13
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	e04c      	b.n	800589c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	4a33      	ldr	r2, [pc, #204]	; (80058d4 <USB_SetTurnaroundTime+0x128>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d306      	bcc.n	8005818 <USB_SetTurnaroundTime+0x6c>
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	4a32      	ldr	r2, [pc, #200]	; (80058d8 <USB_SetTurnaroundTime+0x12c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d802      	bhi.n	8005818 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005812:	230c      	movs	r3, #12
 8005814:	617b      	str	r3, [r7, #20]
 8005816:	e041      	b.n	800589c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4a2f      	ldr	r2, [pc, #188]	; (80058d8 <USB_SetTurnaroundTime+0x12c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d906      	bls.n	800582e <USB_SetTurnaroundTime+0x82>
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	4a2e      	ldr	r2, [pc, #184]	; (80058dc <USB_SetTurnaroundTime+0x130>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d802      	bhi.n	800582e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005828:	230b      	movs	r3, #11
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	e036      	b.n	800589c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4a2a      	ldr	r2, [pc, #168]	; (80058dc <USB_SetTurnaroundTime+0x130>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d906      	bls.n	8005844 <USB_SetTurnaroundTime+0x98>
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	4a29      	ldr	r2, [pc, #164]	; (80058e0 <USB_SetTurnaroundTime+0x134>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d802      	bhi.n	8005844 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800583e:	230a      	movs	r3, #10
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	e02b      	b.n	800589c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	4a26      	ldr	r2, [pc, #152]	; (80058e0 <USB_SetTurnaroundTime+0x134>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d906      	bls.n	800585a <USB_SetTurnaroundTime+0xae>
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4a25      	ldr	r2, [pc, #148]	; (80058e4 <USB_SetTurnaroundTime+0x138>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d202      	bcs.n	800585a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005854:	2309      	movs	r3, #9
 8005856:	617b      	str	r3, [r7, #20]
 8005858:	e020      	b.n	800589c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4a21      	ldr	r2, [pc, #132]	; (80058e4 <USB_SetTurnaroundTime+0x138>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d306      	bcc.n	8005870 <USB_SetTurnaroundTime+0xc4>
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	4a20      	ldr	r2, [pc, #128]	; (80058e8 <USB_SetTurnaroundTime+0x13c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d802      	bhi.n	8005870 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800586a:	2308      	movs	r3, #8
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	e015      	b.n	800589c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	4a1d      	ldr	r2, [pc, #116]	; (80058e8 <USB_SetTurnaroundTime+0x13c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d906      	bls.n	8005886 <USB_SetTurnaroundTime+0xda>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4a1c      	ldr	r2, [pc, #112]	; (80058ec <USB_SetTurnaroundTime+0x140>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d202      	bcs.n	8005886 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005880:	2307      	movs	r3, #7
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	e00a      	b.n	800589c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005886:	2306      	movs	r3, #6
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	e007      	b.n	800589c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800588c:	79fb      	ldrb	r3, [r7, #7]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d102      	bne.n	8005898 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005892:	2309      	movs	r3, #9
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	e001      	b.n	800589c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005898:	2309      	movs	r3, #9
 800589a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	029b      	lsls	r3, r3, #10
 80058b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80058b4:	431a      	orrs	r2, r3
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	371c      	adds	r7, #28
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	00d8acbf 	.word	0x00d8acbf
 80058cc:	00e4e1c0 	.word	0x00e4e1c0
 80058d0:	00f42400 	.word	0x00f42400
 80058d4:	01067380 	.word	0x01067380
 80058d8:	011a499f 	.word	0x011a499f
 80058dc:	01312cff 	.word	0x01312cff
 80058e0:	014ca43f 	.word	0x014ca43f
 80058e4:	016e3600 	.word	0x016e3600
 80058e8:	01a6ab1f 	.word	0x01a6ab1f
 80058ec:	01e84800 	.word	0x01e84800

080058f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f043 0201 	orr.w	r2, r3, #1
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr

08005912 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005912:	b480      	push	{r7}
 8005914:	b083      	sub	sp, #12
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f023 0201 	bic.w	r2, r3, #1
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005940:	2300      	movs	r3, #0
 8005942:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d115      	bne.n	8005982 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005962:	2001      	movs	r0, #1
 8005964:	f7fc fa1a 	bl	8001d9c <HAL_Delay>
      ms++;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3301      	adds	r3, #1
 800596c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f001 fa45 	bl	8006dfe <USB_GetMode>
 8005974:	4603      	mov	r3, r0
 8005976:	2b01      	cmp	r3, #1
 8005978:	d01e      	beq.n	80059b8 <USB_SetCurrentMode+0x84>
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b31      	cmp	r3, #49	; 0x31
 800597e:	d9f0      	bls.n	8005962 <USB_SetCurrentMode+0x2e>
 8005980:	e01a      	b.n	80059b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d115      	bne.n	80059b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005994:	2001      	movs	r0, #1
 8005996:	f7fc fa01 	bl	8001d9c <HAL_Delay>
      ms++;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	3301      	adds	r3, #1
 800599e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f001 fa2c 	bl	8006dfe <USB_GetMode>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d005      	beq.n	80059b8 <USB_SetCurrentMode+0x84>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2b31      	cmp	r3, #49	; 0x31
 80059b0:	d9f0      	bls.n	8005994 <USB_SetCurrentMode+0x60>
 80059b2:	e001      	b.n	80059b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e005      	b.n	80059c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2b32      	cmp	r3, #50	; 0x32
 80059bc:	d101      	bne.n	80059c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059cc:	b084      	sub	sp, #16
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b086      	sub	sp, #24
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059e6:	2300      	movs	r3, #0
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	e009      	b.n	8005a00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	3340      	adds	r3, #64	; 0x40
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	2200      	movs	r2, #0
 80059f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	3301      	adds	r3, #1
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b0e      	cmp	r3, #14
 8005a04:	d9f2      	bls.n	80059ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d11c      	bne.n	8005a46 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a1a:	f043 0302 	orr.w	r3, r3, #2
 8005a1e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	639a      	str	r2, [r3, #56]	; 0x38
 8005a44:	e00b      	b.n	8005a5e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a64:	461a      	mov	r2, r3
 8005a66:	2300      	movs	r3, #0
 8005a68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a70:	4619      	mov	r1, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a78:	461a      	mov	r2, r3
 8005a7a:	680b      	ldr	r3, [r1, #0]
 8005a7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d10c      	bne.n	8005a9e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f965 	bl	8005d5c <USB_SetDevSpeed>
 8005a92:	e008      	b.n	8005aa6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a94:	2101      	movs	r1, #1
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f960 	bl	8005d5c <USB_SetDevSpeed>
 8005a9c:	e003      	b.n	8005aa6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a9e:	2103      	movs	r1, #3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f95b 	bl	8005d5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005aa6:	2110      	movs	r1, #16
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f8f3 	bl	8005c94 <USB_FlushTxFifo>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f91f 	bl	8005cfc <USB_FlushRxFifo>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ace:	461a      	mov	r2, r3
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ada:	461a      	mov	r2, r3
 8005adc:	2300      	movs	r3, #0
 8005ade:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aec:	2300      	movs	r3, #0
 8005aee:	613b      	str	r3, [r7, #16]
 8005af0:	e043      	b.n	8005b7a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b08:	d118      	bne.n	8005b3c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	e013      	b.n	8005b4e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b32:	461a      	mov	r2, r3
 8005b34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	e008      	b.n	8005b4e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	461a      	mov	r2, r3
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	3301      	adds	r3, #1
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d3b7      	bcc.n	8005af2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b82:	2300      	movs	r3, #0
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	e043      	b.n	8005c10 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b9e:	d118      	bne.n	8005bd2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10a      	bne.n	8005bbc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	e013      	b.n	8005be4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	e008      	b.n	8005be4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bde:	461a      	mov	r2, r3
 8005be0:	2300      	movs	r3, #0
 8005be2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c02:	461a      	mov	r2, r3
 8005c04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d3b7      	bcc.n	8005b88 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d105      	bne.n	8005c4c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	f043 0210 	orr.w	r2, r3, #16
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699a      	ldr	r2, [r3, #24]
 8005c50:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <USB_DevInit+0x2c4>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f043 0208 	orr.w	r2, r3, #8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d107      	bne.n	8005c80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c78:	f043 0304 	orr.w	r3, r3, #4
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c8c:	b004      	add	sp, #16
 8005c8e:	4770      	bx	lr
 8005c90:	803c3800 	.word	0x803c3800

08005c94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	4a13      	ldr	r2, [pc, #76]	; (8005cf8 <USB_FlushTxFifo+0x64>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d901      	bls.n	8005cb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e01b      	b.n	8005cec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	daf2      	bge.n	8005ca2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	019b      	lsls	r3, r3, #6
 8005cc4:	f043 0220 	orr.w	r2, r3, #32
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4a08      	ldr	r2, [pc, #32]	; (8005cf8 <USB_FlushTxFifo+0x64>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d901      	bls.n	8005cde <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e006      	b.n	8005cec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	d0f0      	beq.n	8005ccc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	00030d40 	.word	0x00030d40

08005cfc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d04:	2300      	movs	r3, #0
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	4a11      	ldr	r2, [pc, #68]	; (8005d58 <USB_FlushRxFifo+0x5c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d901      	bls.n	8005d1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e018      	b.n	8005d4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	daf2      	bge.n	8005d08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2210      	movs	r2, #16
 8005d2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	4a08      	ldr	r2, [pc, #32]	; (8005d58 <USB_FlushRxFifo+0x5c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d901      	bls.n	8005d3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e006      	b.n	8005d4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	2b10      	cmp	r3, #16
 8005d48:	d0f0      	beq.n	8005d2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005d4a:	2300      	movs	r3, #0
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3714      	adds	r7, #20
 8005d50:	46bd      	mov	sp, r7
 8005d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d56:	4770      	bx	lr
 8005d58:	00030d40 	.word	0x00030d40

08005d5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	68f9      	ldr	r1, [r7, #12]
 8005d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8e:	b480      	push	{r7}
 8005d90:	b087      	sub	sp, #28
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 0306 	and.w	r3, r3, #6
 8005da6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d102      	bne.n	8005db4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005dae:	2300      	movs	r3, #0
 8005db0:	75fb      	strb	r3, [r7, #23]
 8005db2:	e00a      	b.n	8005dca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d002      	beq.n	8005dc0 <USB_GetDevSpeed+0x32>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b06      	cmp	r3, #6
 8005dbe:	d102      	bne.n	8005dc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	75fb      	strb	r3, [r7, #23]
 8005dc4:	e001      	b.n	8005dca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005dc6:	230f      	movs	r3, #15
 8005dc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	371c      	adds	r7, #28
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	785b      	ldrb	r3, [r3, #1]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d13a      	bne.n	8005e6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfa:	69da      	ldr	r2, [r3, #28]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	2101      	movs	r1, #1
 8005e06:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	68f9      	ldr	r1, [r7, #12]
 8005e0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e12:	4313      	orrs	r3, r2
 8005e14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d155      	bne.n	8005ed8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	015a      	lsls	r2, r3, #5
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	4413      	add	r3, r2
 8005e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	791b      	ldrb	r3, [r3, #4]
 8005e46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	059b      	lsls	r3, r3, #22
 8005e4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e50:	4313      	orrs	r3, r2
 8005e52:	68ba      	ldr	r2, [r7, #8]
 8005e54:	0151      	lsls	r1, r2, #5
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	440a      	add	r2, r1
 8005e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	e036      	b.n	8005ed8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e70:	69da      	ldr	r2, [r3, #28]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	f003 030f 	and.w	r3, r3, #15
 8005e7a:	2101      	movs	r1, #1
 8005e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e80:	041b      	lsls	r3, r3, #16
 8005e82:	68f9      	ldr	r1, [r7, #12]
 8005e84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d11a      	bne.n	8005ed8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	015a      	lsls	r2, r3, #5
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4413      	add	r3, r2
 8005eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	791b      	ldrb	r3, [r3, #4]
 8005ebc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ebe:	430b      	orrs	r3, r1
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	0151      	lsls	r1, r2, #5
 8005ec6:	68fa      	ldr	r2, [r7, #12]
 8005ec8:	440a      	add	r2, r1
 8005eca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ed8:	2300      	movs	r3, #0
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3714      	adds	r7, #20
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b085      	sub	sp, #20
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	785b      	ldrb	r3, [r3, #1]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d161      	bne.n	8005fc8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f1a:	d11f      	bne.n	8005f5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	f003 030f 	and.w	r3, r3, #15
 8005f6c:	2101      	movs	r1, #1
 8005f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	43db      	mvns	r3, r3
 8005f76:	68f9      	ldr	r1, [r7, #12]
 8005f78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f86:	69da      	ldr	r2, [r3, #28]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	f003 030f 	and.w	r3, r3, #15
 8005f90:	2101      	movs	r1, #1
 8005f92:	fa01 f303 	lsl.w	r3, r1, r3
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	43db      	mvns	r3, r3
 8005f9a:	68f9      	ldr	r1, [r7, #12]
 8005f9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	0159      	lsls	r1, r3, #5
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	440b      	add	r3, r1
 8005fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbe:	4619      	mov	r1, r3
 8005fc0:	4b35      	ldr	r3, [pc, #212]	; (8006098 <USB_DeactivateEndpoint+0x1b0>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	600b      	str	r3, [r1, #0]
 8005fc6:	e060      	b.n	800608a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fde:	d11f      	bne.n	8006020 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ffa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ffe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	0151      	lsls	r1, r2, #5
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	440a      	add	r2, r1
 8006016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800601e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	f003 030f 	and.w	r3, r3, #15
 8006030:	2101      	movs	r1, #1
 8006032:	fa01 f303 	lsl.w	r3, r1, r3
 8006036:	041b      	lsls	r3, r3, #16
 8006038:	43db      	mvns	r3, r3
 800603a:	68f9      	ldr	r1, [r7, #12]
 800603c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006040:	4013      	ands	r3, r2
 8006042:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	f003 030f 	and.w	r3, r3, #15
 8006054:	2101      	movs	r1, #1
 8006056:	fa01 f303 	lsl.w	r3, r1, r3
 800605a:	041b      	lsls	r3, r3, #16
 800605c:	43db      	mvns	r3, r3
 800605e:	68f9      	ldr	r1, [r7, #12]
 8006060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006064:	4013      	ands	r3, r2
 8006066:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	0159      	lsls	r1, r3, #5
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	440b      	add	r3, r1
 800607e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006082:	4619      	mov	r1, r3
 8006084:	4b05      	ldr	r3, [pc, #20]	; (800609c <USB_DeactivateEndpoint+0x1b4>)
 8006086:	4013      	ands	r3, r2
 8006088:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr
 8006098:	ec337800 	.word	0xec337800
 800609c:	eff37800 	.word	0xeff37800

080060a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08a      	sub	sp, #40	; 0x28
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	4613      	mov	r3, r2
 80060ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	785b      	ldrb	r3, [r3, #1]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	f040 815c 	bne.w	800637a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d132      	bne.n	8006130 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	69ba      	ldr	r2, [r7, #24]
 80060da:	0151      	lsls	r1, r2, #5
 80060dc:	69fa      	ldr	r2, [r7, #28]
 80060de:	440a      	add	r2, r1
 80060e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	015a      	lsls	r2, r3, #5
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	4413      	add	r3, r2
 80060f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	0151      	lsls	r1, r2, #5
 8006100:	69fa      	ldr	r2, [r7, #28]
 8006102:	440a      	add	r2, r1
 8006104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006108:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800610c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	440a      	add	r2, r1
 8006124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006128:	0cdb      	lsrs	r3, r3, #19
 800612a:	04db      	lsls	r3, r3, #19
 800612c:	6113      	str	r3, [r2, #16]
 800612e:	e074      	b.n	800621a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	0151      	lsls	r1, r2, #5
 8006142:	69fa      	ldr	r2, [r7, #28]
 8006144:	440a      	add	r2, r1
 8006146:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614a:	0cdb      	lsrs	r3, r3, #19
 800614c:	04db      	lsls	r3, r3, #19
 800614e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	0151      	lsls	r1, r2, #5
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	440a      	add	r2, r1
 8006166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800616a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800616e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006172:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006180:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6999      	ldr	r1, [r3, #24]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	440b      	add	r3, r1
 800618c:	1e59      	subs	r1, r3, #1
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	fbb1 f3f3 	udiv	r3, r1, r3
 8006196:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006198:	4b9d      	ldr	r3, [pc, #628]	; (8006410 <USB_EPStartXfer+0x370>)
 800619a:	400b      	ands	r3, r1
 800619c:	69b9      	ldr	r1, [r7, #24]
 800619e:	0148      	lsls	r0, r1, #5
 80061a0:	69f9      	ldr	r1, [r7, #28]
 80061a2:	4401      	add	r1, r0
 80061a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061a8:	4313      	orrs	r3, r2
 80061aa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061b8:	691a      	ldr	r2, [r3, #16]
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	699b      	ldr	r3, [r3, #24]
 80061be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061c2:	69b9      	ldr	r1, [r7, #24]
 80061c4:	0148      	lsls	r0, r1, #5
 80061c6:	69f9      	ldr	r1, [r7, #28]
 80061c8:	4401      	add	r1, r0
 80061ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80061ce:	4313      	orrs	r3, r2
 80061d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	791b      	ldrb	r3, [r3, #4]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d11f      	bne.n	800621a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80061f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006206:	691b      	ldr	r3, [r3, #16]
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	69fa      	ldr	r2, [r7, #28]
 800620e:	440a      	add	r2, r1
 8006210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006214:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006218:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800621a:	79fb      	ldrb	r3, [r7, #7]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d14b      	bne.n	80062b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d009      	beq.n	800623c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006234:	461a      	mov	r2, r3
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	791b      	ldrb	r3, [r3, #4]
 8006240:	2b01      	cmp	r3, #1
 8006242:	d128      	bne.n	8006296 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006250:	2b00      	cmp	r3, #0
 8006252:	d110      	bne.n	8006276 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69ba      	ldr	r2, [r7, #24]
 8006264:	0151      	lsls	r1, r2, #5
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	440a      	add	r2, r1
 800626a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800626e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	e00f      	b.n	8006296 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	69ba      	ldr	r2, [r7, #24]
 8006286:	0151      	lsls	r1, r2, #5
 8006288:	69fa      	ldr	r2, [r7, #28]
 800628a:	440a      	add	r2, r1
 800628c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006294:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	0151      	lsls	r1, r2, #5
 80062a8:	69fa      	ldr	r2, [r7, #28]
 80062aa:	440a      	add	r2, r1
 80062ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062b4:	6013      	str	r3, [r2, #0]
 80062b6:	e133      	b.n	8006520 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	0151      	lsls	r1, r2, #5
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	440a      	add	r2, r1
 80062ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80062d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	791b      	ldrb	r3, [r3, #4]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d015      	beq.n	800630c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 811b 	beq.w	8006520 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	2101      	movs	r1, #1
 80062fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006300:	69f9      	ldr	r1, [r7, #28]
 8006302:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006306:	4313      	orrs	r3, r2
 8006308:	634b      	str	r3, [r1, #52]	; 0x34
 800630a:	e109      	b.n	8006520 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006318:	2b00      	cmp	r3, #0
 800631a:	d110      	bne.n	800633e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	0151      	lsls	r1, r2, #5
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	440a      	add	r2, r1
 8006332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006336:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800633a:	6013      	str	r3, [r2, #0]
 800633c:	e00f      	b.n	800635e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	69ba      	ldr	r2, [r7, #24]
 800634e:	0151      	lsls	r1, r2, #5
 8006350:	69fa      	ldr	r2, [r7, #28]
 8006352:	440a      	add	r2, r1
 8006354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800635c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	6919      	ldr	r1, [r3, #16]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	781a      	ldrb	r2, [r3, #0]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	b298      	uxth	r0, r3
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	4603      	mov	r3, r0
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 fade 	bl	8006934 <USB_WritePacket>
 8006378:	e0d2      	b.n	8006520 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	015a      	lsls	r2, r3, #5
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4413      	add	r3, r2
 8006382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	0151      	lsls	r1, r2, #5
 800638c:	69fa      	ldr	r2, [r7, #28]
 800638e:	440a      	add	r2, r1
 8006390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006394:	0cdb      	lsrs	r3, r3, #19
 8006396:	04db      	lsls	r3, r3, #19
 8006398:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	0151      	lsls	r1, r2, #5
 80063ac:	69fa      	ldr	r2, [r7, #28]
 80063ae:	440a      	add	r2, r1
 80063b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d126      	bne.n	8006414 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d2:	691a      	ldr	r2, [r3, #16]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063dc:	69b9      	ldr	r1, [r7, #24]
 80063de:	0148      	lsls	r0, r1, #5
 80063e0:	69f9      	ldr	r1, [r7, #28]
 80063e2:	4401      	add	r1, r0
 80063e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063e8:	4313      	orrs	r3, r2
 80063ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	69ba      	ldr	r2, [r7, #24]
 80063fc:	0151      	lsls	r1, r2, #5
 80063fe:	69fa      	ldr	r2, [r7, #28]
 8006400:	440a      	add	r2, r1
 8006402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006406:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800640a:	6113      	str	r3, [r2, #16]
 800640c:	e03a      	b.n	8006484 <USB_EPStartXfer+0x3e4>
 800640e:	bf00      	nop
 8006410:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	699a      	ldr	r2, [r3, #24]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	4413      	add	r3, r2
 800641e:	1e5a      	subs	r2, r3, #1
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	fbb2 f3f3 	udiv	r3, r2, r3
 8006428:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	8afa      	ldrh	r2, [r7, #22]
 8006430:	fb03 f202 	mul.w	r2, r3, r2
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006444:	691a      	ldr	r2, [r3, #16]
 8006446:	8afb      	ldrh	r3, [r7, #22]
 8006448:	04d9      	lsls	r1, r3, #19
 800644a:	4b38      	ldr	r3, [pc, #224]	; (800652c <USB_EPStartXfer+0x48c>)
 800644c:	400b      	ands	r3, r1
 800644e:	69b9      	ldr	r1, [r7, #24]
 8006450:	0148      	lsls	r0, r1, #5
 8006452:	69f9      	ldr	r1, [r7, #28]
 8006454:	4401      	add	r1, r0
 8006456:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800645a:	4313      	orrs	r3, r2
 800645c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	4413      	add	r3, r2
 8006466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800646a:	691a      	ldr	r2, [r3, #16]
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006474:	69b9      	ldr	r1, [r7, #24]
 8006476:	0148      	lsls	r0, r1, #5
 8006478:	69f9      	ldr	r1, [r7, #28]
 800647a:	4401      	add	r1, r0
 800647c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006480:	4313      	orrs	r3, r2
 8006482:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	2b01      	cmp	r3, #1
 8006488:	d10d      	bne.n	80064a6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d009      	beq.n	80064a6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6919      	ldr	r1, [r3, #16]
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	015a      	lsls	r2, r3, #5
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	4413      	add	r3, r2
 800649e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a2:	460a      	mov	r2, r1
 80064a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	791b      	ldrb	r3, [r3, #4]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d128      	bne.n	8006500 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d110      	bne.n	80064e0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	0151      	lsls	r1, r2, #5
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	440a      	add	r2, r1
 80064d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064dc:	6013      	str	r3, [r2, #0]
 80064de:	e00f      	b.n	8006500 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	015a      	lsls	r2, r3, #5
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	4413      	add	r3, r2
 80064e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	0151      	lsls	r1, r2, #5
 80064f2:	69fa      	ldr	r2, [r7, #28]
 80064f4:	440a      	add	r2, r1
 80064f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	0151      	lsls	r1, r2, #5
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	440a      	add	r2, r1
 8006516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800651a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800651e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3720      	adds	r7, #32
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	1ff80000 	.word	0x1ff80000

08006530 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	4613      	mov	r3, r2
 800653c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	785b      	ldrb	r3, [r3, #1]
 800654c:	2b01      	cmp	r3, #1
 800654e:	f040 80ce 	bne.w	80066ee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d132      	bne.n	80065c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	015a      	lsls	r2, r3, #5
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	4413      	add	r3, r2
 8006562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	0151      	lsls	r1, r2, #5
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	440a      	add	r2, r1
 8006570:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006574:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006578:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800657c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	440a      	add	r2, r1
 8006594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006598:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800659c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	015a      	lsls	r2, r3, #5
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	4413      	add	r3, r2
 80065a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	0151      	lsls	r1, r2, #5
 80065b0:	697a      	ldr	r2, [r7, #20]
 80065b2:	440a      	add	r2, r1
 80065b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065b8:	0cdb      	lsrs	r3, r3, #19
 80065ba:	04db      	lsls	r3, r3, #19
 80065bc:	6113      	str	r3, [r2, #16]
 80065be:	e04e      	b.n	800665e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	015a      	lsls	r2, r3, #5
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	4413      	add	r3, r2
 80065c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065cc:	691b      	ldr	r3, [r3, #16]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	0151      	lsls	r1, r2, #5
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	440a      	add	r2, r1
 80065d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065da:	0cdb      	lsrs	r3, r3, #19
 80065dc:	04db      	lsls	r3, r3, #19
 80065de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	0151      	lsls	r1, r2, #5
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	440a      	add	r2, r1
 80065f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006602:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	699a      	ldr	r2, [r3, #24]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	429a      	cmp	r2, r3
 800660e:	d903      	bls.n	8006618 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	68da      	ldr	r2, [r3, #12]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	440a      	add	r2, r1
 800662e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006632:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006636:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006644:	691a      	ldr	r2, [r3, #16]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800664e:	6939      	ldr	r1, [r7, #16]
 8006650:	0148      	lsls	r0, r1, #5
 8006652:	6979      	ldr	r1, [r7, #20]
 8006654:	4401      	add	r1, r0
 8006656:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800665a:	4313      	orrs	r3, r2
 800665c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d11e      	bne.n	80066a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	695b      	ldr	r3, [r3, #20]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d009      	beq.n	8006680 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	015a      	lsls	r2, r3, #5
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	4413      	add	r3, r2
 8006674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006678:	461a      	mov	r2, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	4413      	add	r3, r2
 8006688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	440a      	add	r2, r1
 8006696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800669a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	e097      	b.n	80067d2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	0151      	lsls	r1, r2, #5
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	440a      	add	r2, r1
 80066b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f000 8083 	beq.w	80067d2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f003 030f 	and.w	r3, r3, #15
 80066dc:	2101      	movs	r1, #1
 80066de:	fa01 f303 	lsl.w	r3, r1, r3
 80066e2:	6979      	ldr	r1, [r7, #20]
 80066e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066e8:	4313      	orrs	r3, r2
 80066ea:	634b      	str	r3, [r1, #52]	; 0x34
 80066ec:	e071      	b.n	80067d2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	693a      	ldr	r2, [r7, #16]
 80066fe:	0151      	lsls	r1, r2, #5
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	440a      	add	r2, r1
 8006704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006708:	0cdb      	lsrs	r3, r3, #19
 800670a:	04db      	lsls	r3, r3, #19
 800670c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	4413      	add	r3, r2
 8006716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	693a      	ldr	r2, [r7, #16]
 800671e:	0151      	lsls	r1, r2, #5
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	440a      	add	r2, r1
 8006724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006728:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800672c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006730:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	68da      	ldr	r2, [r3, #12]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	68da      	ldr	r2, [r3, #12]
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	0151      	lsls	r1, r2, #5
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	440a      	add	r2, r1
 8006760:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006764:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006768:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006780:	6939      	ldr	r1, [r7, #16]
 8006782:	0148      	lsls	r0, r1, #5
 8006784:	6979      	ldr	r1, [r7, #20]
 8006786:	4401      	add	r1, r0
 8006788:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800678c:	4313      	orrs	r3, r2
 800678e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d10d      	bne.n	80067b2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d009      	beq.n	80067b2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	6919      	ldr	r1, [r3, #16]
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ae:	460a      	mov	r2, r1
 80067b0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	0151      	lsls	r1, r2, #5
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	440a      	add	r2, r1
 80067c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	371c      	adds	r7, #28
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80067ee:	2300      	movs	r3, #0
 80067f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	785b      	ldrb	r3, [r3, #1]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d14a      	bne.n	8006894 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	015a      	lsls	r2, r3, #5
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	4413      	add	r3, r2
 8006808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006812:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006816:	f040 8086 	bne.w	8006926 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	015a      	lsls	r2, r3, #5
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	4413      	add	r3, r2
 8006824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	7812      	ldrb	r2, [r2, #0]
 800682e:	0151      	lsls	r1, r2, #5
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	440a      	add	r2, r1
 8006834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006838:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800683c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	7812      	ldrb	r2, [r2, #0]
 8006852:	0151      	lsls	r1, r2, #5
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	440a      	add	r2, r1
 8006858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800685c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006860:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f242 7210 	movw	r2, #10000	; 0x2710
 800686e:	4293      	cmp	r3, r2
 8006870:	d902      	bls.n	8006878 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	75fb      	strb	r3, [r7, #23]
          break;
 8006876:	e056      	b.n	8006926 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800688c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006890:	d0e7      	beq.n	8006862 <USB_EPStopXfer+0x82>
 8006892:	e048      	b.n	8006926 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068ac:	d13b      	bne.n	8006926 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	7812      	ldrb	r2, [r2, #0]
 80068c2:	0151      	lsls	r1, r2, #5
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	440a      	add	r2, r1
 80068c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	683a      	ldr	r2, [r7, #0]
 80068e4:	7812      	ldrb	r2, [r2, #0]
 80068e6:	0151      	lsls	r1, r2, #5
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	440a      	add	r2, r1
 80068ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3301      	adds	r3, #1
 80068fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8006902:	4293      	cmp	r3, r2
 8006904:	d902      	bls.n	800690c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	75fb      	strb	r3, [r7, #23]
          break;
 800690a:	e00c      	b.n	8006926 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	015a      	lsls	r2, r3, #5
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	4413      	add	r3, r2
 8006916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006920:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006924:	d0e7      	beq.n	80068f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006926:	7dfb      	ldrb	r3, [r7, #23]
}
 8006928:	4618      	mov	r0, r3
 800692a:	371c      	adds	r7, #28
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006934:	b480      	push	{r7}
 8006936:	b089      	sub	sp, #36	; 0x24
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	4611      	mov	r1, r2
 8006940:	461a      	mov	r2, r3
 8006942:	460b      	mov	r3, r1
 8006944:	71fb      	strb	r3, [r7, #7]
 8006946:	4613      	mov	r3, r2
 8006948:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006952:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006956:	2b00      	cmp	r3, #0
 8006958:	d123      	bne.n	80069a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800695a:	88bb      	ldrh	r3, [r7, #4]
 800695c:	3303      	adds	r3, #3
 800695e:	089b      	lsrs	r3, r3, #2
 8006960:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006962:	2300      	movs	r3, #0
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	e018      	b.n	800699a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006968:	79fb      	ldrb	r3, [r7, #7]
 800696a:	031a      	lsls	r2, r3, #12
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	4413      	add	r3, r2
 8006970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006974:	461a      	mov	r2, r3
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	3301      	adds	r3, #1
 8006980:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	3301      	adds	r3, #1
 8006986:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	3301      	adds	r3, #1
 800698c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	3301      	adds	r3, #1
 8006992:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	3301      	adds	r3, #1
 8006998:	61bb      	str	r3, [r7, #24]
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d3e2      	bcc.n	8006968 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3724      	adds	r7, #36	; 0x24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr

080069b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b08b      	sub	sp, #44	; 0x2c
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	4613      	mov	r3, r2
 80069bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	089b      	lsrs	r3, r3, #2
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80069ce:	88fb      	ldrh	r3, [r7, #6]
 80069d0:	f003 0303 	and.w	r3, r3, #3
 80069d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80069d6:	2300      	movs	r3, #0
 80069d8:	623b      	str	r3, [r7, #32]
 80069da:	e014      	b.n	8006a06 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	3301      	adds	r3, #1
 80069ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	3301      	adds	r3, #1
 80069f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	3301      	adds	r3, #1
 80069f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	3301      	adds	r3, #1
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	3301      	adds	r3, #1
 8006a04:	623b      	str	r3, [r7, #32]
 8006a06:	6a3a      	ldr	r2, [r7, #32]
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d3e6      	bcc.n	80069dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a0e:	8bfb      	ldrh	r3, [r7, #30]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01e      	beq.n	8006a52 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a14:	2300      	movs	r3, #0
 8006a16:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f107 0310 	add.w	r3, r7, #16
 8006a24:	6812      	ldr	r2, [r2, #0]
 8006a26:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	6a3b      	ldr	r3, [r7, #32]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	00db      	lsls	r3, r3, #3
 8006a30:	fa22 f303 	lsr.w	r3, r2, r3
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a38:	701a      	strb	r2, [r3, #0]
      i++;
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	3301      	adds	r3, #1
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006a46:	8bfb      	ldrh	r3, [r7, #30]
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006a4c:	8bfb      	ldrh	r3, [r7, #30]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1ea      	bne.n	8006a28 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	372c      	adds	r7, #44	; 0x2c
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	785b      	ldrb	r3, [r3, #1]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d12c      	bne.n	8006ad6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	db12      	blt.n	8006ab4 <USB_EPSetStall+0x54>
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00f      	beq.n	8006ab4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	0151      	lsls	r1, r2, #5
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	440a      	add	r2, r1
 8006aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ab2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	68ba      	ldr	r2, [r7, #8]
 8006ac4:	0151      	lsls	r1, r2, #5
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	440a      	add	r2, r1
 8006aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ace:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	e02b      	b.n	8006b2e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	db12      	blt.n	8006b0e <USB_EPSetStall+0xae>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00f      	beq.n	8006b0e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	0151      	lsls	r1, r2, #5
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	440a      	add	r2, r1
 8006b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b0c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	0151      	lsls	r1, r2, #5
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	440a      	add	r2, r1
 8006b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b2c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	785b      	ldrb	r3, [r3, #1]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d128      	bne.n	8006baa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68ba      	ldr	r2, [r7, #8]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b76:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	791b      	ldrb	r3, [r3, #4]
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d003      	beq.n	8006b88 <USB_EPClearStall+0x4c>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	791b      	ldrb	r3, [r3, #4]
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d138      	bne.n	8006bfa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	e027      	b.n	8006bfa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	0151      	lsls	r1, r2, #5
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	440a      	add	r2, r1
 8006bc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bc4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bc8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	791b      	ldrb	r3, [r3, #4]
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d003      	beq.n	8006bda <USB_EPClearStall+0x9e>
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	791b      	ldrb	r3, [r3, #4]
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d10f      	bne.n	8006bfa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	0151      	lsls	r1, r2, #5
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	440a      	add	r2, r1
 8006bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bf8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3714      	adds	r7, #20
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	460b      	mov	r3, r1
 8006c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006c2a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	78fb      	ldrb	r3, [r7, #3]
 8006c36:	011b      	lsls	r3, r3, #4
 8006c38:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006c3c:	68f9      	ldr	r1, [r7, #12]
 8006c3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c42:	4313      	orrs	r3, r2
 8006c44:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3714      	adds	r7, #20
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c6e:	f023 0303 	bic.w	r3, r3, #3
 8006c72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c82:	f023 0302 	bic.w	r3, r3, #2
 8006c86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b085      	sub	sp, #20
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cb0:	f023 0303 	bic.w	r3, r3, #3
 8006cb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cc4:	f043 0302 	orr.w	r3, r3, #2
 8006cc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	4013      	ands	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3714      	adds	r7, #20
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006cfe:	b480      	push	{r7}
 8006d00:	b085      	sub	sp, #20
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	0c1b      	lsrs	r3, r3, #16
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b085      	sub	sp, #20
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	4013      	ands	r3, r2
 8006d54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	b29b      	uxth	r3, r3
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006d76:	78fb      	ldrb	r3, [r7, #3]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	4013      	ands	r3, r2
 8006d92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d94:	68bb      	ldr	r3, [r7, #8]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b087      	sub	sp, #28
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	460b      	mov	r3, r1
 8006dac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006dc6:	78fb      	ldrb	r3, [r7, #3]
 8006dc8:	f003 030f 	and.w	r3, r3, #15
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd2:	01db      	lsls	r3, r3, #7
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006ddc:	78fb      	ldrb	r3, [r7, #3]
 8006dde:	015a      	lsls	r2, r3, #5
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	4013      	ands	r3, r2
 8006dee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006df0:	68bb      	ldr	r3, [r7, #8]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	370c      	adds	r7, #12
 8006e12:	46bd      	mov	sp, r7
 8006e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e18:	4770      	bx	lr

08006e1a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006e1a:	b480      	push	{r7}
 8006e1c:	b085      	sub	sp, #20
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e38:	f023 0307 	bic.w	r3, r3, #7
 8006e3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	333c      	adds	r3, #60	; 0x3c
 8006e76:	3304      	adds	r3, #4
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	4a26      	ldr	r2, [pc, #152]	; (8006f18 <USB_EP0_OutStart+0xb8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d90a      	bls.n	8006e9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e94:	d101      	bne.n	8006e9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e037      	b.n	8006f0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006eb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006eb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ec8:	f043 0318 	orr.w	r3, r3, #24
 8006ecc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006edc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006ee0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006ee2:	7afb      	ldrb	r3, [r7, #11]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d10f      	bne.n	8006f08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eee:	461a      	mov	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f02:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006f06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	371c      	adds	r7, #28
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	4f54300a 	.word	0x4f54300a

08006f1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f24:	2300      	movs	r3, #0
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4a13      	ldr	r2, [pc, #76]	; (8006f80 <USB_CoreReset+0x64>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d901      	bls.n	8006f3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e01b      	b.n	8006f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	daf2      	bge.n	8006f28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	691b      	ldr	r3, [r3, #16]
 8006f4a:	f043 0201 	orr.w	r2, r3, #1
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3301      	adds	r3, #1
 8006f56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4a09      	ldr	r2, [pc, #36]	; (8006f80 <USB_CoreReset+0x64>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d901      	bls.n	8006f64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e006      	b.n	8006f72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	f003 0301 	and.w	r3, r3, #1
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d0f0      	beq.n	8006f52 <USB_CoreReset+0x36>

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3714      	adds	r7, #20
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr
 8006f7e:	bf00      	nop
 8006f80:	00030d40 	.word	0x00030d40

08006f84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  USBD_COMPOSITE_Mount_Class();
 8006f88:	f002 fab4 	bl	80094f4 <USBD_COMPOSITE_Mount_Class>
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_HS) != USBD_OK)
  {
    Error_Handler();
  }
#else
  if (USBD_Init(&hUsbDevice, &USBD_Desc, DEVICE_FS) != USBD_OK)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	4920      	ldr	r1, [pc, #128]	; (8007010 <MX_USB_DEVICE_Init+0x8c>)
 8006f90:	4820      	ldr	r0, [pc, #128]	; (8007014 <MX_USB_DEVICE_Init+0x90>)
 8006f92:	f003 fab3 	bl	800a4fc <USBD_Init>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <MX_USB_DEVICE_Init+0x1c>
  {
    Error_Handler();
 8006f9c:	f7fa fd30 	bl	8001a00 <Error_Handler>
  }
#endif
  if (USBD_RegisterClass(&hUsbDevice, &USBD_COMPOSITE) != USBD_OK)
 8006fa0:	491d      	ldr	r1, [pc, #116]	; (8007018 <MX_USB_DEVICE_Init+0x94>)
 8006fa2:	481c      	ldr	r0, [pc, #112]	; (8007014 <MX_USB_DEVICE_Init+0x90>)
 8006fa4:	f003 fad6 	bl	800a554 <USBD_RegisterClass>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8006fae:	f7fa fd27 	bl	8001a00 <Error_Handler>
  }
#if (USBD_USE_CDC_ACM == 1)
  if (USBD_CDC_ACM_RegisterInterface(&hUsbDevice, &USBD_CDC_ACM_fops) != USBD_OK)
 8006fb2:	491a      	ldr	r1, [pc, #104]	; (800701c <MX_USB_DEVICE_Init+0x98>)
 8006fb4:	4817      	ldr	r0, [pc, #92]	; (8007014 <MX_USB_DEVICE_Init+0x90>)
 8006fb6:	f001 feb5 	bl	8008d24 <USBD_CDC_ACM_RegisterInterface>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8006fc0:	f7fa fd1e 	bl	8001a00 <Error_Handler>
  {
    Error_Handler();
  }
#endif
#if (USBD_USE_UAC_MIC == 1)
  if (USBD_AUDIO_MIC_RegisterInterface(&hUsbDevice, &USBD_AUDIO_MIC_fops_FS) != USBD_OK)
 8006fc4:	4916      	ldr	r1, [pc, #88]	; (8007020 <MX_USB_DEVICE_Init+0x9c>)
 8006fc6:	4813      	ldr	r0, [pc, #76]	; (8007014 <MX_USB_DEVICE_Init+0x90>)
 8006fc8:	f000 ff34 	bl	8007e34 <USBD_AUDIO_MIC_RegisterInterface>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <MX_USB_DEVICE_Init+0x52>
  {
    Error_Handler();
 8006fd2:	f7fa fd15 	bl	8001a00 <Error_Handler>
  }
#endif
#if (USBD_USE_UAC_SPKR == 1)
  if (USBD_AUDIO_SPKR_RegisterInterface(&hUsbDevice, &USBD_AUDIO_SPKR_fops) != USBD_OK)
 8006fd6:	4913      	ldr	r1, [pc, #76]	; (8007024 <MX_USB_DEVICE_Init+0xa0>)
 8006fd8:	480e      	ldr	r0, [pc, #56]	; (8007014 <MX_USB_DEVICE_Init+0x90>)
 8006fda:	f001 fab9 	bl	8008550 <USBD_AUDIO_SPKR_RegisterInterface>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <MX_USB_DEVICE_Init+0x64>
  {
    Error_Handler();
 8006fe4:	f7fa fd0c 	bl	8001a00 <Error_Handler>
  {
    Error_Handler();
  }
#endif
#if (USBD_USE_DFU == 1)
  if (USBD_DFU_RegisterMedia(&hUsbDevice, &USBD_DFU_fops) != USBD_OK)
 8006fe8:	490f      	ldr	r1, [pc, #60]	; (8007028 <MX_USB_DEVICE_Init+0xa4>)
 8006fea:	480a      	ldr	r0, [pc, #40]	; (8007014 <MX_USB_DEVICE_Init+0x90>)
 8006fec:	f002 fed8 	bl	8009da0 <USBD_DFU_RegisterMedia>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <MX_USB_DEVICE_Init+0x76>
  {
    Error_Handler();
 8006ff6:	f7fa fd03 	bl	8001a00 <Error_Handler>
  if (USBD_PRNT_RegisterInterface(&hUsbDevice, &USBD_PRNT_fops) != USBD_OK)
  {
    Error_Handler();
  }
#endif
  if (USBD_Start(&hUsbDevice) != USBD_OK)
 8006ffa:	4806      	ldr	r0, [pc, #24]	; (8007014 <MX_USB_DEVICE_Init+0x90>)
 8006ffc:	f003 fae8 	bl	800a5d0 <USBD_Start>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <MX_USB_DEVICE_Init+0x86>
  {
    Error_Handler();
 8007006:	f7fa fcfb 	bl	8001a00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800700a:	bf00      	nop
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	20000068 	.word	0x20000068
 8007014:	20000f74 	.word	0x20000f74
 8007018:	200003c0 	.word	0x200003c0
 800701c:	20000054 	.word	0x20000054
 8007020:	20000014 	.word	0x20000014
 8007024:	20000038 	.word	0x20000038
 8007028:	200000b8 	.word	0x200000b8

0800702c <Audio_Init>:
* @param  BitRes: desired bit resolution
* @param  ChnlNbr: number of channel to be configured
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_Init(uint32_t  AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  return USBD_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr

08007046 <Audio_DeInit>:
* @brief  De-Initializes the AUDIO media low layer.
* @param  options: Reserved for future use
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_DeInit(uint32_t options)
{
 8007046:	b480      	push	{r7}
 8007048:	b083      	sub	sp, #12
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
	return USBD_OK;
 800704e:	2300      	movs	r3, #0
}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <Audio_Record>:
/**
* @brief  Start audio recording engine
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_Record(void)
{
 800705c:	b480      	push	{r7}
 800705e:	af00      	add	r7, sp, #0
	return USBD_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <Audio_VolumeCtl>:
* @brief  Controls AUDIO Volume.
* @param  vol: Volume level
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_VolumeCtl(int16_t Volume)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	4603      	mov	r3, r0
 8007074:	80fb      	strh	r3, [r7, #6]
  /* Call low layer volume setting function */
  uint32_t j = 0;
 8007076:	2300      	movs	r3, #0
 8007078:	60fb      	str	r3, [r7, #12]

  /* Find the setting nearest to the desired setting */
	while(j<64 && abs(Volume-vol_table[j]) > abs(Volume-vol_table[j+1]))
 800707a:	e002      	b.n	8007082 <Audio_VolumeCtl+0x16>
	{
		j++;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	3301      	adds	r3, #1
 8007080:	60fb      	str	r3, [r7, #12]
	while(j<64 && abs(Volume-vol_table[j]) > abs(Volume-vol_table[j+1]))
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2b3f      	cmp	r3, #63	; 0x3f
 8007086:	d817      	bhi.n	80070b8 <Audio_VolumeCtl+0x4c>
 8007088:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800708c:	490e      	ldr	r1, [pc, #56]	; (80070c8 <Audio_VolumeCtl+0x5c>)
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
 8007094:	1a9b      	subs	r3, r3, r2
 8007096:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800709a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800709e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070a2:	68f9      	ldr	r1, [r7, #12]
 80070a4:	3101      	adds	r1, #1
 80070a6:	4808      	ldr	r0, [pc, #32]	; (80070c8 <Audio_VolumeCtl+0x5c>)
 80070a8:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 80070ac:	1a5b      	subs	r3, r3, r1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	bfb8      	it	lt
 80070b2:	425b      	neglt	r3, r3
 80070b4:	429a      	cmp	r2, r3
 80070b6:	dce1      	bgt.n	800707c <Audio_VolumeCtl+0x10>
	}
  /** TODO */
  return USBD_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3714      	adds	r7, #20
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	0800d330 	.word	0x0800d330

080070cc <Audio_MuteCtl>:
* @brief  Controls AUDIO Mute.
* @param  cmd: Command opcode
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_MuteCtl(uint8_t cmd)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	4603      	mov	r3, r0
 80070d4:	71fb      	strb	r3, [r7, #7]
  return USBD_OK;
 80070d6:	2300      	movs	r3, #0
}
 80070d8:	4618      	mov	r0, r3
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr

080070e4 <Audio_Stop>:
* @brief  Stops audio acquisition
* @param  none
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_Stop(void)
{
 80070e4:	b480      	push	{r7}
 80070e6:	af00      	add	r7, sp, #0
  return USBD_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr

080070f4 <Audio_Pause>:
* @param  none
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/

static int8_t Audio_Pause(void)
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
  return USBD_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <Audio_Resume>:
* @brief  Resumes audio acquisition
* @param  none
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/
static int8_t Audio_Resume(void)
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
  return USBD_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <Audio_CommandMgr>:
* @param  None
* @retval BSP_ERROR_NONE in case of success, AUDIO_ERROR otherwise
*/

static int8_t Audio_CommandMgr(uint8_t cmd)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	4603      	mov	r3, r0
 800711c:	71fb      	strb	r3, [r7, #7]
  return USBD_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <AUDIO_Init>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use 
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8007138:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr

08007146 <AUDIO_DeInit>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit(uint32_t options)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800714e:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8007150:	4618      	mov	r0, r3
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <AUDIO_AudioCmd>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	4613      	mov	r3, r2
 8007168:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800716a:	79fb      	ldrb	r3, [r7, #7]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d001      	beq.n	8007174 <AUDIO_AudioCmd+0x18>
 8007170:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;	
 8007172:	e000      	b.n	8007176 <AUDIO_AudioCmd+0x1a>
    break;
 8007174:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8007176:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8007178:	4618      	mov	r0, r3
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <AUDIO_VolumeCtl>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl(uint8_t vol)
{
 8007184:	b480      	push	{r7}
 8007186:	b083      	sub	sp, #12
 8007188:	af00      	add	r7, sp, #0
 800718a:	4603      	mov	r3, r0
 800718c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  //cs43l22_SetVolume(CS43L22_I2C_ADDRESS, vol);
  return (USBD_OK);
 800718e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007190:	4618      	mov	r0, r3
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <AUDIO_MuteCtl>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl(uint8_t cmd)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  //cs43l22_SetMute(CS43L22_I2C_ADDRESS, cmd);
  return (USBD_OK);
 80071a6:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <AUDIO_PeriodicTC>:
  * @brief  AUDIO_PeriodicT
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	4613      	mov	r3, r2
 80071c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 80071c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <AUDIO_GetState>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState(void)
{
 80071d0:	b480      	push	{r7}
 80071d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80071d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <CDC_Init>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init(uint8_t cdc_ch)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */

  /* ##-1- Set Application Buffers */
  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, RX_Buffer[cdc_ch]);
 80071ea:	79fb      	ldrb	r3, [r7, #7]
 80071ec:	01db      	lsls	r3, r3, #7
 80071ee:	4a06      	ldr	r2, [pc, #24]	; (8007208 <CDC_Init+0x28>)
 80071f0:	441a      	add	r2, r3
 80071f2:	79fb      	ldrb	r3, [r7, #7]
 80071f4:	4905      	ldr	r1, [pc, #20]	; (800720c <CDC_Init+0x2c>)
 80071f6:	4618      	mov	r0, r3
 80071f8:	f001 fdce 	bl	8008d98 <USBD_CDC_SetRxBuffer>
  //  {
  //    /* Starting Error */
  //    Error_Handler();
  //  }

  return (USBD_OK);
 80071fc:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	20001290 	.word	0x20001290
 800720c:	20000f74 	.word	0x20000f74

08007210 <CDC_DeInit>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit(uint8_t cdc_ch)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	4603      	mov	r3, r0
 8007218:	71fb      	strb	r3, [r7, #7]
  //  if (HAL_UART_DeInit(CDC_CH_To_UART_Handle(cdc_ch)) != HAL_OK)
  //  {
  //    /* Initialization Error */
  //    Error_Handler();
  //  }
  return (USBD_OK);
 800721a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <CDC_Control>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control(uint8_t cdc_ch, uint8_t cmd, uint8_t *pbuf, uint16_t length)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	603a      	str	r2, [r7, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	4603      	mov	r3, r0
 8007234:	71fb      	strb	r3, [r7, #7]
 8007236:	460b      	mov	r3, r1
 8007238:	71bb      	strb	r3, [r7, #6]
 800723a:	4613      	mov	r3, r2
 800723c:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch (cmd)
 800723e:	79bb      	ldrb	r3, [r7, #6]
 8007240:	2b23      	cmp	r3, #35	; 0x23
 8007242:	f200 80b6 	bhi.w	80073b2 <CDC_Control+0x18a>
 8007246:	a201      	add	r2, pc, #4	; (adr r2, 800724c <CDC_Control+0x24>)
 8007248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724c:	080073b3 	.word	0x080073b3
 8007250:	080073b3 	.word	0x080073b3
 8007254:	080073b3 	.word	0x080073b3
 8007258:	080073b3 	.word	0x080073b3
 800725c:	080073b3 	.word	0x080073b3
 8007260:	080073b3 	.word	0x080073b3
 8007264:	080073b3 	.word	0x080073b3
 8007268:	080073b3 	.word	0x080073b3
 800726c:	080073b3 	.word	0x080073b3
 8007270:	080073b3 	.word	0x080073b3
 8007274:	080073b3 	.word	0x080073b3
 8007278:	080073b3 	.word	0x080073b3
 800727c:	080073b3 	.word	0x080073b3
 8007280:	080073b3 	.word	0x080073b3
 8007284:	080073b3 	.word	0x080073b3
 8007288:	080073b3 	.word	0x080073b3
 800728c:	080073b3 	.word	0x080073b3
 8007290:	080073b3 	.word	0x080073b3
 8007294:	080073b3 	.word	0x080073b3
 8007298:	080073b3 	.word	0x080073b3
 800729c:	080073b3 	.word	0x080073b3
 80072a0:	080073b3 	.word	0x080073b3
 80072a4:	080073b3 	.word	0x080073b3
 80072a8:	080073b3 	.word	0x080073b3
 80072ac:	080073b3 	.word	0x080073b3
 80072b0:	080073b3 	.word	0x080073b3
 80072b4:	080073b3 	.word	0x080073b3
 80072b8:	080073b3 	.word	0x080073b3
 80072bc:	080073b3 	.word	0x080073b3
 80072c0:	080073b3 	.word	0x080073b3
 80072c4:	080073b3 	.word	0x080073b3
 80072c8:	080073b3 	.word	0x080073b3
 80072cc:	080072dd 	.word	0x080072dd
 80072d0:	0800733d 	.word	0x0800733d
 80072d4:	080073b3 	.word	0x080073b3
 80072d8:	080073b3 	.word	0x080073b3
    /*                                        3 - Mark                             */
    /*                                        4 - Space                            */
    /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
    /*******************************************************************************/
  case CDC_SET_LINE_CODING:
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	461a      	mov	r2, r3
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	3301      	adds	r3, #1
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	021b      	lsls	r3, r3, #8
 80072ea:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	3302      	adds	r3, #2
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	041b      	lsls	r3, r3, #16
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 80072f4:	431a      	orrs	r2, r3
                                             (pbuf[2] << 16) | (pbuf[3] << 24));
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	3303      	adds	r3, #3
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	061b      	lsls	r3, r3, #24
 80072fe:	431a      	orrs	r2, r3
    Line_Coding[cdc_ch].bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |
 8007300:	79fb      	ldrb	r3, [r7, #7]
 8007302:	4611      	mov	r1, r2
 8007304:	4a2f      	ldr	r2, [pc, #188]	; (80073c4 <CDC_Control+0x19c>)
 8007306:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    Line_Coding[cdc_ch].format = pbuf[4];
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	7911      	ldrb	r1, [r2, #4]
 8007310:	4a2c      	ldr	r2, [pc, #176]	; (80073c4 <CDC_Control+0x19c>)
 8007312:	00db      	lsls	r3, r3, #3
 8007314:	4413      	add	r3, r2
 8007316:	460a      	mov	r2, r1
 8007318:	711a      	strb	r2, [r3, #4]
    Line_Coding[cdc_ch].paritytype = pbuf[5];
 800731a:	79fb      	ldrb	r3, [r7, #7]
 800731c:	683a      	ldr	r2, [r7, #0]
 800731e:	7951      	ldrb	r1, [r2, #5]
 8007320:	4a28      	ldr	r2, [pc, #160]	; (80073c4 <CDC_Control+0x19c>)
 8007322:	00db      	lsls	r3, r3, #3
 8007324:	4413      	add	r3, r2
 8007326:	460a      	mov	r2, r1
 8007328:	715a      	strb	r2, [r3, #5]
    Line_Coding[cdc_ch].datatype = pbuf[6];
 800732a:	79fb      	ldrb	r3, [r7, #7]
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	7991      	ldrb	r1, [r2, #6]
 8007330:	4a24      	ldr	r2, [pc, #144]	; (80073c4 <CDC_Control+0x19c>)
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	4413      	add	r3, r2
 8007336:	460a      	mov	r2, r1
 8007338:	719a      	strb	r2, [r3, #6]

    //Change_UART_Setting(cdc_ch);
    break;
 800733a:	e03b      	b.n	80073b4 <CDC_Control+0x18c>

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(Line_Coding[cdc_ch].bitrate);
 800733c:	79fb      	ldrb	r3, [r7, #7]
 800733e:	4a21      	ldr	r2, [pc, #132]	; (80073c4 <CDC_Control+0x19c>)
 8007340:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007344:	b2da      	uxtb	r2, r3
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	701a      	strb	r2, [r3, #0]
    pbuf[1] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 8);
 800734a:	79fb      	ldrb	r3, [r7, #7]
 800734c:	4a1d      	ldr	r2, [pc, #116]	; (80073c4 <CDC_Control+0x19c>)
 800734e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007352:	0a1a      	lsrs	r2, r3, #8
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	3301      	adds	r3, #1
 8007358:	b2d2      	uxtb	r2, r2
 800735a:	701a      	strb	r2, [r3, #0]
    pbuf[2] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 16);
 800735c:	79fb      	ldrb	r3, [r7, #7]
 800735e:	4a19      	ldr	r2, [pc, #100]	; (80073c4 <CDC_Control+0x19c>)
 8007360:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007364:	0c1a      	lsrs	r2, r3, #16
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	3302      	adds	r3, #2
 800736a:	b2d2      	uxtb	r2, r2
 800736c:	701a      	strb	r2, [r3, #0]
    pbuf[3] = (uint8_t)(Line_Coding[cdc_ch].bitrate >> 24);
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	4a14      	ldr	r2, [pc, #80]	; (80073c4 <CDC_Control+0x19c>)
 8007372:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007376:	0e1a      	lsrs	r2, r3, #24
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	3303      	adds	r3, #3
 800737c:	b2d2      	uxtb	r2, r2
 800737e:	701a      	strb	r2, [r3, #0]
    pbuf[4] = Line_Coding[cdc_ch].format;
 8007380:	79fb      	ldrb	r3, [r7, #7]
 8007382:	683a      	ldr	r2, [r7, #0]
 8007384:	3204      	adds	r2, #4
 8007386:	490f      	ldr	r1, [pc, #60]	; (80073c4 <CDC_Control+0x19c>)
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	440b      	add	r3, r1
 800738c:	791b      	ldrb	r3, [r3, #4]
 800738e:	7013      	strb	r3, [r2, #0]
    pbuf[5] = Line_Coding[cdc_ch].paritytype;
 8007390:	79fb      	ldrb	r3, [r7, #7]
 8007392:	683a      	ldr	r2, [r7, #0]
 8007394:	3205      	adds	r2, #5
 8007396:	490b      	ldr	r1, [pc, #44]	; (80073c4 <CDC_Control+0x19c>)
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	440b      	add	r3, r1
 800739c:	795b      	ldrb	r3, [r3, #5]
 800739e:	7013      	strb	r3, [r2, #0]
    pbuf[6] = Line_Coding[cdc_ch].datatype;
 80073a0:	79fb      	ldrb	r3, [r7, #7]
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	3206      	adds	r2, #6
 80073a6:	4907      	ldr	r1, [pc, #28]	; (80073c4 <CDC_Control+0x19c>)
 80073a8:	00db      	lsls	r3, r3, #3
 80073aa:	440b      	add	r3, r1
 80073ac:	799b      	ldrb	r3, [r3, #6]
 80073ae:	7013      	strb	r3, [r2, #0]
    break;
 80073b0:	e000      	b.n	80073b4 <CDC_Control+0x18c>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80073b2:	bf00      	nop
  }

  return (USBD_OK);
 80073b4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	20001390 	.word	0x20001390

080073c8 <CDC_Receive>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	4603      	mov	r3, r0
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
 80073d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 6 */
  //HAL_UART_Transmit_DMA(CDC_CH_To_UART_Handle(cdc_ch), Buf, *Len);
  CDC_Transmit(cdc_ch, Buf, *Len); // echo back on same channel
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	b29a      	uxth	r2, r3
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	68b9      	ldr	r1, [r7, #8]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 f825 	bl	8007430 <CDC_Transmit>

  USBD_CDC_SetRxBuffer(cdc_ch, &hUsbDevice, &Buf[0]);
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	68ba      	ldr	r2, [r7, #8]
 80073ea:	4907      	ldr	r1, [pc, #28]	; (8007408 <CDC_Receive+0x40>)
 80073ec:	4618      	mov	r0, r3
 80073ee:	f001 fcd3 	bl	8008d98 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(cdc_ch, &hUsbDevice);
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	4904      	ldr	r1, [pc, #16]	; (8007408 <CDC_Receive+0x40>)
 80073f6:	4618      	mov	r0, r3
 80073f8:	f001 fd2e 	bl	8008e58 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80073fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}
 8007406:	bf00      	nop
 8007408:	20000f74 	.word	0x20000f74

0800740c <CDC_TransmitCplt>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt(uint8_t cdc_ch, uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	607a      	str	r2, [r7, #4]
 8007416:	461a      	mov	r2, r3
 8007418:	4603      	mov	r3, r0
 800741a:	73fb      	strb	r3, [r7, #15]
 800741c:	4613      	mov	r3, r2
 800741e:	73bb      	strb	r3, [r7, #14]
  return (USBD_OK);
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
	...

08007430 <CDC_Transmit>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit(uint8_t ch, uint8_t *Buf, uint16_t Len)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	6039      	str	r1, [r7, #0]
 800743a:	71fb      	strb	r3, [r7, #7]
 800743c:	4613      	mov	r3, r2
 800743e:	80bb      	strh	r3, [r7, #4]
  uint8_t result = USBD_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  extern USBD_CDC_ACM_HandleTypeDef CDC_ACM_Class_Data[];
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8007444:	2300      	movs	r3, #0
 8007446:	60bb      	str	r3, [r7, #8]
  hcdc = &CDC_ACM_Class_Data[ch];
 8007448:	79fb      	ldrb	r3, [r7, #7]
 800744a:	f240 421c 	movw	r2, #1052	; 0x41c
 800744e:	fb02 f303 	mul.w	r3, r2, r3
 8007452:	4a0e      	ldr	r2, [pc, #56]	; (800748c <CDC_Transmit+0x5c>)
 8007454:	4413      	add	r3, r2
 8007456:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0)
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800745e:	2b00      	cmp	r3, #0
 8007460:	d001      	beq.n	8007466 <CDC_Transmit+0x36>
  {
    return USBD_BUSY;
 8007462:	2301      	movs	r3, #1
 8007464:	e00d      	b.n	8007482 <CDC_Transmit+0x52>
  }
  USBD_CDC_SetTxBuffer(ch, &hUsbDevice, Buf, Len);
 8007466:	88bb      	ldrh	r3, [r7, #4]
 8007468:	79f8      	ldrb	r0, [r7, #7]
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	4908      	ldr	r1, [pc, #32]	; (8007490 <CDC_Transmit+0x60>)
 800746e:	f001 fc6f 	bl	8008d50 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(ch, &hUsbDevice);
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	4906      	ldr	r1, [pc, #24]	; (8007490 <CDC_Transmit+0x60>)
 8007476:	4618      	mov	r0, r3
 8007478:	f001 fcac 	bl	8008dd4 <USBD_CDC_TransmitPacket>
 800747c:	4603      	mov	r3, r0
 800747e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007480:	7bfb      	ldrb	r3, [r7, #15]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20002bfc 	.word	0x20002bfc
 8007490:	20000f74 	.word	0x20000f74

08007494 <USBD_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	6039      	str	r1, [r7, #0]
 800749e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_DeviceDesc);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	2212      	movs	r2, #18
 80074a4:	801a      	strh	r2, [r3, #0]
  return USBD_DeviceDesc;
 80074a6:	4b03      	ldr	r3, [pc, #12]	; (80074b4 <USBD_DeviceDescriptor+0x20>)
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	370c      	adds	r7, #12
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr
 80074b4:	20000084 	.word	0x20000084

080074b8 <USBD_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	4603      	mov	r3, r0
 80074c0:	6039      	str	r1, [r7, #0]
 80074c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2204      	movs	r2, #4
 80074c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80074ca:	4b03      	ldr	r3, [pc, #12]	; (80074d8 <USBD_LangIDStrDescriptor+0x20>)
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	20000098 	.word	0x20000098

080074dc <USBD_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	4603      	mov	r3, r0
 80074e4:	6039      	str	r1, [r7, #0]
 80074e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80074e8:	79fb      	ldrb	r3, [r7, #7]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d105      	bne.n	80074fa <USBD_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	4907      	ldr	r1, [pc, #28]	; (8007510 <USBD_ProductStrDescriptor+0x34>)
 80074f2:	4808      	ldr	r0, [pc, #32]	; (8007514 <USBD_ProductStrDescriptor+0x38>)
 80074f4:	f004 f8c5 	bl	800b682 <USBD_GetString>
 80074f8:	e004      	b.n	8007504 <USBD_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	4904      	ldr	r1, [pc, #16]	; (8007510 <USBD_ProductStrDescriptor+0x34>)
 80074fe:	4805      	ldr	r0, [pc, #20]	; (8007514 <USBD_ProductStrDescriptor+0x38>)
 8007500:	f004 f8bf 	bl	800b682 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007504:	4b02      	ldr	r3, [pc, #8]	; (8007510 <USBD_ProductStrDescriptor+0x34>)
}
 8007506:	4618      	mov	r0, r3
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	200013a0 	.word	0x200013a0
 8007514:	0800d218 	.word	0x0800d218

08007518 <USBD_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	4603      	mov	r3, r0
 8007520:	6039      	str	r1, [r7, #0]
 8007522:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	4904      	ldr	r1, [pc, #16]	; (8007538 <USBD_ManufacturerStrDescriptor+0x20>)
 8007528:	4804      	ldr	r0, [pc, #16]	; (800753c <USBD_ManufacturerStrDescriptor+0x24>)
 800752a:	f004 f8aa 	bl	800b682 <USBD_GetString>
  return USBD_StrDesc;
 800752e:	4b02      	ldr	r3, [pc, #8]	; (8007538 <USBD_ManufacturerStrDescriptor+0x20>)
}
 8007530:	4618      	mov	r0, r3
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	200013a0 	.word	0x200013a0
 800753c:	0800d230 	.word	0x0800d230

08007540 <USBD_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	6039      	str	r1, [r7, #0]
 800754a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	221a      	movs	r2, #26
 8007550:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007552:	f000 f843 	bl	80075dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_SerialStrDescriptor */

  /* USER CODE END USBD_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8007556:	4b02      	ldr	r3, [pc, #8]	; (8007560 <USBD_SerialStrDescriptor+0x20>)
}
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	2000009c 	.word	0x2000009c

08007564 <USBD_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	6039      	str	r1, [r7, #0]
 800756e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d105      	bne.n	8007582 <USBD_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	4907      	ldr	r1, [pc, #28]	; (8007598 <USBD_ConfigStrDescriptor+0x34>)
 800757a:	4808      	ldr	r0, [pc, #32]	; (800759c <USBD_ConfigStrDescriptor+0x38>)
 800757c:	f004 f881 	bl	800b682 <USBD_GetString>
 8007580:	e004      	b.n	800758c <USBD_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	4904      	ldr	r1, [pc, #16]	; (8007598 <USBD_ConfigStrDescriptor+0x34>)
 8007586:	4805      	ldr	r0, [pc, #20]	; (800759c <USBD_ConfigStrDescriptor+0x38>)
 8007588:	f004 f87b 	bl	800b682 <USBD_GetString>
  }
  return USBD_StrDesc;
 800758c:	4b02      	ldr	r3, [pc, #8]	; (8007598 <USBD_ConfigStrDescriptor+0x34>)
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	200013a0 	.word	0x200013a0
 800759c:	0800d244 	.word	0x0800d244

080075a0 <USBD_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	6039      	str	r1, [r7, #0]
 80075aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075ac:	79fb      	ldrb	r3, [r7, #7]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d105      	bne.n	80075be <USBD_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80075b2:	683a      	ldr	r2, [r7, #0]
 80075b4:	4907      	ldr	r1, [pc, #28]	; (80075d4 <USBD_InterfaceStrDescriptor+0x34>)
 80075b6:	4808      	ldr	r0, [pc, #32]	; (80075d8 <USBD_InterfaceStrDescriptor+0x38>)
 80075b8:	f004 f863 	bl	800b682 <USBD_GetString>
 80075bc:	e004      	b.n	80075c8 <USBD_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	4904      	ldr	r1, [pc, #16]	; (80075d4 <USBD_InterfaceStrDescriptor+0x34>)
 80075c2:	4805      	ldr	r0, [pc, #20]	; (80075d8 <USBD_InterfaceStrDescriptor+0x38>)
 80075c4:	f004 f85d 	bl	800b682 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075c8:	4b02      	ldr	r3, [pc, #8]	; (80075d4 <USBD_InterfaceStrDescriptor+0x34>)
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	200013a0 	.word	0x200013a0
 80075d8:	0800d254 	.word	0x0800d254

080075dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b084      	sub	sp, #16
 80075e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80075e2:	4b0f      	ldr	r3, [pc, #60]	; (8007620 <Get_SerialNum+0x44>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80075e8:	4b0e      	ldr	r3, [pc, #56]	; (8007624 <Get_SerialNum+0x48>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80075ee:	4b0e      	ldr	r3, [pc, #56]	; (8007628 <Get_SerialNum+0x4c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80075f4:	68fa      	ldr	r2, [r7, #12]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4413      	add	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d009      	beq.n	8007616 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007602:	2208      	movs	r2, #8
 8007604:	4909      	ldr	r1, [pc, #36]	; (800762c <Get_SerialNum+0x50>)
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 f814 	bl	8007634 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800760c:	2204      	movs	r2, #4
 800760e:	4908      	ldr	r1, [pc, #32]	; (8007630 <Get_SerialNum+0x54>)
 8007610:	68b8      	ldr	r0, [r7, #8]
 8007612:	f000 f80f 	bl	8007634 <IntToUnicode>
  }
}
 8007616:	bf00      	nop
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	1fff7a10 	.word	0x1fff7a10
 8007624:	1fff7a14 	.word	0x1fff7a14
 8007628:	1fff7a18 	.word	0x1fff7a18
 800762c:	2000009e 	.word	0x2000009e
 8007630:	200000ae 	.word	0x200000ae

08007634 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007634:	b480      	push	{r7}
 8007636:	b087      	sub	sp, #28
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	4613      	mov	r3, r2
 8007640:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007642:	2300      	movs	r3, #0
 8007644:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007646:	2300      	movs	r3, #0
 8007648:	75fb      	strb	r3, [r7, #23]
 800764a:	e027      	b.n	800769c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	0f1b      	lsrs	r3, r3, #28
 8007650:	2b09      	cmp	r3, #9
 8007652:	d80b      	bhi.n	800766c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	0f1b      	lsrs	r3, r3, #28
 8007658:	b2da      	uxtb	r2, r3
 800765a:	7dfb      	ldrb	r3, [r7, #23]
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	4619      	mov	r1, r3
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	440b      	add	r3, r1
 8007664:	3230      	adds	r2, #48	; 0x30
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	701a      	strb	r2, [r3, #0]
 800766a:	e00a      	b.n	8007682 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	0f1b      	lsrs	r3, r3, #28
 8007670:	b2da      	uxtb	r2, r3
 8007672:	7dfb      	ldrb	r3, [r7, #23]
 8007674:	005b      	lsls	r3, r3, #1
 8007676:	4619      	mov	r1, r3
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	440b      	add	r3, r1
 800767c:	3237      	adds	r2, #55	; 0x37
 800767e:	b2d2      	uxtb	r2, r2
 8007680:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	011b      	lsls	r3, r3, #4
 8007686:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007688:	7dfb      	ldrb	r3, [r7, #23]
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	3301      	adds	r3, #1
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	4413      	add	r3, r2
 8007692:	2200      	movs	r2, #0
 8007694:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	3301      	adds	r3, #1
 800769a:	75fb      	strb	r3, [r7, #23]
 800769c:	7dfa      	ldrb	r2, [r7, #23]
 800769e:	79fb      	ldrb	r3, [r7, #7]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	d3d3      	bcc.n	800764c <IntToUnicode+0x18>
  }
}
 80076a4:	bf00      	nop
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <MEM_If_Init>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init(void)
{
 80076b2:	b480      	push	{r7}
 80076b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80076b6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <MEM_If_DeInit>:
/**
  * @brief  De-Initializes Memory.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_DeInit(void)
{
 80076c2:	b480      	push	{r7}
 80076c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 80076c6:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <MEM_If_Erase>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase(uint32_t Add)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b083      	sub	sp, #12
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 8 */
  return (USBD_OK);
 80076da:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80076dc:	4618      	mov	r0, r3
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <MEM_If_Write>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80076f4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3714      	adds	r7, #20
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <MEM_If_Read>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8007702:	b480      	push	{r7}
 8007704:	b085      	sub	sp, #20
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 10 */
  return (uint8_t*)(USBD_OK);
 800770e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <MEM_If_GetStatus>:
  * @param  Cmd: Number of data to be read (in bytes).
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval 0 if operation is successful
  */
uint16_t MEM_If_GetStatus(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	460b      	mov	r3, r1
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 11 */
  switch(Cmd)
 800772a:	7afb      	ldrb	r3, [r7, #11]
 800772c:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 800772e:	bf00      	nop
  }
  return  (USBD_OK);
 8007730:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8007732:	4618      	mov	r0, r3
 8007734:	3714      	adds	r7, #20
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
	...

08007740 <USBD_AUDIO_MIC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_MIC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	460b      	mov	r3, r1
 800774a:	70fb      	strb	r3, [r7, #3]
  if (haudioInstance.state != STATE_USB_WAITING_FOR_INIT)
 800774c:	4b2c      	ldr	r3, [pc, #176]	; (8007800 <USBD_AUDIO_MIC_Init+0xc0>)
 800774e:	7d1b      	ldrb	r3, [r3, #20]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <USBD_AUDIO_MIC_Init+0x18>
  {
    return USBD_FAIL;
 8007754:	2303      	movs	r3, #3
 8007756:	e04e      	b.n	80077f6 <USBD_AUDIO_MIC_Init+0xb6>
  }

  USBD_AUDIO_MIC_HandleTypeDef *haudio;
  pdev->pClassData_UAC_MIC = &haudioInstance;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a29      	ldr	r2, [pc, #164]	; (8007800 <USBD_AUDIO_MIC_Init+0xc0>)
 800775c:	f8c3 22e0 	str.w	r2, [r3, #736]	; 0x2e0
  haudio = (USBD_AUDIO_MIC_HandleTypeDef *)pdev->pClassData_UAC_MIC;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007766:	60fb      	str	r3, [r7, #12]
  if (haudio->paketDimension == 0)
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	8a5b      	ldrh	r3, [r3, #18]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d102      	bne.n	8007776 <USBD_AUDIO_MIC_Init+0x36>
  {
    haudio->paketDimension = 1;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2201      	movs	r2, #1
 8007774:	825a      	strh	r2, [r3, #18]
  }
  uint16_t packet_dim = haudio->paketDimension;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8a5b      	ldrh	r3, [r3, #18]
 800777a:	817b      	strh	r3, [r7, #10]
  uint16_t wr_rd_offset = (AUDIO_MIC_PACKET_NUM / 2) * haudio->dataAmount / haudio->paketDimension;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	8a1b      	ldrh	r3, [r3, #16]
 8007780:	461a      	mov	r2, r3
 8007782:	4613      	mov	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	005b      	lsls	r3, r3, #1
 800778a:	461a      	mov	r2, r3
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8a5b      	ldrh	r3, [r3, #18]
 8007790:	fb92 f3f3 	sdiv	r3, r2, r3
 8007794:	813b      	strh	r3, [r7, #8]
  haudio->wr_ptr = wr_rd_offset * packet_dim;
 8007796:	893a      	ldrh	r2, [r7, #8]
 8007798:	897b      	ldrh	r3, [r7, #10]
 800779a:	fb12 f303 	smulbb	r3, r2, r3
 800779e:	b29a      	uxth	r2, r3
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	831a      	strh	r2, [r3, #24]
  haudio->rd_ptr = 0;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	82da      	strh	r2, [r3, #22]
  haudio->timeout = 0;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2200      	movs	r2, #0
 80077ae:	819a      	strh	r2, [r3, #12]

  ((USBD_AUDIO_MIC_ItfTypeDef *)pdev->pUserData_UAC_MIC)->Init(haudio->frequency, 0, haudio->channels);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	6890      	ldr	r0, [r2, #8]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	7912      	ldrb	r2, [r2, #4]
 80077c0:	2100      	movs	r1, #0
 80077c2:	4798      	blx	r3

  USBD_LL_OpenEP(pdev,
 80077c4:	4b0f      	ldr	r3, [pc, #60]	; (8007804 <USBD_AUDIO_MIC_Init+0xc4>)
 80077c6:	7819      	ldrb	r1, [r3, #0]
 80077c8:	f44f 7390 	mov.w	r3, #288	; 0x120
 80077cc:	2201      	movs	r2, #1
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f004 f9e4 	bl	800bb9c <USBD_LL_OpenEP>
                 AUDIO_MIC_EP,
                 USBD_EP_TYPE_ISOC,
                 AUDIO_MIC_PACKET);

  USBD_LL_FlushEP(pdev, AUDIO_MIC_EP);
 80077d4:	4b0b      	ldr	r3, [pc, #44]	; (8007804 <USBD_AUDIO_MIC_Init+0xc4>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f004 fa23 	bl	800bc26 <USBD_LL_FlushEP>

  USBD_LL_Transmit(pdev, AUDIO_MIC_EP,
 80077e0:	4b08      	ldr	r3, [pc, #32]	; (8007804 <USBD_AUDIO_MIC_Init+0xc4>)
 80077e2:	7819      	ldrb	r1, [r3, #0]
 80077e4:	897b      	ldrh	r3, [r7, #10]
 80077e6:	4a08      	ldr	r2, [pc, #32]	; (8007808 <USBD_AUDIO_MIC_Init+0xc8>)
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f004 fac4 	bl	800bd76 <USBD_LL_Transmit>
                   IsocInBuffDummy,
                   packet_dim);

  haudio->state = STATE_USB_IDLE;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2201      	movs	r2, #1
 80077f2:	751a      	strb	r2, [r3, #20]
  return USBD_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20001728 	.word	0x20001728
 8007804:	200000d4 	.word	0x200000d4
 8007808:	200015a4 	.word	0x200015a4

0800780c <USBD_AUDIO_MIC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_MIC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]
  /* Close EP IN */
  USBD_LL_CloseEP(pdev, AUDIO_MIC_EP);
 8007818:	4b0c      	ldr	r3, [pc, #48]	; (800784c <USBD_AUDIO_MIC_DeInit+0x40>)
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f004 f9e2 	bl	800bbe8 <USBD_LL_CloseEP>
  /* DeInit  physical Interface components */
  if (pdev->pClassData_UAC_MIC != NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d008      	beq.n	8007840 <USBD_AUDIO_MIC_DeInit+0x34>
  {
    ((USBD_AUDIO_MIC_ItfTypeDef *)pdev->pUserData_UAC_MIC)->DeInit(0);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	2000      	movs	r0, #0
 8007838:	4798      	blx	r3
    haudioInstance.state = STATE_USB_WAITING_FOR_INIT;
 800783a:	4b05      	ldr	r3, [pc, #20]	; (8007850 <USBD_AUDIO_MIC_DeInit+0x44>)
 800783c:	2200      	movs	r2, #0
 800783e:	751a      	strb	r2, [r3, #20]
  }
  return USBD_OK;
 8007840:	2300      	movs	r3, #0
}
 8007842:	4618      	mov	r0, r3
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	200000d4 	.word	0x200000d4
 8007850:	20001728 	.word	0x20001728

08007854 <USBD_AUDIO_MIC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_MIC_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b086      	sub	sp, #24
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_MIC_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_MIC_HandleTypeDef *)pdev->pClassData_UAC_MIC;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 800786c:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 800786e:	693b      	ldr	r3, [r7, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d101      	bne.n	8007878 <USBD_AUDIO_MIC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007874:	2303      	movs	r3, #3
 8007876:	e0d2      	b.n	8007a1e <USBD_AUDIO_MIC_Setup+0x1ca>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007880:	2b00      	cmp	r3, #0
 8007882:	d03c      	beq.n	80078fe <USBD_AUDIO_MIC_Setup+0xaa>
 8007884:	2b20      	cmp	r3, #32
 8007886:	f040 80c2 	bne.w	8007a0e <USBD_AUDIO_MIC_Setup+0x1ba>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	785b      	ldrb	r3, [r3, #1]
 800788e:	2b01      	cmp	r3, #1
 8007890:	d019      	beq.n	80078c6 <USBD_AUDIO_MIC_Setup+0x72>
 8007892:	2b00      	cmp	r3, #0
 8007894:	dd2b      	ble.n	80078ee <USBD_AUDIO_MIC_Setup+0x9a>
 8007896:	2b84      	cmp	r3, #132	; 0x84
 8007898:	dc29      	bgt.n	80078ee <USBD_AUDIO_MIC_Setup+0x9a>
 800789a:	2b81      	cmp	r3, #129	; 0x81
 800789c:	db27      	blt.n	80078ee <USBD_AUDIO_MIC_Setup+0x9a>
 800789e:	3b81      	subs	r3, #129	; 0x81
 80078a0:	2b03      	cmp	r3, #3
 80078a2:	d824      	bhi.n	80078ee <USBD_AUDIO_MIC_Setup+0x9a>
 80078a4:	a201      	add	r2, pc, #4	; (adr r2, 80078ac <USBD_AUDIO_MIC_Setup+0x58>)
 80078a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078aa:	bf00      	nop
 80078ac:	080078bd 	.word	0x080078bd
 80078b0:	080078d1 	.word	0x080078d1
 80078b4:	080078db 	.word	0x080078db
 80078b8:	080078e5 	.word	0x080078e5
    {
    case AUDIO_REQ_GET_CUR:
      USBD_AUDIO_MIC_REQ_GetCurrent(pdev, req);
 80078bc:	6839      	ldr	r1, [r7, #0]
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fa64 	bl	8007d8c <USBD_AUDIO_MIC_REQ_GetCurrent>
      break;
 80078c4:	e01a      	b.n	80078fc <USBD_AUDIO_MIC_Setup+0xa8>

    case AUDIO_REQ_SET_CUR:
      USBD_AUDIO_MIC_REQ_SetCurrent(pdev, req);
 80078c6:	6839      	ldr	r1, [r7, #0]
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fa87 	bl	8007ddc <USBD_AUDIO_MIC_REQ_SetCurrent>
      break;
 80078ce:	e015      	b.n	80078fc <USBD_AUDIO_MIC_Setup+0xa8>

    case AUDIO_REQ_GET_MIN:
      USBD_AUDIO_MIC_REQ_GetMinimum(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa22 	bl	8007d1c <USBD_AUDIO_MIC_REQ_GetMinimum>
      break;
 80078d8:	e010      	b.n	80078fc <USBD_AUDIO_MIC_Setup+0xa8>

    case AUDIO_REQ_GET_MAX:
      USBD_AUDIO_MIC_REQ_GetMaximum(pdev, req);
 80078da:	6839      	ldr	r1, [r7, #0]
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f000 fa01 	bl	8007ce4 <USBD_AUDIO_MIC_REQ_GetMaximum>
      break;
 80078e2:	e00b      	b.n	80078fc <USBD_AUDIO_MIC_Setup+0xa8>

    case AUDIO_REQ_GET_RES:
      USBD_AUDIO_MIC_REQ_GetResolution(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fa34 	bl	8007d54 <USBD_AUDIO_MIC_REQ_GetResolution>
      break;
 80078ec:	e006      	b.n	80078fc <USBD_AUDIO_MIC_Setup+0xa8>

    default:
      USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f003 feb5 	bl	800b660 <USBD_CtlError>
      ret = USBD_FAIL;
 80078f6:	2303      	movs	r3, #3
 80078f8:	75fb      	strb	r3, [r7, #23]
      break;
 80078fa:	bf00      	nop
    }
    break;
 80078fc:	e08e      	b.n	8007a1c <USBD_AUDIO_MIC_Setup+0x1c8>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	785b      	ldrb	r3, [r3, #1]
 8007902:	2b0b      	cmp	r3, #11
 8007904:	d878      	bhi.n	80079f8 <USBD_AUDIO_MIC_Setup+0x1a4>
 8007906:	a201      	add	r2, pc, #4	; (adr r2, 800790c <USBD_AUDIO_MIC_Setup+0xb8>)
 8007908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800790c:	0800793d 	.word	0x0800793d
 8007910:	08007a07 	.word	0x08007a07
 8007914:	080079f9 	.word	0x080079f9
 8007918:	080079f9 	.word	0x080079f9
 800791c:	080079f9 	.word	0x080079f9
 8007920:	080079f9 	.word	0x080079f9
 8007924:	08007967 	.word	0x08007967
 8007928:	080079f9 	.word	0x080079f9
 800792c:	080079f9 	.word	0x080079f9
 8007930:	080079f9 	.word	0x080079f9
 8007934:	08007991 	.word	0x08007991
 8007938:	080079b9 	.word	0x080079b9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b03      	cmp	r3, #3
 8007946:	d107      	bne.n	8007958 <USBD_AUDIO_MIC_Setup+0x104>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007948:	f107 0308 	add.w	r3, r7, #8
 800794c:	2202      	movs	r2, #2
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f003 fef6 	bl	800b742 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007956:	e059      	b.n	8007a0c <USBD_AUDIO_MIC_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 8007958:	6839      	ldr	r1, [r7, #0]
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f003 fe80 	bl	800b660 <USBD_CtlError>
        ret = USBD_FAIL;
 8007960:	2303      	movs	r3, #3
 8007962:	75fb      	strb	r3, [r7, #23]
      break;
 8007964:	e052      	b.n	8007a0c <USBD_AUDIO_MIC_Setup+0x1b8>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	885b      	ldrh	r3, [r3, #2]
 800796a:	0a1b      	lsrs	r3, r3, #8
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b21      	cmp	r3, #33	; 0x21
 8007970:	d14b      	bne.n	8007a0a <USBD_AUDIO_MIC_Setup+0x1b6>
      {

        pbuf = USBD_AUDIO_MIC_CfgDesc + 18;
 8007972:	4b2d      	ldr	r3, [pc, #180]	; (8007a28 <USBD_AUDIO_MIC_Setup+0x1d4>)
 8007974:	60fb      	str	r3, [r7, #12]
        len = MIN(USBD_AUDIO_MIC_CONFIG_DESC_SIZE, req->wLength);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	88db      	ldrh	r3, [r3, #6]
 800797a:	2b75      	cmp	r3, #117	; 0x75
 800797c:	bf28      	it	cs
 800797e:	2375      	movcs	r3, #117	; 0x75
 8007980:	817b      	strh	r3, [r7, #10]

        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007982:	897b      	ldrh	r3, [r7, #10]
 8007984:	461a      	mov	r2, r3
 8007986:	68f9      	ldr	r1, [r7, #12]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f003 feda 	bl	800b742 <USBD_CtlSendData>
      }
      break;
 800798e:	e03c      	b.n	8007a0a <USBD_AUDIO_MIC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007996:	b2db      	uxtb	r3, r3
 8007998:	2b03      	cmp	r3, #3
 800799a:	d106      	bne.n	80079aa <USBD_AUDIO_MIC_Setup+0x156>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	2201      	movs	r2, #1
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f003 fecd 	bl	800b742 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80079a8:	e030      	b.n	8007a0c <USBD_AUDIO_MIC_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 80079aa:	6839      	ldr	r1, [r7, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f003 fe57 	bl	800b660 <USBD_CtlError>
        ret = USBD_FAIL;
 80079b2:	2303      	movs	r3, #3
 80079b4:	75fb      	strb	r3, [r7, #23]
      break;
 80079b6:	e029      	b.n	8007a0c <USBD_AUDIO_MIC_Setup+0x1b8>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b03      	cmp	r3, #3
 80079c2:	d112      	bne.n	80079ea <USBD_AUDIO_MIC_Setup+0x196>
      {
        if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	885b      	ldrh	r3, [r3, #2]
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b0f      	cmp	r3, #15
 80079cc:	d806      	bhi.n	80079dc <USBD_AUDIO_MIC_Setup+0x188>
        {
          haudio->alt_setting = (uint8_t)(req->wValue);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	885b      	ldrh	r3, [r3, #2]
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80079da:	e017      	b.n	8007a0c <USBD_AUDIO_MIC_Setup+0x1b8>
          USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f003 fe3e 	bl	800b660 <USBD_CtlError>
          ret = USBD_FAIL;
 80079e4:	2303      	movs	r3, #3
 80079e6:	75fb      	strb	r3, [r7, #23]
      break;
 80079e8:	e010      	b.n	8007a0c <USBD_AUDIO_MIC_Setup+0x1b8>
        USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f003 fe37 	bl	800b660 <USBD_CtlError>
        ret = USBD_FAIL;
 80079f2:	2303      	movs	r3, #3
 80079f4:	75fb      	strb	r3, [r7, #23]
      break;
 80079f6:	e009      	b.n	8007a0c <USBD_AUDIO_MIC_Setup+0x1b8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f003 fe30 	bl	800b660 <USBD_CtlError>
      ret = USBD_FAIL;
 8007a00:	2303      	movs	r3, #3
 8007a02:	75fb      	strb	r3, [r7, #23]
      break;
 8007a04:	e002      	b.n	8007a0c <USBD_AUDIO_MIC_Setup+0x1b8>
      break;
 8007a06:	bf00      	nop
 8007a08:	e008      	b.n	8007a1c <USBD_AUDIO_MIC_Setup+0x1c8>
      break;
 8007a0a:	bf00      	nop
    }
    break;
 8007a0c:	e006      	b.n	8007a1c <USBD_AUDIO_MIC_Setup+0x1c8>
  default:
    USBD_CtlError(pdev, req);
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f003 fe25 	bl	800b660 <USBD_CtlError>
    ret = USBD_FAIL;
 8007a16:	2303      	movs	r3, #3
 8007a18:	75fb      	strb	r3, [r7, #23]
    break;
 8007a1a:	bf00      	nop
  }

  return (uint8_t)ret;
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3718      	adds	r7, #24
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20000126 	.word	0x20000126

08007a2c <USBD_AUDIO_MIC_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_MIC_GetCfgDesc(uint16_t *length)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_MIC_CfgDesc);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2275      	movs	r2, #117	; 0x75
 8007a38:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_MIC_CfgDesc;
 8007a3a:	4b03      	ldr	r3, [pc, #12]	; (8007a48 <USBD_AUDIO_MIC_GetCfgDesc+0x1c>)
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	20000114 	.word	0x20000114

08007a4c <USBD_AUDIO_MIC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_MIC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]

  USBD_AUDIO_MIC_HandleTypeDef *haudio;

  haudio = pdev->pClassData_UAC_MIC;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007a5e:	613b      	str	r3, [r7, #16]

  rd_ptr = haudio->rd_ptr;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	8ada      	ldrh	r2, [r3, #22]
 8007a64:	4b59      	ldr	r3, [pc, #356]	; (8007bcc <USBD_AUDIO_MIC_DataIn+0x180>)
 8007a66:	801a      	strh	r2, [r3, #0]
  wr_ptr = haudio->wr_ptr;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	8b1a      	ldrh	r2, [r3, #24]
 8007a6c:	4b58      	ldr	r3, [pc, #352]	; (8007bd0 <USBD_AUDIO_MIC_DataIn+0x184>)
 8007a6e:	801a      	strh	r2, [r3, #0]

  uint32_t length_usb_pck;
  // uint16_t app;
  uint16_t IsocInWr_app = haudio->wr_ptr;
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	8b1b      	ldrh	r3, [r3, #24]
 8007a74:	81fb      	strh	r3, [r7, #14]
  uint16_t true_dim = haudio->buffer_length;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	89db      	ldrh	r3, [r3, #14]
 8007a7a:	81bb      	strh	r3, [r7, #12]
  uint16_t packet_dim = haudio->paketDimension;
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	8a5b      	ldrh	r3, [r3, #18]
 8007a80:	817b      	strh	r3, [r7, #10]
  uint16_t channels = haudio->channels;
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	791b      	ldrb	r3, [r3, #4]
 8007a86:	813b      	strh	r3, [r7, #8]
  length_usb_pck = packet_dim;
 8007a88:	897b      	ldrh	r3, [r7, #10]
 8007a8a:	617b      	str	r3, [r7, #20]
  haudio->timeout = 0;
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	819a      	strh	r2, [r3, #12]
  if (epnum == (AUDIO_MIC_EP & 0x7F))
 8007a92:	78fa      	ldrb	r2, [r7, #3]
 8007a94:	4b4f      	ldr	r3, [pc, #316]	; (8007bd4 <USBD_AUDIO_MIC_DataIn+0x188>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	f040 8090 	bne.w	8007bc2 <USBD_AUDIO_MIC_DataIn+0x176>
  {
    if (haudio->state == STATE_USB_IDLE)
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	7d1b      	ldrb	r3, [r3, #20]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d107      	bne.n	8007aba <USBD_AUDIO_MIC_DataIn+0x6e>
    {
      haudio->state = STATE_USB_REQUESTS_STARTED;
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	2202      	movs	r2, #2
 8007aae:	751a      	strb	r2, [r3, #20]
      ((USBD_AUDIO_MIC_ItfTypeDef *)pdev->pUserData_UAC_MIC)->Record();
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	4798      	blx	r3
    }
    if (haudio->state == STATE_USB_BUFFER_WRITE_STARTED)
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	7d1b      	ldrb	r3, [r3, #20]
 8007abe:	2b03      	cmp	r3, #3
 8007ac0:	d178      	bne.n	8007bb4 <USBD_AUDIO_MIC_DataIn+0x168>
    {
      haudio->rd_ptr = haudio->rd_ptr % (true_dim);
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	8adb      	ldrh	r3, [r3, #22]
 8007ac6:	89ba      	ldrh	r2, [r7, #12]
 8007ac8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007acc:	fb01 f202 	mul.w	r2, r1, r2
 8007ad0:	1a9b      	subs	r3, r3, r2
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	82da      	strh	r2, [r3, #22]
      if (IsocInWr_app < haudio->rd_ptr)
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	8adb      	ldrh	r3, [r3, #22]
 8007adc:	89fa      	ldrh	r2, [r7, #14]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d20a      	bcs.n	8007af8 <USBD_AUDIO_MIC_DataIn+0xac>
      {
        app = ((true_dim)-haudio->rd_ptr) + IsocInWr_app;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	8adb      	ldrh	r3, [r3, #22]
 8007ae6:	89ba      	ldrh	r2, [r7, #12]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	89fb      	ldrh	r3, [r7, #14]
 8007aee:	4413      	add	r3, r2
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	4b39      	ldr	r3, [pc, #228]	; (8007bd8 <USBD_AUDIO_MIC_DataIn+0x18c>)
 8007af4:	801a      	strh	r2, [r3, #0]
 8007af6:	e006      	b.n	8007b06 <USBD_AUDIO_MIC_DataIn+0xba>
      }
      else
      {
        app = IsocInWr_app - haudio->rd_ptr;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	8adb      	ldrh	r3, [r3, #22]
 8007afc:	89fa      	ldrh	r2, [r7, #14]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	b29a      	uxth	r2, r3
 8007b02:	4b35      	ldr	r3, [pc, #212]	; (8007bd8 <USBD_AUDIO_MIC_DataIn+0x18c>)
 8007b04:	801a      	strh	r2, [r3, #0]
      }
      if (app >= (packet_dim * haudio->upper_treshold))
 8007b06:	4b34      	ldr	r3, [pc, #208]	; (8007bd8 <USBD_AUDIO_MIC_DataIn+0x18c>)
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	897b      	ldrh	r3, [r7, #10]
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	7e92      	ldrb	r2, [r2, #26]
 8007b12:	fb02 f303 	mul.w	r3, r2, r3
 8007b16:	4299      	cmp	r1, r3
 8007b18:	db06      	blt.n	8007b28 <USBD_AUDIO_MIC_DataIn+0xdc>
      {
        length_usb_pck += channels * 2;
 8007b1a:	893b      	ldrh	r3, [r7, #8]
 8007b1c:	005b      	lsls	r3, r3, #1
 8007b1e:	461a      	mov	r2, r3
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	4413      	add	r3, r2
 8007b24:	617b      	str	r3, [r7, #20]
 8007b26:	e00f      	b.n	8007b48 <USBD_AUDIO_MIC_DataIn+0xfc>
      }
      else if (app <= (packet_dim * haudio->lower_treshold))
 8007b28:	4b2b      	ldr	r3, [pc, #172]	; (8007bd8 <USBD_AUDIO_MIC_DataIn+0x18c>)
 8007b2a:	881b      	ldrh	r3, [r3, #0]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	897b      	ldrh	r3, [r7, #10]
 8007b30:	693a      	ldr	r2, [r7, #16]
 8007b32:	7ed2      	ldrb	r2, [r2, #27]
 8007b34:	fb02 f303 	mul.w	r3, r2, r3
 8007b38:	4299      	cmp	r1, r3
 8007b3a:	dc05      	bgt.n	8007b48 <USBD_AUDIO_MIC_DataIn+0xfc>
      {
        length_usb_pck -= channels * 2;
 8007b3c:	893b      	ldrh	r3, [r7, #8]
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	461a      	mov	r2, r3
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	1a9b      	subs	r3, r3, r2
 8007b46:	617b      	str	r3, [r7, #20]
      }
      USBD_LL_Transmit(pdev, AUDIO_MIC_EP,
 8007b48:	4b22      	ldr	r3, [pc, #136]	; (8007bd4 <USBD_AUDIO_MIC_DataIn+0x188>)
 8007b4a:	7819      	ldrb	r1, [r3, #0]
                       (uint8_t *)(&haudio->buffer[haudio->rd_ptr]),
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b50:	693a      	ldr	r2, [r7, #16]
 8007b52:	8ad2      	ldrh	r2, [r2, #22]
      USBD_LL_Transmit(pdev, AUDIO_MIC_EP,
 8007b54:	441a      	add	r2, r3
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f004 f90c 	bl	800bd76 <USBD_LL_Transmit>
                       length_usb_pck);
      haudio->rd_ptr += length_usb_pck;
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	8ada      	ldrh	r2, [r3, #22]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	4413      	add	r3, r2
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	82da      	strh	r2, [r3, #22]

      if (app < haudio->buffer_length / 10)
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	89db      	ldrh	r3, [r3, #14]
 8007b72:	4a1a      	ldr	r2, [pc, #104]	; (8007bdc <USBD_AUDIO_MIC_DataIn+0x190>)
 8007b74:	fba2 2303 	umull	r2, r3, r2, r3
 8007b78:	08db      	lsrs	r3, r3, #3
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	4b16      	ldr	r3, [pc, #88]	; (8007bd8 <USBD_AUDIO_MIC_DataIn+0x18c>)
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	429a      	cmp	r2, r3
 8007b82:	d91e      	bls.n	8007bc2 <USBD_AUDIO_MIC_DataIn+0x176>
      {
        ((USBD_AUDIO_MIC_ItfTypeDef *)pdev->pUserData_UAC_MIC)->Stop();
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	4798      	blx	r3
        haudio->state = STATE_USB_IDLE;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	2201      	movs	r2, #1
 8007b92:	751a      	strb	r2, [r3, #20]
        haudio->timeout = 0;
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	2200      	movs	r2, #0
 8007b98:	819a      	strh	r2, [r3, #12]
        memset(haudio->buffer, 0, (haudio->buffer_length + haudio->dataAmount));
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	89db      	ldrh	r3, [r3, #14]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	8a1b      	ldrh	r3, [r3, #16]
 8007ba8:	4413      	add	r3, r2
 8007baa:	461a      	mov	r2, r3
 8007bac:	2100      	movs	r1, #0
 8007bae:	f004 f99b 	bl	800bee8 <memset>
 8007bb2:	e006      	b.n	8007bc2 <USBD_AUDIO_MIC_DataIn+0x176>
      }
    }
    else
    {
      USBD_LL_Transmit(pdev, AUDIO_MIC_EP,
 8007bb4:	4b07      	ldr	r3, [pc, #28]	; (8007bd4 <USBD_AUDIO_MIC_DataIn+0x188>)
 8007bb6:	7819      	ldrb	r1, [r3, #0]
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	4a09      	ldr	r2, [pc, #36]	; (8007be0 <USBD_AUDIO_MIC_DataIn+0x194>)
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f004 f8da 	bl	800bd76 <USBD_LL_Transmit>
                       IsocInBuffDummy,
                       length_usb_pck);
    }
  }
  return USBD_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	2000178e 	.word	0x2000178e
 8007bd0:	20001790 	.word	0x20001790
 8007bd4:	200000d4 	.word	0x200000d4
 8007bd8:	2000178c 	.word	0x2000178c
 8007bdc:	cccccccd 	.word	0xcccccccd
 8007be0:	200015a4 	.word	0x200015a4

08007be4 <USBD_AUDIO_MIC_EP0_RxReady>:
* @param  pdev: device instance
* @retval status
*/

static uint8_t USBD_AUDIO_MIC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_MIC_HandleTypeDef *haudio;
  haudio = pdev->pClassData_UAC_MIC;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007bf2:	60fb      	str	r3, [r7, #12]
  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	7f1b      	ldrb	r3, [r3, #28]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d11e      	bne.n	8007c3a <USBD_AUDIO_MIC_EP0_RxReady+0x56>
  {
    if (haudio->control.unit == AUDIO_STREAMING_CTRL)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d119      	bne.n	8007c3a <USBD_AUDIO_MIC_EP0_RxReady+0x56>
    {
      ((USBD_AUDIO_MIC_ItfTypeDef *)pdev->pUserData_UAC_MIC)->VolumeCtl(VOL_CUR);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	4a0d      	ldr	r2, [pc, #52]	; (8007c44 <USBD_AUDIO_MIC_EP0_RxReady+0x60>)
 8007c10:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3

      haudio->control.cmd = 0;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	771a      	strb	r2, [r3, #28]
      haudio->control.len = 0;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      haudio->control.unit = 0;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
      haudio->control.data[0] = 0;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	775a      	strb	r2, [r3, #29]
      haudio->control.data[0] = 0;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2200      	movs	r2, #0
 8007c38:	775a      	strb	r2, [r3, #29]
    }
  }
  return USBD_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	20001724 	.word	0x20001724

08007c48 <USBD_AUDIO_MIC_EP0_TxReady>:
*         handle EP0 TRx Ready event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_AUDIO_MIC_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Only OUT control data are processed */
  return USBD_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <USBD_AUDIO_MIC_SOF>:
*         handle SOF event
* @param  pdev: device instance
* @retval status
*/
static uint8_t USBD_AUDIO_MIC_SOF(USBD_HandleTypeDef *pdev)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b083      	sub	sp, #12
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <USBD_AUDIO_MIC_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_MIC_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	370c      	adds	r7, #12
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <USBD_AUDIO_MIC_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_MIC_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <USBD_AUDIO_MIC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
static uint8_t USBD_AUDIO_MIC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
	...

08007cc4 <USBD_AUDIO_MIC_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_AUDIO_MIC_GetDeviceQualifierDesc(uint16_t *length)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_AUDIO_MIC_DeviceQualifierDesc);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	220a      	movs	r2, #10
 8007cd0:	801a      	strh	r2, [r3, #0]
  return USBD_AUDIO_MIC_DeviceQualifierDesc;
 8007cd2:	4b03      	ldr	r3, [pc, #12]	; (8007ce0 <USBD_AUDIO_MIC_GetDeviceQualifierDesc+0x1c>)
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	2000018c 	.word	0x2000018c

08007ce4 <USBD_AUDIO_MIC_REQ_GetMaximum>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void USBD_AUDIO_MIC_REQ_GetMaximum(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_MIC_HandleTypeDef *haudio;
  haudio = pdev->pClassData_UAC_MIC;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007cf4:	60fb      	str	r3, [r7, #12]

  (haudio->control.data)[0] = (uint16_t)AUDIO_MIC_VOL_MAX & 0xFF;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)AUDIO_MIC_VOL_MAX & 0xFF00) >> 8;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	779a      	strb	r2, [r3, #30]

  USBD_CtlSendData(pdev,
                   haudio->control.data,
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f103 011d 	add.w	r1, r3, #29
                   req->wLength);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData(pdev,
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f003 fd17 	bl	800b742 <USBD_CtlSendData>
}
 8007d14:	bf00      	nop
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_AUDIO_MIC_REQ_GetMinimum>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void USBD_AUDIO_MIC_REQ_GetMinimum(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_MIC_HandleTypeDef *haudio;
  haudio = pdev->pClassData_UAC_MIC;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007d2c:	60fb      	str	r3, [r7, #12]
  (haudio->control.data)[0] = (uint16_t)AUDIO_MIC_VOL_MIN & 0xFF;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	22e0      	movs	r2, #224	; 0xe0
 8007d32:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)AUDIO_MIC_VOL_MIN & 0xFF00) >> 8;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	22db      	movs	r2, #219	; 0xdb
 8007d38:	779a      	strb	r2, [r3, #30]
  /* Send the current mute state */
  USBD_CtlSendData(pdev,
                   haudio->control.data,
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f103 011d 	add.w	r1, r3, #29
                   req->wLength);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData(pdev,
 8007d44:	461a      	mov	r2, r3
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f003 fcfb 	bl	800b742 <USBD_CtlSendData>
}
 8007d4c:	bf00      	nop
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBD_AUDIO_MIC_REQ_GetResolution>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void USBD_AUDIO_MIC_REQ_GetResolution(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_MIC_HandleTypeDef *haudio;
  haudio = pdev->pClassData_UAC_MIC;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007d64:	60fb      	str	r3, [r7, #12]
  (haudio->control.data)[0] = (uint16_t)AUDIO_MIC_VOL_RES & 0xFF;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2223      	movs	r2, #35	; 0x23
 8007d6a:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)AUDIO_MIC_VOL_RES & 0xFF00) >> 8;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	779a      	strb	r2, [r3, #30]
  USBD_CtlSendData(pdev,
                   haudio->control.data,
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f103 011d 	add.w	r1, r3, #29
                   req->wLength);
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData(pdev,
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f003 fcdf 	bl	800b742 <USBD_CtlSendData>
}
 8007d84:	bf00      	nop
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_AUDIO_MIC_REQ_GetCurrent>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void USBD_AUDIO_MIC_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_MIC_HandleTypeDef *haudio;
  haudio = pdev->pClassData_UAC_MIC;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007d9c:	60fb      	str	r3, [r7, #12]

  (haudio->control.data)[0] = (uint16_t)VOL_CUR & 0xFF;
 8007d9e:	4b0e      	ldr	r3, [pc, #56]	; (8007dd8 <USBD_AUDIO_MIC_REQ_GetCurrent+0x4c>)
 8007da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007da4:	b2da      	uxtb	r2, r3
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	775a      	strb	r2, [r3, #29]
  (haudio->control.data)[1] = ((uint16_t)VOL_CUR & 0xFF00) >> 8;
 8007daa:	4b0b      	ldr	r3, [pc, #44]	; (8007dd8 <USBD_AUDIO_MIC_REQ_GetCurrent+0x4c>)
 8007dac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	0a1b      	lsrs	r3, r3, #8
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	779a      	strb	r2, [r3, #30]

  USBD_CtlSendData(pdev,
                   haudio->control.data,
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f103 011d 	add.w	r1, r3, #29
                   req->wLength);
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	88db      	ldrh	r3, [r3, #6]
  USBD_CtlSendData(pdev,
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f003 fcba 	bl	800b742 <USBD_CtlSendData>
}
 8007dce:	bf00      	nop
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	20001724 	.word	0x20001724

08007ddc <USBD_AUDIO_MIC_REQ_SetCurrent>:
* @param  pdev: instance
* @param  req: setup class request
* @retval status
*/
static void USBD_AUDIO_MIC_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_MIC_HandleTypeDef *haudio;
  haudio = pdev->pClassData_UAC_MIC;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8007dec:	60fb      	str	r3, [r7, #12]
  if (req->wLength)
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	88db      	ldrh	r3, [r3, #6]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d017      	beq.n	8007e26 <USBD_AUDIO_MIC_REQ_SetCurrent+0x4a>
  {
    /* Prepare the reception of the buffer over EP0 */
    USBD_CtlPrepareRx(pdev,
                      (uint8_t *)&VOL_CUR,
                      req->wLength);
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	88db      	ldrh	r3, [r3, #6]
    USBD_CtlPrepareRx(pdev,
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	490c      	ldr	r1, [pc, #48]	; (8007e30 <USBD_AUDIO_MIC_REQ_SetCurrent+0x54>)
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f003 fccb 	bl	800b79a <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;    /* Set the request value */
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2201      	movs	r2, #1
 8007e08:	771a      	strb	r2, [r3, #28]
    haudio->control.len = req->wLength;         /* Set the request data length */
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	88db      	ldrh	r3, [r3, #6]
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    haudio->control.unit = HIBYTE(req->wIndex); /* Set the request target unit */
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	889b      	ldrh	r3, [r3, #4]
 8007e1a:	0a1b      	lsrs	r3, r3, #8
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	b2da      	uxtb	r2, r3
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
  }
}
 8007e26:	bf00      	nop
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20001724 	.word	0x20001724

08007e34 <USBD_AUDIO_MIC_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_MIC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                         USBD_AUDIO_MIC_ItfTypeDef *fops)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d101      	bne.n	8007e48 <USBD_AUDIO_MIC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e004      	b.n	8007e52 <USBD_AUDIO_MIC_RegisterInterface+0x1e>
  }

  pdev->pUserData_UAC_MIC = fops;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	683a      	ldr	r2, [r7, #0]
 8007e4c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4

  return (uint8_t)USBD_OK;
 8007e50:	2300      	movs	r3, #0
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	370c      	adds	r7, #12
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
	...

08007e60 <USBD_Update_Audio_MIC_DESC>:
void USBD_Update_Audio_MIC_DESC(uint8_t *desc,
                                uint8_t ac_itf,
                                uint8_t as_itf,
                                uint8_t in_ep,
                                uint8_t str_idx)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b083      	sub	sp, #12
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	4608      	mov	r0, r1
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4603      	mov	r3, r0
 8007e70:	70fb      	strb	r3, [r7, #3]
 8007e72:	460b      	mov	r3, r1
 8007e74:	70bb      	strb	r3, [r7, #2]
 8007e76:	4613      	mov	r3, r2
 8007e78:	707b      	strb	r3, [r7, #1]
  desc[11] = ac_itf;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	330b      	adds	r3, #11
 8007e7e:	78fa      	ldrb	r2, [r7, #3]
 8007e80:	701a      	strb	r2, [r3, #0]
  desc[19] = ac_itf;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	3313      	adds	r3, #19
 8007e86:	78fa      	ldrb	r2, [r7, #3]
 8007e88:	701a      	strb	r2, [r3, #0]
  desc[25] = str_idx;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	3319      	adds	r3, #25
 8007e8e:	7c3a      	ldrb	r2, [r7, #16]
 8007e90:	701a      	strb	r2, [r3, #0]
  desc[34] = as_itf;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	3322      	adds	r3, #34	; 0x22
 8007e96:	78ba      	ldrb	r2, [r7, #2]
 8007e98:	701a      	strb	r2, [r3, #0]
  desc[66 + AUDIO_MIC_CHANNELS] = as_itf;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	3343      	adds	r3, #67	; 0x43
 8007e9e:	78ba      	ldrb	r2, [r7, #2]
 8007ea0:	701a      	strb	r2, [r3, #0]
  desc[75 + AUDIO_MIC_CHANNELS] = as_itf;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	334c      	adds	r3, #76	; 0x4c
 8007ea6:	78ba      	ldrb	r2, [r7, #2]
 8007ea8:	701a      	strb	r2, [r3, #0]
  desc[102 + AUDIO_MIC_CHANNELS] = in_ep;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3367      	adds	r3, #103	; 0x67
 8007eae:	787a      	ldrb	r2, [r7, #1]
 8007eb0:	701a      	strb	r2, [r3, #0]

  AUDIO_MIC_EP = in_ep;
 8007eb2:	4a1f      	ldr	r2, [pc, #124]	; (8007f30 <USBD_Update_Audio_MIC_DESC+0xd0>)
 8007eb4:	787b      	ldrb	r3, [r7, #1]
 8007eb6:	7013      	strb	r3, [r2, #0]
  AUDIO_MIC_AC_ITF_NBR = ac_itf;
 8007eb8:	4a1e      	ldr	r2, [pc, #120]	; (8007f34 <USBD_Update_Audio_MIC_DESC+0xd4>)
 8007eba:	78fb      	ldrb	r3, [r7, #3]
 8007ebc:	7013      	strb	r3, [r2, #0]
  AUDIO_MIC_AS_ITF_NBR = as_itf;
 8007ebe:	4a1e      	ldr	r2, [pc, #120]	; (8007f38 <USBD_Update_Audio_MIC_DESC+0xd8>)
 8007ec0:	78bb      	ldrb	r3, [r7, #2]
 8007ec2:	7013      	strb	r3, [r2, #0]

  AUDIO_MIC_STR_DESC_IDX = str_idx;
 8007ec4:	4a1d      	ldr	r2, [pc, #116]	; (8007f3c <USBD_Update_Audio_MIC_DESC+0xdc>)
 8007ec6:	7c3b      	ldrb	r3, [r7, #16]
 8007ec8:	7013      	strb	r3, [r2, #0]

  haudioInstance.paketDimension = (AUDIO_MIC_SMPL_FREQ / 1000 * AUDIO_MIC_CHANNELS * 2);
 8007eca:	4b1d      	ldr	r3, [pc, #116]	; (8007f40 <USBD_Update_Audio_MIC_DESC+0xe0>)
 8007ecc:	2220      	movs	r2, #32
 8007ece:	825a      	strh	r2, [r3, #18]
  haudioInstance.frequency = AUDIO_MIC_SMPL_FREQ;
 8007ed0:	4b1b      	ldr	r3, [pc, #108]	; (8007f40 <USBD_Update_Audio_MIC_DESC+0xe0>)
 8007ed2:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8007ed6:	609a      	str	r2, [r3, #8]
  haudioInstance.buffer_length = haudioInstance.paketDimension * AUDIO_MIC_PACKET_NUM;
 8007ed8:	4b19      	ldr	r3, [pc, #100]	; (8007f40 <USBD_Update_Audio_MIC_DESC+0xe0>)
 8007eda:	8a5b      	ldrh	r3, [r3, #18]
 8007edc:	461a      	mov	r2, r3
 8007ede:	0092      	lsls	r2, r2, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	b29a      	uxth	r2, r3
 8007ee6:	4b16      	ldr	r3, [pc, #88]	; (8007f40 <USBD_Update_Audio_MIC_DESC+0xe0>)
 8007ee8:	81da      	strh	r2, [r3, #14]
  haudioInstance.channels = AUDIO_MIC_CHANNELS;
 8007eea:	4b15      	ldr	r3, [pc, #84]	; (8007f40 <USBD_Update_Audio_MIC_DESC+0xe0>)
 8007eec:	2201      	movs	r2, #1
 8007eee:	711a      	strb	r2, [r3, #4]
  haudioInstance.upper_treshold = 5;
 8007ef0:	4b13      	ldr	r3, [pc, #76]	; (8007f40 <USBD_Update_Audio_MIC_DESC+0xe0>)
 8007ef2:	2205      	movs	r2, #5
 8007ef4:	769a      	strb	r2, [r3, #26]
  haudioInstance.lower_treshold = 2;
 8007ef6:	4b12      	ldr	r3, [pc, #72]	; (8007f40 <USBD_Update_Audio_MIC_DESC+0xe0>)
 8007ef8:	2202      	movs	r2, #2
 8007efa:	76da      	strb	r2, [r3, #27]
  haudioInstance.state = STATE_USB_WAITING_FOR_INIT;
 8007efc:	4b10      	ldr	r3, [pc, #64]	; (8007f40 <USBD_Update_Audio_MIC_DESC+0xe0>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	751a      	strb	r2, [r3, #20]
  haudioInstance.wr_ptr = 3 * haudioInstance.paketDimension;
 8007f02:	4b0f      	ldr	r3, [pc, #60]	; (8007f40 <USBD_Update_Audio_MIC_DESC+0xe0>)
 8007f04:	8a5b      	ldrh	r3, [r3, #18]
 8007f06:	461a      	mov	r2, r3
 8007f08:	0052      	lsls	r2, r2, #1
 8007f0a:	4413      	add	r3, r2
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	4b0c      	ldr	r3, [pc, #48]	; (8007f40 <USBD_Update_Audio_MIC_DESC+0xe0>)
 8007f10:	831a      	strh	r2, [r3, #24]
  haudioInstance.rd_ptr = 0;
 8007f12:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <USBD_Update_Audio_MIC_DESC+0xe0>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	82da      	strh	r2, [r3, #22]
  haudioInstance.dataAmount = 0;
 8007f18:	4b09      	ldr	r3, [pc, #36]	; (8007f40 <USBD_Update_Audio_MIC_DESC+0xe0>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	821a      	strh	r2, [r3, #16]
  haudioInstance.buffer = 0;
 8007f1e:	4b08      	ldr	r3, [pc, #32]	; (8007f40 <USBD_Update_Audio_MIC_DESC+0xe0>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	200000d4 	.word	0x200000d4
 8007f34:	200015a0 	.word	0x200015a0
 8007f38:	200000d5 	.word	0x200000d5
 8007f3c:	200015a1 	.word	0x200015a1
 8007f40:	20001728 	.word	0x20001728

08007f44 <USBD_AUDIO_SPKR_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_SPKR_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_SPKR_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = &haudioInstance;
 8007f50:	4b3d      	ldr	r3, [pc, #244]	; (8008048 <USBD_AUDIO_SPKR_Init+0x104>)
 8007f52:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d105      	bne.n	8007f66 <USBD_AUDIO_SPKR_Init+0x22>
  {
    pdev->pClassData_UAC_SPKR = NULL;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
    return (uint8_t)USBD_EMEM;
 8007f62:	2302      	movs	r3, #2
 8007f64:	e06b      	b.n	800803e <USBD_AUDIO_SPKR_Init+0xfa>
  }

  pdev->pClassData_UAC_SPKR = (void *)haudio;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	7c1b      	ldrb	r3, [r3, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d10e      	bne.n	8007f94 <USBD_AUDIO_SPKR_Init+0x50>
  {
    pdev->ep_out[AUDIO_SPKR_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8007f76:	4b35      	ldr	r3, [pc, #212]	; (800804c <USBD_AUDIO_SPKR_Init+0x108>)
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	f003 020f 	and.w	r2, r3, #15
 8007f7e:	6879      	ldr	r1, [r7, #4]
 8007f80:	4613      	mov	r3, r2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	440b      	add	r3, r1
 8007f8a:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007f8e:	2201      	movs	r2, #1
 8007f90:	801a      	strh	r2, [r3, #0]
 8007f92:	e00d      	b.n	8007fb0 <USBD_AUDIO_SPKR_Init+0x6c>
  }
  else /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_SPKR_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8007f94:	4b2d      	ldr	r3, [pc, #180]	; (800804c <USBD_AUDIO_SPKR_Init+0x108>)
 8007f96:	781b      	ldrb	r3, [r3, #0]
 8007f98:	f003 020f 	and.w	r2, r3, #15
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	440b      	add	r3, r1
 8007fa8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8007fac:	2201      	movs	r2, #1
 8007fae:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_SPKR_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8007fb0:	4b26      	ldr	r3, [pc, #152]	; (800804c <USBD_AUDIO_SPKR_Init+0x108>)
 8007fb2:	7819      	ldrb	r1, [r3, #0]
 8007fb4:	2340      	movs	r3, #64	; 0x40
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f003 fdef 	bl	800bb9c <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_SPKR_EP & 0xFU].is_used = 1U;
 8007fbe:	4b23      	ldr	r3, [pc, #140]	; (800804c <USBD_AUDIO_SPKR_Init+0x108>)
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	f003 020f 	and.w	r2, r3, #15
 8007fc6:	6879      	ldr	r1, [r7, #4]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	440b      	add	r3, r1
 8007fd2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2200      	movs	r2, #0
 8007fde:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fe6:	2203      	movs	r2, #3
 8007fe8:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
  haudio->wr_ptr = 0U;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
  haudio->rd_ptr = 0U;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ffe:	2200      	movs	r2, #0
 8008000:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
  haudio->rd_enable = 0U;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800800a:	2200      	movs	r2, #0
 800800c:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_SPKR_ItfTypeDef *)pdev->pUserData_UAC_SPKR)->Init(USBD_AUDIO_FREQ, AUDIO_DEFAULT_VOLUME, 0U) != 0U)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2200      	movs	r2, #0
 800801a:	2146      	movs	r1, #70	; 0x46
 800801c:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8008020:	4798      	blx	r3
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d001      	beq.n	800802c <USBD_AUDIO_SPKR_Init+0xe8>
  {
    return (uint8_t)USBD_FAIL;
 8008028:	2303      	movs	r3, #3
 800802a:	e008      	b.n	800803e <USBD_AUDIO_SPKR_Init+0xfa>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_SPKR_EP, haudio->buffer,
 800802c:	4b07      	ldr	r3, [pc, #28]	; (800804c <USBD_AUDIO_SPKR_Init+0x108>)
 800802e:	7819      	ldrb	r1, [r3, #0]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	1d1a      	adds	r2, r3, #4
 8008034:	2340      	movs	r3, #64	; 0x40
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f003 febe 	bl	800bdb8 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	20001794 	.word	0x20001794
 800804c:	20000196 	.word	0x20000196

08008050 <USBD_AUDIO_SPKR_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_SPKR_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_SPKR_EP);
 800805c:	4b1a      	ldr	r3, [pc, #104]	; (80080c8 <USBD_AUDIO_SPKR_DeInit+0x78>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f003 fdc0 	bl	800bbe8 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_SPKR_EP & 0xFU].is_used = 0U;
 8008068:	4b17      	ldr	r3, [pc, #92]	; (80080c8 <USBD_AUDIO_SPKR_DeInit+0x78>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	f003 020f 	and.w	r2, r3, #15
 8008070:	6879      	ldr	r1, [r7, #4]
 8008072:	4613      	mov	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	440b      	add	r3, r1
 800807c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008080:	2200      	movs	r2, #0
 8008082:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIO_SPKR_EP & 0xFU].bInterval = 0U;
 8008084:	4b10      	ldr	r3, [pc, #64]	; (80080c8 <USBD_AUDIO_SPKR_DeInit+0x78>)
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	f003 020f 	and.w	r2, r3, #15
 800808c:	6879      	ldr	r1, [r7, #4]
 800808e:	4613      	mov	r3, r2
 8008090:	009b      	lsls	r3, r3, #2
 8008092:	4413      	add	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	440b      	add	r3, r1
 8008098:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800809c:	2200      	movs	r2, #0
 800809e:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassData_UAC_SPKR != NULL)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d009      	beq.n	80080be <USBD_AUDIO_SPKR_DeInit+0x6e>
  {
    ((USBD_AUDIO_SPKR_ItfTypeDef *)pdev->pUserData_UAC_SPKR)->DeInit(0U);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	2000      	movs	r0, #0
 80080b4:	4798      	blx	r3
#if (0)
    (void)USBD_free(pdev->pClassData_UAC_SPKR);
#endif
    pdev->pClassData_UAC_SPKR = NULL;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  }

  return (uint8_t)USBD_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3708      	adds	r7, #8
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	20000196 	.word	0x20000196

080080cc <USBD_AUDIO_SPKR_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_SPKR_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b086      	sub	sp, #24
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_SPKR_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80080d6:	2300      	movs	r3, #0
 80080d8:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_SPKR_HandleTypeDef *)pdev->pClassData_UAC_SPKR;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80080e4:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <USBD_AUDIO_SPKR_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80080ec:	2303      	movs	r3, #3
 80080ee:	e0b0      	b.n	8008252 <USBD_AUDIO_SPKR_Setup+0x186>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d01a      	beq.n	8008132 <USBD_AUDIO_SPKR_Setup+0x66>
 80080fc:	2b20      	cmp	r3, #32
 80080fe:	f040 80a0 	bne.w	8008242 <USBD_AUDIO_SPKR_Setup+0x176>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	785b      	ldrb	r3, [r3, #1]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d006      	beq.n	8008118 <USBD_AUDIO_SPKR_Setup+0x4c>
 800810a:	2b81      	cmp	r3, #129	; 0x81
 800810c:	d109      	bne.n	8008122 <USBD_AUDIO_SPKR_Setup+0x56>
    {
    case AUDIO_REQ_GET_CUR:
      USBD_AUDIO_SPKR_REQ_GetCurrent(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f9b1 	bl	8008478 <USBD_AUDIO_SPKR_REQ_GetCurrent>
      break;
 8008116:	e00b      	b.n	8008130 <USBD_AUDIO_SPKR_Setup+0x64>

    case AUDIO_REQ_SET_CUR:
      USBD_AUDIO_SPKR_REQ_SetCurrent(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f9d0 	bl	80084c0 <USBD_AUDIO_SPKR_REQ_SetCurrent>
      break;
 8008120:	e006      	b.n	8008130 <USBD_AUDIO_SPKR_Setup+0x64>

    default:
      USBD_CtlError(pdev, req);
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f003 fa9b 	bl	800b660 <USBD_CtlError>
      ret = USBD_FAIL;
 800812a:	2303      	movs	r3, #3
 800812c:	75fb      	strb	r3, [r7, #23]
      break;
 800812e:	bf00      	nop
    }
    break;
 8008130:	e08e      	b.n	8008250 <USBD_AUDIO_SPKR_Setup+0x184>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	785b      	ldrb	r3, [r3, #1]
 8008136:	2b0b      	cmp	r3, #11
 8008138:	d878      	bhi.n	800822c <USBD_AUDIO_SPKR_Setup+0x160>
 800813a:	a201      	add	r2, pc, #4	; (adr r2, 8008140 <USBD_AUDIO_SPKR_Setup+0x74>)
 800813c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008140:	08008171 	.word	0x08008171
 8008144:	0800823b 	.word	0x0800823b
 8008148:	0800822d 	.word	0x0800822d
 800814c:	0800822d 	.word	0x0800822d
 8008150:	0800822d 	.word	0x0800822d
 8008154:	0800822d 	.word	0x0800822d
 8008158:	0800819b 	.word	0x0800819b
 800815c:	0800822d 	.word	0x0800822d
 8008160:	0800822d 	.word	0x0800822d
 8008164:	0800822d 	.word	0x0800822d
 8008168:	080081c5 	.word	0x080081c5
 800816c:	080081ed 	.word	0x080081ed
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008176:	b2db      	uxtb	r3, r3
 8008178:	2b03      	cmp	r3, #3
 800817a:	d107      	bne.n	800818c <USBD_AUDIO_SPKR_Setup+0xc0>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800817c:	f107 0308 	add.w	r3, r7, #8
 8008180:	2202      	movs	r2, #2
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f003 fadc 	bl	800b742 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800818a:	e059      	b.n	8008240 <USBD_AUDIO_SPKR_Setup+0x174>
        USBD_CtlError(pdev, req);
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f003 fa66 	bl	800b660 <USBD_CtlError>
        ret = USBD_FAIL;
 8008194:	2303      	movs	r3, #3
 8008196:	75fb      	strb	r3, [r7, #23]
      break;
 8008198:	e052      	b.n	8008240 <USBD_AUDIO_SPKR_Setup+0x174>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	885b      	ldrh	r3, [r3, #2]
 800819e:	0a1b      	lsrs	r3, r3, #8
 80081a0:	b29b      	uxth	r3, r3
 80081a2:	2b21      	cmp	r3, #33	; 0x21
 80081a4:	d14b      	bne.n	800823e <USBD_AUDIO_SPKR_Setup+0x172>
      {
        pbuf = USBD_AUDIO_SPKR_CfgDesc + 18;
 80081a6:	4b2d      	ldr	r3, [pc, #180]	; (800825c <USBD_AUDIO_SPKR_Setup+0x190>)
 80081a8:	60fb      	str	r3, [r7, #12]
        len = MIN(USBD_AUDIO_SPKR_CONFIG_DESC_SIZE, req->wLength);
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	88db      	ldrh	r3, [r3, #6]
 80081ae:	2b75      	cmp	r3, #117	; 0x75
 80081b0:	bf28      	it	cs
 80081b2:	2375      	movcs	r3, #117	; 0x75
 80081b4:	817b      	strh	r3, [r7, #10]

        (void)USBD_CtlSendData(pdev, pbuf, len);
 80081b6:	897b      	ldrh	r3, [r7, #10]
 80081b8:	461a      	mov	r2, r3
 80081ba:	68f9      	ldr	r1, [r7, #12]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f003 fac0 	bl	800b742 <USBD_CtlSendData>
      }
      break;
 80081c2:	e03c      	b.n	800823e <USBD_AUDIO_SPKR_Setup+0x172>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d106      	bne.n	80081de <USBD_AUDIO_SPKR_Setup+0x112>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	2201      	movs	r2, #1
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f003 fab3 	bl	800b742 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80081dc:	e030      	b.n	8008240 <USBD_AUDIO_SPKR_Setup+0x174>
        USBD_CtlError(pdev, req);
 80081de:	6839      	ldr	r1, [r7, #0]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f003 fa3d 	bl	800b660 <USBD_CtlError>
        ret = USBD_FAIL;
 80081e6:	2303      	movs	r3, #3
 80081e8:	75fb      	strb	r3, [r7, #23]
      break;
 80081ea:	e029      	b.n	8008240 <USBD_AUDIO_SPKR_Setup+0x174>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081f2:	b2db      	uxtb	r3, r3
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d112      	bne.n	800821e <USBD_AUDIO_SPKR_Setup+0x152>
      {
        if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	885b      	ldrh	r3, [r3, #2]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b0f      	cmp	r3, #15
 8008200:	d806      	bhi.n	8008210 <USBD_AUDIO_SPKR_Setup+0x144>
        {
          haudio->alt_setting = (uint8_t)(req->wValue);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	885b      	ldrh	r3, [r3, #2]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	461a      	mov	r2, r3
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800820e:	e017      	b.n	8008240 <USBD_AUDIO_SPKR_Setup+0x174>
          USBD_CtlError(pdev, req);
 8008210:	6839      	ldr	r1, [r7, #0]
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f003 fa24 	bl	800b660 <USBD_CtlError>
          ret = USBD_FAIL;
 8008218:	2303      	movs	r3, #3
 800821a:	75fb      	strb	r3, [r7, #23]
      break;
 800821c:	e010      	b.n	8008240 <USBD_AUDIO_SPKR_Setup+0x174>
        USBD_CtlError(pdev, req);
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f003 fa1d 	bl	800b660 <USBD_CtlError>
        ret = USBD_FAIL;
 8008226:	2303      	movs	r3, #3
 8008228:	75fb      	strb	r3, [r7, #23]
      break;
 800822a:	e009      	b.n	8008240 <USBD_AUDIO_SPKR_Setup+0x174>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f003 fa16 	bl	800b660 <USBD_CtlError>
      ret = USBD_FAIL;
 8008234:	2303      	movs	r3, #3
 8008236:	75fb      	strb	r3, [r7, #23]
      break;
 8008238:	e002      	b.n	8008240 <USBD_AUDIO_SPKR_Setup+0x174>
      break;
 800823a:	bf00      	nop
 800823c:	e008      	b.n	8008250 <USBD_AUDIO_SPKR_Setup+0x184>
      break;
 800823e:	bf00      	nop
    }
    break;
 8008240:	e006      	b.n	8008250 <USBD_AUDIO_SPKR_Setup+0x184>
  default:
    USBD_CtlError(pdev, req);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f003 fa0b 	bl	800b660 <USBD_CtlError>
    ret = USBD_FAIL;
 800824a:	2303      	movs	r3, #3
 800824c:	75fb      	strb	r3, [r7, #23]
    break;
 800824e:	bf00      	nop
  }

  return (uint8_t)ret;
 8008250:	7dfb      	ldrb	r3, [r7, #23]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3718      	adds	r7, #24
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
 800825a:	bf00      	nop
 800825c:	200001e6 	.word	0x200001e6

08008260 <USBD_AUDIO_SPKR_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_SPKR_GetCfgDesc(uint16_t *length)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_SPKR_CfgDesc);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2275      	movs	r2, #117	; 0x75
 800826c:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_SPKR_CfgDesc;
 800826e:	4b03      	ldr	r3, [pc, #12]	; (800827c <USBD_AUDIO_SPKR_GetCfgDesc+0x1c>)
}
 8008270:	4618      	mov	r0, r3
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	200001d4 	.word	0x200001d4

08008280 <USBD_AUDIO_SPKR_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_SPKR_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008280:	b480      	push	{r7}
 8008282:	b083      	sub	sp, #12
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	460b      	mov	r3, r1
 800828a:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <USBD_AUDIO_SPKR_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SPKR_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_SPKR_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_SPKR_HandleTypeDef *)pdev->pClassData_UAC_SPKR;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80082a8:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <USBD_AUDIO_SPKR_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e025      	b.n	8008300 <USBD_AUDIO_SPKR_EP0_RxReady+0x66>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ba:	f893 340a 	ldrb.w	r3, [r3, #1034]	; 0x40a
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d11d      	bne.n	80082fe <USBD_AUDIO_SPKR_EP0_RxReady+0x64>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_STREAMING_CTRL)
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082c8:	f893 344c 	ldrb.w	r3, [r3, #1100]	; 0x44c
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d116      	bne.n	80082fe <USBD_AUDIO_SPKR_EP0_RxReady+0x64>
    {
      ((USBD_AUDIO_SPKR_ItfTypeDef *)pdev->pUserData_UAC_SPKR)->MuteCtl(haudio->control.data[0]);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80082de:	f892 240b 	ldrb.w	r2, [r2, #1035]	; 0x40b
 80082e2:	4610      	mov	r0, r2
 80082e4:	4798      	blx	r3
      haudio->control.cmd = 0U;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
      haudio->control.len = 0U;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
    }
  }

  return (uint8_t)USBD_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <USBD_AUDIO_SPKR_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SPKR_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <USBD_AUDIO_SPKR_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SPKR_SOF(USBD_HandleTypeDef *pdev)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <USBD_AUDIO_SPKR_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_SPKR_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	460b      	mov	r3, r1
 800833e:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	370c      	adds	r7, #12
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <USBD_AUDIO_SPKR_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_SPKR_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800834e:	b480      	push	{r7}
 8008350:	b083      	sub	sp, #12
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	460b      	mov	r3, r1
 8008358:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <USBD_AUDIO_SPKR_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_SPKR_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_SPKR_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_SPKR_HandleTypeDef *)pdev->pClassData_UAC_SPKR;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800837a:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d101      	bne.n	8008386 <USBD_AUDIO_SPKR_DataOut+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008382:	2303      	movs	r3, #3
 8008384:	e072      	b.n	800846c <USBD_AUDIO_SPKR_DataOut+0x104>
  }

  if (epnum == AUDIO_SPKR_EP)
 8008386:	4b3b      	ldr	r3, [pc, #236]	; (8008474 <USBD_AUDIO_SPKR_DataOut+0x10c>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	78fa      	ldrb	r2, [r7, #3]
 800838c:	429a      	cmp	r2, r3
 800838e:	d16c      	bne.n	800846a <USBD_AUDIO_SPKR_DataOut+0x102>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8008390:	78fb      	ldrb	r3, [r7, #3]
 8008392:	4619      	mov	r1, r3
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f003 fd30 	bl	800bdfa <USBD_LL_GetRxDataSize>
 800839a:	4603      	mov	r3, r0
 800839c:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_SPKR_ItfTypeDef *)pdev->pUserData_UAC_SPKR)->PeriodicTC(&haudio->buffer[haudio->wr_ptr], PacketSize, AUDIO_OUT_TC);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	68fa      	ldr	r2, [r7, #12]
 80083a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80083ac:	f8b2 2408 	ldrh.w	r2, [r2, #1032]	; 0x408
 80083b0:	4611      	mov	r1, r2
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	440a      	add	r2, r1
 80083b6:	1d10      	adds	r0, r2, #4
 80083b8:	8979      	ldrh	r1, [r7, #10]
 80083ba:	2201      	movs	r2, #1
 80083bc:	4798      	blx	r3

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083c4:	f8b3 2408 	ldrh.w	r2, [r3, #1032]	; 0x408
 80083c8:	897b      	ldrh	r3, [r7, #10]
 80083ca:	4413      	add	r3, r2
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083d4:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083de:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 80083e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083e6:	d11c      	bne.n	8008422 <USBD_AUDIO_SPKR_DataOut+0xba>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083ee:	2200      	movs	r2, #0
 80083f0:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083fa:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 80083fe:	2b03      	cmp	r3, #3
 8008400:	d10f      	bne.n	8008422 <USBD_AUDIO_SPKR_DataOut+0xba>
      {
        ((USBD_AUDIO_SPKR_ItfTypeDef *)pdev->pUserData_UAC_SPKR)->AudioCmd(&haudio->buffer[0], AUDIO_TOTAL_BUF_SIZE / 2U, AUDIO_CMD_START);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	1d10      	adds	r0, r2, #4
 800840e:	2201      	movs	r2, #1
 8008410:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8008414:	4798      	blx	r3
        haudio->offset = AUDIO_OFFSET_NONE;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
      }
    }

    if (haudio->rd_enable == 0U)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008428:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10d      	bne.n	800844c <USBD_AUDIO_SPKR_DataOut+0xe4>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008436:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800843a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800843e:	d105      	bne.n	800844c <USBD_AUDIO_SPKR_DataOut+0xe4>
      {
        haudio->rd_enable = 1U;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_SPKR_EP,
 800844c:	4b09      	ldr	r3, [pc, #36]	; (8008474 <USBD_AUDIO_SPKR_DataOut+0x10c>)
 800844e:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008456:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800845a:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_SPKR_EP,
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4413      	add	r3, r2
 8008460:	1d1a      	adds	r2, r3, #4
 8008462:	2340      	movs	r3, #64	; 0x40
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f003 fca7 	bl	800bdb8 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	20000196 	.word	0x20000196

08008478 <USBD_AUDIO_SPKR_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void  USBD_AUDIO_SPKR_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_SPKR_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_SPKR_HandleTypeDef *)pdev->pClassData_UAC_SPKR;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008488:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d013      	beq.n	80084b8 <USBD_AUDIO_SPKR_REQ_GetCurrent+0x40>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, 64U);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8008496:	330b      	adds	r3, #11
 8008498:	2240      	movs	r2, #64	; 0x40
 800849a:	2100      	movs	r1, #0
 800849c:	4618      	mov	r0, r3
 800849e:	f003 fd23 	bl	800bee8 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80084a8:	330b      	adds	r3, #11
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	88d2      	ldrh	r2, [r2, #6]
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f003 f946 	bl	800b742 <USBD_CtlSendData>
 80084b6:	e000      	b.n	80084ba <USBD_AUDIO_SPKR_REQ_GetCurrent+0x42>
    return;
 80084b8:	bf00      	nop
}
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_AUDIO_SPKR_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void USBD_AUDIO_SPKR_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_SPKR_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_SPKR_HandleTypeDef *)pdev->pClassData_UAC_SPKR;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80084d0:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d026      	beq.n	8008526 <USBD_AUDIO_SPKR_REQ_SetCurrent+0x66>
  {
    return;
  }

  if (req->wLength != 0U)
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	88db      	ldrh	r3, [r3, #6]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d023      	beq.n	8008528 <USBD_AUDIO_SPKR_REQ_SetCurrent+0x68>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80084e6:	330b      	adds	r3, #11
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	88d2      	ldrh	r2, [r2, #6]
 80084ec:	4619      	mov	r1, r3
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f003 f953 	bl	800b79a <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 240a 	strb.w	r2, [r3, #1034]	; 0x40a
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	88db      	ldrh	r3, [r3, #6]
 8008504:	b2da      	uxtb	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800850c:	f883 244b 	strb.w	r2, [r3, #1099]	; 0x44b
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	889b      	ldrh	r3, [r3, #4]
 8008514:	0a1b      	lsrs	r3, r3, #8
 8008516:	b29b      	uxth	r3, r3
 8008518:	b2da      	uxtb	r2, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008520:	f883 244c 	strb.w	r2, [r3, #1100]	; 0x44c
 8008524:	e000      	b.n	8008528 <USBD_AUDIO_SPKR_REQ_SetCurrent+0x68>
    return;
 8008526:	bf00      	nop
  }
}
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
	...

08008530 <USBD_AUDIO_SPKR_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_SPKR_GetDeviceQualifierDesc(uint16_t *length)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_SPKR_DeviceQualifierDesc);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	220a      	movs	r2, #10
 800853c:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_SPKR_DeviceQualifierDesc;
 800853e:	4b03      	ldr	r3, [pc, #12]	; (800854c <USBD_AUDIO_SPKR_GetDeviceQualifierDesc+0x1c>)
}
 8008540:	4618      	mov	r0, r3
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr
 800854c:	2000024c 	.word	0x2000024c

08008550 <USBD_AUDIO_SPKR_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_SPKR_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_AUDIO_SPKR_ItfTypeDef *fops)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d101      	bne.n	8008564 <USBD_AUDIO_SPKR_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008560:	2303      	movs	r3, #3
 8008562:	e004      	b.n	800856e <USBD_AUDIO_SPKR_RegisterInterface+0x1e>
  }

  pdev->pUserData_UAC_SPKR = fops;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec

  return (uint8_t)USBD_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
	...

0800857c <USBD_Update_Audio_SPKR_DESC>:
void USBD_Update_Audio_SPKR_DESC(uint8_t *desc,
                                 uint8_t ac_itf,
                                 uint8_t as_itf,
                                 uint8_t out_ep,
                                 uint8_t str_idx)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	4608      	mov	r0, r1
 8008586:	4611      	mov	r1, r2
 8008588:	461a      	mov	r2, r3
 800858a:	4603      	mov	r3, r0
 800858c:	70fb      	strb	r3, [r7, #3]
 800858e:	460b      	mov	r3, r1
 8008590:	70bb      	strb	r3, [r7, #2]
 8008592:	4613      	mov	r3, r2
 8008594:	707b      	strb	r3, [r7, #1]
  desc[11] = ac_itf;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	330b      	adds	r3, #11
 800859a:	78fa      	ldrb	r2, [r7, #3]
 800859c:	701a      	strb	r2, [r3, #0]
  desc[19] = ac_itf;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	3313      	adds	r3, #19
 80085a2:	78fa      	ldrb	r2, [r7, #3]
 80085a4:	701a      	strb	r2, [r3, #0]
  desc[25] = str_idx;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	3319      	adds	r3, #25
 80085aa:	7c3a      	ldrb	r2, [r7, #16]
 80085ac:	701a      	strb	r2, [r3, #0]
  desc[34] = as_itf;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	3322      	adds	r3, #34	; 0x22
 80085b2:	78ba      	ldrb	r2, [r7, #2]
 80085b4:	701a      	strb	r2, [r3, #0]
  desc[67] = as_itf;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	3343      	adds	r3, #67	; 0x43
 80085ba:	78ba      	ldrb	r2, [r7, #2]
 80085bc:	701a      	strb	r2, [r3, #0]
  desc[76] = as_itf;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	334c      	adds	r3, #76	; 0x4c
 80085c2:	78ba      	ldrb	r2, [r7, #2]
 80085c4:	701a      	strb	r2, [r3, #0]
  desc[103] = out_ep;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	3367      	adds	r3, #103	; 0x67
 80085ca:	787a      	ldrb	r2, [r7, #1]
 80085cc:	701a      	strb	r2, [r3, #0]

  AUDIO_SPKR_EP = out_ep;
 80085ce:	4a09      	ldr	r2, [pc, #36]	; (80085f4 <USBD_Update_Audio_SPKR_DESC+0x78>)
 80085d0:	787b      	ldrb	r3, [r7, #1]
 80085d2:	7013      	strb	r3, [r2, #0]
  AUDIO_SPKR_AC_ITF_NBR = ac_itf;
 80085d4:	4a08      	ldr	r2, [pc, #32]	; (80085f8 <USBD_Update_Audio_SPKR_DESC+0x7c>)
 80085d6:	78fb      	ldrb	r3, [r7, #3]
 80085d8:	7013      	strb	r3, [r2, #0]
  AUDIO_SPKR_AS_ITF_NBR = as_itf;
 80085da:	4a08      	ldr	r2, [pc, #32]	; (80085fc <USBD_Update_Audio_SPKR_DESC+0x80>)
 80085dc:	78bb      	ldrb	r3, [r7, #2]
 80085de:	7013      	strb	r3, [r2, #0]

  AUDIO_SPKR_STR_DESC_IDX = str_idx;
 80085e0:	4a07      	ldr	r2, [pc, #28]	; (8008600 <USBD_Update_Audio_SPKR_DESC+0x84>)
 80085e2:	7c3b      	ldrb	r3, [r7, #16]
 80085e4:	7013      	strb	r3, [r2, #0]
}
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	20000196 	.word	0x20000196
 80085f8:	20001792 	.word	0x20001792
 80085fc:	20000197 	.word	0x20000197
 8008600:	20001793 	.word	0x20001793

08008604 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008610:	2300      	movs	r3, #0
 8008612:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008614:	2300      	movs	r3, #0
 8008616:	73fb      	strb	r3, [r7, #15]
 8008618:	e0c6      	b.n	80087a8 <USBD_CDC_Init+0x1a4>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 800861a:	7bfb      	ldrb	r3, [r7, #15]
 800861c:	f240 421c 	movw	r2, #1052	; 0x41c
 8008620:	fb02 f303 	mul.w	r3, r2, r3
 8008624:	4a65      	ldr	r2, [pc, #404]	; (80087bc <USBD_CDC_Init+0x1b8>)
 8008626:	4413      	add	r3, r2
 8008628:	60bb      	str	r3, [r7, #8]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	7c1b      	ldrb	r3, [r3, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d13d      	bne.n	80086ae <USBD_CDC_Init+0xaa>
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 8008632:	7bfb      	ldrb	r3, [r7, #15]
 8008634:	4a62      	ldr	r2, [pc, #392]	; (80087c0 <USBD_CDC_Init+0x1bc>)
 8008636:	5cd1      	ldrb	r1, [r2, r3]
 8008638:	f44f 7300 	mov.w	r3, #512	; 0x200
 800863c:	2202      	movs	r2, #2
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f003 faac 	bl	800bb9c <USBD_LL_OpenEP>
                           CDC_DATA_HS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 8008644:	7bfb      	ldrb	r3, [r7, #15]
 8008646:	4a5e      	ldr	r2, [pc, #376]	; (80087c0 <USBD_CDC_Init+0x1bc>)
 8008648:	5cd3      	ldrb	r3, [r2, r3]
 800864a:	f003 020f 	and.w	r2, r3, #15
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	4613      	mov	r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	4413      	add	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	440b      	add	r3, r1
 800865a:	3324      	adds	r3, #36	; 0x24
 800865c:	2201      	movs	r2, #1
 800865e:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	4a58      	ldr	r2, [pc, #352]	; (80087c4 <USBD_CDC_Init+0x1c0>)
 8008664:	5cd1      	ldrb	r1, [r2, r3]
 8008666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800866a:	2202      	movs	r2, #2
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f003 fa95 	bl	800bb9c <USBD_LL_OpenEP>
                           CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 8008672:	7bfb      	ldrb	r3, [r7, #15]
 8008674:	4a53      	ldr	r2, [pc, #332]	; (80087c4 <USBD_CDC_Init+0x1c0>)
 8008676:	5cd3      	ldrb	r3, [r2, r3]
 8008678:	f003 020f 	and.w	r2, r3, #15
 800867c:	6879      	ldr	r1, [r7, #4]
 800867e:	4613      	mov	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	440b      	add	r3, r1
 8008688:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800868c:	2201      	movs	r2, #1
 800868e:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008690:	7bfb      	ldrb	r3, [r7, #15]
 8008692:	4a4d      	ldr	r2, [pc, #308]	; (80087c8 <USBD_CDC_Init+0x1c4>)
 8008694:	5cd3      	ldrb	r3, [r2, r3]
 8008696:	f003 020f 	and.w	r2, r3, #15
 800869a:	6879      	ldr	r1, [r7, #4]
 800869c:	4613      	mov	r3, r2
 800869e:	009b      	lsls	r3, r3, #2
 80086a0:	4413      	add	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	440b      	add	r3, r1
 80086a6:	3326      	adds	r3, #38	; 0x26
 80086a8:	2210      	movs	r2, #16
 80086aa:	801a      	strh	r2, [r3, #0]
 80086ac:	e03a      	b.n	8008724 <USBD_CDC_Init+0x120>
    }
    else
    {
      /* Open EP IN */
      (void)USBD_LL_OpenEP(pdev, CDC_IN_EP[i], USBD_EP_TYPE_BULK,
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
 80086b0:	4a43      	ldr	r2, [pc, #268]	; (80087c0 <USBD_CDC_Init+0x1bc>)
 80086b2:	5cd1      	ldrb	r1, [r2, r3]
 80086b4:	2340      	movs	r3, #64	; 0x40
 80086b6:	2202      	movs	r2, #2
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f003 fa6f 	bl	800bb9c <USBD_LL_OpenEP>
                           CDC_DATA_FS_IN_PACKET_SIZE);

      pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 1U;
 80086be:	7bfb      	ldrb	r3, [r7, #15]
 80086c0:	4a3f      	ldr	r2, [pc, #252]	; (80087c0 <USBD_CDC_Init+0x1bc>)
 80086c2:	5cd3      	ldrb	r3, [r2, r3]
 80086c4:	f003 020f 	and.w	r2, r3, #15
 80086c8:	6879      	ldr	r1, [r7, #4]
 80086ca:	4613      	mov	r3, r2
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	440b      	add	r3, r1
 80086d4:	3324      	adds	r3, #36	; 0x24
 80086d6:	2201      	movs	r2, #1
 80086d8:	801a      	strh	r2, [r3, #0]

      /* Open EP OUT */
      (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP[i], USBD_EP_TYPE_BULK,
 80086da:	7bfb      	ldrb	r3, [r7, #15]
 80086dc:	4a39      	ldr	r2, [pc, #228]	; (80087c4 <USBD_CDC_Init+0x1c0>)
 80086de:	5cd1      	ldrb	r1, [r2, r3]
 80086e0:	2340      	movs	r3, #64	; 0x40
 80086e2:	2202      	movs	r2, #2
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f003 fa59 	bl	800bb9c <USBD_LL_OpenEP>
                           CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 1U;
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
 80086ec:	4a35      	ldr	r2, [pc, #212]	; (80087c4 <USBD_CDC_Init+0x1c0>)
 80086ee:	5cd3      	ldrb	r3, [r2, r3]
 80086f0:	f003 020f 	and.w	r2, r3, #15
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	4613      	mov	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	440b      	add	r3, r1
 8008700:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008704:	2201      	movs	r2, #1
 8008706:	801a      	strh	r2, [r3, #0]

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008708:	7bfb      	ldrb	r3, [r7, #15]
 800870a:	4a2f      	ldr	r2, [pc, #188]	; (80087c8 <USBD_CDC_Init+0x1c4>)
 800870c:	5cd3      	ldrb	r3, [r2, r3]
 800870e:	f003 020f 	and.w	r2, r3, #15
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	4613      	mov	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	4413      	add	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	440b      	add	r3, r1
 800871e:	3326      	adds	r3, #38	; 0x26
 8008720:	2210      	movs	r2, #16
 8008722:	801a      	strh	r2, [r3, #0]
    }

    /* Open Command IN EP */
    (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP[i], USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	4a28      	ldr	r2, [pc, #160]	; (80087c8 <USBD_CDC_Init+0x1c4>)
 8008728:	5cd1      	ldrb	r1, [r2, r3]
 800872a:	2308      	movs	r3, #8
 800872c:	2203      	movs	r2, #3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f003 fa34 	bl	800bb9c <USBD_LL_OpenEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 1U;
 8008734:	7bfb      	ldrb	r3, [r7, #15]
 8008736:	4a24      	ldr	r2, [pc, #144]	; (80087c8 <USBD_CDC_Init+0x1c4>)
 8008738:	5cd3      	ldrb	r3, [r2, r3]
 800873a:	f003 020f 	and.w	r2, r3, #15
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	4613      	mov	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	440b      	add	r3, r1
 800874a:	3324      	adds	r3, #36	; 0x24
 800874c:	2201      	movs	r2, #1
 800874e:	801a      	strh	r2, [r3, #0]

    /* Init  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Init(i);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	7bfa      	ldrb	r2, [r7, #15]
 800875a:	4610      	mov	r0, r2
 800875c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800875e:	68bb      	ldr	r3, [r7, #8]
 8008760:	2200      	movs	r2, #0
 8008762:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
    hcdc->RxState = 0U;
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2200      	movs	r2, #0
 800876a:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	7c1b      	ldrb	r3, [r3, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10b      	bne.n	800878e <USBD_CDC_Init+0x18a>
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 8008776:	7bfb      	ldrb	r3, [r7, #15]
 8008778:	4a12      	ldr	r2, [pc, #72]	; (80087c4 <USBD_CDC_Init+0x1c0>)
 800877a:	5cd1      	ldrb	r1, [r2, r3]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008782:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f003 fb16 	bl	800bdb8 <USBD_LL_PrepareReceive>
 800878c:	e009      	b.n	80087a2 <USBD_CDC_Init+0x19e>
                                   CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[i], hcdc->RxBuffer,
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	4a0c      	ldr	r2, [pc, #48]	; (80087c4 <USBD_CDC_Init+0x1c0>)
 8008792:	5cd1      	ldrb	r1, [r2, r3]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800879a:	2340      	movs	r3, #64	; 0x40
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f003 fb0b 	bl	800bdb8 <USBD_LL_PrepareReceive>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	3301      	adds	r3, #1
 80087a6:	73fb      	strb	r3, [r7, #15]
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	f67f af35 	bls.w	800861a <USBD_CDC_Init+0x16>
                                   CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return (uint8_t)USBD_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	20002bfc 	.word	0x20002bfc
 80087c0:	20002be4 	.word	0x20002be4
 80087c4:	20002be8 	.word	0x20002be8
 80087c8:	20002bec 	.word	0x20002bec

080087cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	460b      	mov	r3, r1
 80087d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80087d8:	2300      	movs	r3, #0
 80087da:	73fb      	strb	r3, [r7, #15]
 80087dc:	e057      	b.n	800888e <USBD_CDC_DeInit+0xc2>
  {
    /* Close EP IN */
    (void)USBD_LL_CloseEP(pdev, CDC_IN_EP[i]);
 80087de:	7bfb      	ldrb	r3, [r7, #15]
 80087e0:	4a2f      	ldr	r2, [pc, #188]	; (80088a0 <USBD_CDC_DeInit+0xd4>)
 80087e2:	5cd3      	ldrb	r3, [r2, r3]
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f003 f9fe 	bl	800bbe8 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_IN_EP[i] & 0xFU].is_used = 0U;
 80087ec:	7bfb      	ldrb	r3, [r7, #15]
 80087ee:	4a2c      	ldr	r2, [pc, #176]	; (80088a0 <USBD_CDC_DeInit+0xd4>)
 80087f0:	5cd3      	ldrb	r3, [r2, r3]
 80087f2:	f003 020f 	and.w	r2, r3, #15
 80087f6:	6879      	ldr	r1, [r7, #4]
 80087f8:	4613      	mov	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4413      	add	r3, r2
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	440b      	add	r3, r1
 8008802:	3324      	adds	r3, #36	; 0x24
 8008804:	2200      	movs	r2, #0
 8008806:	801a      	strh	r2, [r3, #0]

    /* Close EP OUT */
    (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP[i]);
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	4a26      	ldr	r2, [pc, #152]	; (80088a4 <USBD_CDC_DeInit+0xd8>)
 800880c:	5cd3      	ldrb	r3, [r2, r3]
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f003 f9e9 	bl	800bbe8 <USBD_LL_CloseEP>
    pdev->ep_out[CDC_OUT_EP[i] & 0xFU].is_used = 0U;
 8008816:	7bfb      	ldrb	r3, [r7, #15]
 8008818:	4a22      	ldr	r2, [pc, #136]	; (80088a4 <USBD_CDC_DeInit+0xd8>)
 800881a:	5cd3      	ldrb	r3, [r2, r3]
 800881c:	f003 020f 	and.w	r2, r3, #15
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	4613      	mov	r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	440b      	add	r3, r1
 800882c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008830:	2200      	movs	r2, #0
 8008832:	801a      	strh	r2, [r3, #0]

    /* Close Command IN EP */
    (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP[i]);
 8008834:	7bfb      	ldrb	r3, [r7, #15]
 8008836:	4a1c      	ldr	r2, [pc, #112]	; (80088a8 <USBD_CDC_DeInit+0xdc>)
 8008838:	5cd3      	ldrb	r3, [r2, r3]
 800883a:	4619      	mov	r1, r3
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f003 f9d3 	bl	800bbe8 <USBD_LL_CloseEP>
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].is_used = 0U;
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	4a18      	ldr	r2, [pc, #96]	; (80088a8 <USBD_CDC_DeInit+0xdc>)
 8008846:	5cd3      	ldrb	r3, [r2, r3]
 8008848:	f003 020f 	and.w	r2, r3, #15
 800884c:	6879      	ldr	r1, [r7, #4]
 800884e:	4613      	mov	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	4413      	add	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	440b      	add	r3, r1
 8008858:	3324      	adds	r3, #36	; 0x24
 800885a:	2200      	movs	r2, #0
 800885c:	801a      	strh	r2, [r3, #0]
    pdev->ep_in[CDC_CMD_EP[i] & 0xFU].bInterval = 0U;
 800885e:	7bfb      	ldrb	r3, [r7, #15]
 8008860:	4a11      	ldr	r2, [pc, #68]	; (80088a8 <USBD_CDC_DeInit+0xdc>)
 8008862:	5cd3      	ldrb	r3, [r2, r3]
 8008864:	f003 020f 	and.w	r2, r3, #15
 8008868:	6879      	ldr	r1, [r7, #4]
 800886a:	4613      	mov	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	440b      	add	r3, r1
 8008874:	3326      	adds	r3, #38	; 0x26
 8008876:	2200      	movs	r2, #0
 8008878:	801a      	strh	r2, [r3, #0]

    /* DeInit  physical Interface components */
    ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->DeInit(i);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	7bfa      	ldrb	r2, [r7, #15]
 8008884:	4610      	mov	r0, r2
 8008886:	4798      	blx	r3
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008888:	7bfb      	ldrb	r3, [r7, #15]
 800888a:	3301      	adds	r3, #1
 800888c:	73fb      	strb	r3, [r7, #15]
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d9a4      	bls.n	80087de <USBD_CDC_DeInit+0x12>
  }
  return (uint8_t)USBD_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
 800889e:	bf00      	nop
 80088a0:	20002be4 	.word	0x20002be4
 80088a4:	20002be8 	.word	0x20002be8
 80088a8:	20002bec 	.word	0x20002bec

080088ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80088ac:	b590      	push	{r4, r7, lr}
 80088ae:	b087      	sub	sp, #28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80088c2:	2300      	movs	r3, #0
 80088c4:	75fb      	strb	r3, [r7, #23]

  uint8_t windex_to_ch = 0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	75bb      	strb	r3, [r7, #22]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80088ca:	2300      	movs	r3, #0
 80088cc:	757b      	strb	r3, [r7, #21]
 80088ce:	e015      	b.n	80088fc <USBD_CDC_Setup+0x50>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	889b      	ldrh	r3, [r3, #4]
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	7d7b      	ldrb	r3, [r7, #21]
 80088d8:	496d      	ldr	r1, [pc, #436]	; (8008a90 <USBD_CDC_Setup+0x1e4>)
 80088da:	5ccb      	ldrb	r3, [r1, r3]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d007      	beq.n	80088f0 <USBD_CDC_Setup+0x44>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	889b      	ldrh	r3, [r3, #4]
 80088e4:	b2da      	uxtb	r2, r3
 80088e6:	7d7b      	ldrb	r3, [r7, #21]
 80088e8:	496a      	ldr	r1, [pc, #424]	; (8008a94 <USBD_CDC_Setup+0x1e8>)
 80088ea:	5ccb      	ldrb	r3, [r1, r3]
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d102      	bne.n	80088f6 <USBD_CDC_Setup+0x4a>
    {
      windex_to_ch = i;
 80088f0:	7d7b      	ldrb	r3, [r7, #21]
 80088f2:	75bb      	strb	r3, [r7, #22]
      break;
 80088f4:	e005      	b.n	8008902 <USBD_CDC_Setup+0x56>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 80088f6:	7d7b      	ldrb	r3, [r7, #21]
 80088f8:	3301      	adds	r3, #1
 80088fa:	757b      	strb	r3, [r7, #21]
 80088fc:	7d7b      	ldrb	r3, [r7, #21]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d9e6      	bls.n	80088d0 <USBD_CDC_Setup+0x24>
    }
  }

  hcdc = &CDC_ACM_Class_Data[windex_to_ch];
 8008902:	7dbb      	ldrb	r3, [r7, #22]
 8008904:	f240 421c 	movw	r2, #1052	; 0x41c
 8008908:	fb02 f303 	mul.w	r3, r2, r3
 800890c:	4a62      	ldr	r2, [pc, #392]	; (8008a98 <USBD_CDC_Setup+0x1ec>)
 800890e:	4413      	add	r3, r2
 8008910:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800891a:	2b00      	cmp	r3, #0
 800891c:	d04a      	beq.n	80089b4 <USBD_CDC_Setup+0x108>
 800891e:	2b20      	cmp	r3, #32
 8008920:	f040 80aa 	bne.w	8008a78 <USBD_CDC_Setup+0x1cc>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	88db      	ldrh	r3, [r3, #6]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d038      	beq.n	800899e <USBD_CDC_Setup+0xf2>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	b25b      	sxtb	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	da1d      	bge.n	8008972 <USBD_CDC_Setup+0xc6>
      {
        ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800893c:	689c      	ldr	r4, [r3, #8]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	7859      	ldrb	r1, [r3, #1]
 8008942:	7dbb      	ldrb	r3, [r7, #22]
 8008944:	025b      	lsls	r3, r3, #9
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	441a      	add	r2, r3
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	88db      	ldrh	r3, [r3, #6]
 800894e:	7db8      	ldrb	r0, [r7, #22]
 8008950:	47a0      	blx	r4

        len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	88db      	ldrh	r3, [r3, #6]
 8008956:	2b07      	cmp	r3, #7
 8008958:	bf28      	it	cs
 800895a:	2307      	movcs	r3, #7
 800895c:	81fb      	strh	r3, [r7, #14]
        (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data[windex_to_ch], len);
 800895e:	7dbb      	ldrb	r3, [r7, #22]
 8008960:	025b      	lsls	r3, r3, #9
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	4413      	add	r3, r2
 8008966:	89fa      	ldrh	r2, [r7, #14]
 8008968:	4619      	mov	r1, r3
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f002 fee9 	bl	800b742 <USBD_CtlSendData>
    }
    else
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
    }
    break;
 8008970:	e089      	b.n	8008a86 <USBD_CDC_Setup+0x1da>
        hcdc->CmdOpCode = req->bRequest;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	785a      	ldrb	r2, [r3, #1]
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
        hcdc->CmdLength = (uint8_t)req->wLength;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	88db      	ldrh	r3, [r3, #6]
 8008980:	b2da      	uxtb	r2, r3
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data[windex_to_ch], req->wLength);
 8008988:	7dbb      	ldrb	r3, [r7, #22]
 800898a:	025b      	lsls	r3, r3, #9
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	18d1      	adds	r1, r2, r3
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	88db      	ldrh	r3, [r3, #6]
 8008994:	461a      	mov	r2, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f002 feff 	bl	800b79a <USBD_CtlPrepareRx>
    break;
 800899c:	e073      	b.n	8008a86 <USBD_CDC_Setup+0x1da>
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(windex_to_ch, req->bRequest, (uint8_t *)req, 0U);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089a4:	689c      	ldr	r4, [r3, #8]
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	7859      	ldrb	r1, [r3, #1]
 80089aa:	7db8      	ldrb	r0, [r7, #22]
 80089ac:	2300      	movs	r3, #0
 80089ae:	683a      	ldr	r2, [r7, #0]
 80089b0:	47a0      	blx	r4
    break;
 80089b2:	e068      	b.n	8008a86 <USBD_CDC_Setup+0x1da>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	785b      	ldrb	r3, [r3, #1]
 80089b8:	2b0b      	cmp	r3, #11
 80089ba:	d852      	bhi.n	8008a62 <USBD_CDC_Setup+0x1b6>
 80089bc:	a201      	add	r2, pc, #4	; (adr r2, 80089c4 <USBD_CDC_Setup+0x118>)
 80089be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089c2:	bf00      	nop
 80089c4:	080089f5 	.word	0x080089f5
 80089c8:	08008a71 	.word	0x08008a71
 80089cc:	08008a63 	.word	0x08008a63
 80089d0:	08008a63 	.word	0x08008a63
 80089d4:	08008a63 	.word	0x08008a63
 80089d8:	08008a63 	.word	0x08008a63
 80089dc:	08008a63 	.word	0x08008a63
 80089e0:	08008a63 	.word	0x08008a63
 80089e4:	08008a63 	.word	0x08008a63
 80089e8:	08008a63 	.word	0x08008a63
 80089ec:	08008a1f 	.word	0x08008a1f
 80089f0:	08008a49 	.word	0x08008a49
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d107      	bne.n	8008a10 <USBD_CDC_Setup+0x164>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008a00:	f107 030a 	add.w	r3, r7, #10
 8008a04:	2202      	movs	r2, #2
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f002 fe9a 	bl	800b742 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008a0e:	e032      	b.n	8008a76 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8008a10:	6839      	ldr	r1, [r7, #0]
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f002 fe24 	bl	800b660 <USBD_CtlError>
        ret = USBD_FAIL;
 8008a18:	2303      	movs	r3, #3
 8008a1a:	75fb      	strb	r3, [r7, #23]
      break;
 8008a1c:	e02b      	b.n	8008a76 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d107      	bne.n	8008a3a <USBD_CDC_Setup+0x18e>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008a2a:	f107 030d 	add.w	r3, r7, #13
 8008a2e:	2201      	movs	r2, #1
 8008a30:	4619      	mov	r1, r3
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f002 fe85 	bl	800b742 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008a38:	e01d      	b.n	8008a76 <USBD_CDC_Setup+0x1ca>
        USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f002 fe0f 	bl	800b660 <USBD_CtlError>
        ret = USBD_FAIL;
 8008a42:	2303      	movs	r3, #3
 8008a44:	75fb      	strb	r3, [r7, #23]
      break;
 8008a46:	e016      	b.n	8008a76 <USBD_CDC_Setup+0x1ca>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b03      	cmp	r3, #3
 8008a52:	d00f      	beq.n	8008a74 <USBD_CDC_Setup+0x1c8>
      {
        USBD_CtlError(pdev, req);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f002 fe02 	bl	800b660 <USBD_CtlError>
        ret = USBD_FAIL;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8008a60:	e008      	b.n	8008a74 <USBD_CDC_Setup+0x1c8>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8008a62:	6839      	ldr	r1, [r7, #0]
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f002 fdfb 	bl	800b660 <USBD_CtlError>
      ret = USBD_FAIL;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8008a6e:	e002      	b.n	8008a76 <USBD_CDC_Setup+0x1ca>
      break;
 8008a70:	bf00      	nop
 8008a72:	e008      	b.n	8008a86 <USBD_CDC_Setup+0x1da>
      break;
 8008a74:	bf00      	nop
    }
    break;
 8008a76:	e006      	b.n	8008a86 <USBD_CDC_Setup+0x1da>

  default:
    USBD_CtlError(pdev, req);
 8008a78:	6839      	ldr	r1, [r7, #0]
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f002 fdf0 	bl	800b660 <USBD_CtlError>
    ret = USBD_FAIL;
 8008a80:	2303      	movs	r3, #3
 8008a82:	75fb      	strb	r3, [r7, #23]
    break;
 8008a84:	bf00      	nop
  }

  return (uint8_t)ret;
 8008a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	371c      	adds	r7, #28
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd90      	pop	{r4, r7, pc}
 8008a90:	20002bf0 	.word	0x20002bf0
 8008a94:	20002bf4 	.word	0x20002bf4
 8008a98:	20002bfc 	.word	0x20002bfc

08008a9c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a9c:	b590      	push	{r4, r7, lr}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	613b      	str	r3, [r7, #16]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 8008ab2:	60fb      	str	r3, [r7, #12]
  uint8_t ep_to_ch = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	75fb      	strb	r3, [r7, #23]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008ab8:	2300      	movs	r3, #0
 8008aba:	75bb      	strb	r3, [r7, #22]
 8008abc:	e00d      	b.n	8008ada <USBD_CDC_DataIn+0x3e>
  {
    if (epnum == (CDC_IN_EP[i] & 0x0F))
 8008abe:	78fa      	ldrb	r2, [r7, #3]
 8008ac0:	7dbb      	ldrb	r3, [r7, #22]
 8008ac2:	4934      	ldr	r1, [pc, #208]	; (8008b94 <USBD_CDC_DataIn+0xf8>)
 8008ac4:	5ccb      	ldrb	r3, [r1, r3]
 8008ac6:	f003 030f 	and.w	r3, r3, #15
 8008aca:	429a      	cmp	r2, r3
 8008acc:	d102      	bne.n	8008ad4 <USBD_CDC_DataIn+0x38>
    {
      ep_to_ch = i;
 8008ace:	7dbb      	ldrb	r3, [r7, #22]
 8008ad0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ad2:	e005      	b.n	8008ae0 <USBD_CDC_DataIn+0x44>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008ad4:	7dbb      	ldrb	r3, [r7, #22]
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	75bb      	strb	r3, [r7, #22]
 8008ada:	7dbb      	ldrb	r3, [r7, #22]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d9ee      	bls.n	8008abe <USBD_CDC_DataIn+0x22>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
 8008ae2:	f240 421c 	movw	r2, #1052	; 0x41c
 8008ae6:	fb02 f303 	mul.w	r3, r2, r3
 8008aea:	4a2b      	ldr	r2, [pc, #172]	; (8008b98 <USBD_CDC_DataIn+0xfc>)
 8008aec:	4413      	add	r3, r2
 8008aee:	613b      	str	r3, [r7, #16]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008af0:	78fa      	ldrb	r2, [r7, #3]
 8008af2:	6879      	ldr	r1, [r7, #4]
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	440b      	add	r3, r1
 8008afe:	3318      	adds	r3, #24
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d029      	beq.n	8008b5a <USBD_CDC_DataIn+0xbe>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008b06:	78fa      	ldrb	r2, [r7, #3]
 8008b08:	6879      	ldr	r1, [r7, #4]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	4413      	add	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	440b      	add	r3, r1
 8008b14:	3318      	adds	r3, #24
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	78f9      	ldrb	r1, [r7, #3]
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	00db      	lsls	r3, r3, #3
 8008b20:	440b      	add	r3, r1
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4403      	add	r3, r0
 8008b26:	3348      	adds	r3, #72	; 0x48
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	fbb2 f1f3 	udiv	r1, r2, r3
 8008b2e:	fb01 f303 	mul.w	r3, r1, r3
 8008b32:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d110      	bne.n	8008b5a <USBD_CDC_DataIn+0xbe>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008b38:	78fa      	ldrb	r2, [r7, #3]
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	440b      	add	r3, r1
 8008b46:	3318      	adds	r3, #24
 8008b48:	2200      	movs	r2, #0
 8008b4a:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008b4c:	78f9      	ldrb	r1, [r7, #3]
 8008b4e:	2300      	movs	r3, #0
 8008b50:	2200      	movs	r2, #0
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f003 f90f 	bl	800bd76 <USBD_LL_Transmit>
 8008b58:	e016      	b.n	8008b88 <USBD_CDC_DataIn+0xec>
  }
  else
  {
    hcdc->TxState = 0U;
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

    if (((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt != NULL)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b68:	691b      	ldr	r3, [r3, #16]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00c      	beq.n	8008b88 <USBD_CDC_DataIn+0xec>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->TransmitCplt(ep_to_ch, hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b74:	691c      	ldr	r4, [r3, #16]
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	f503 6282 	add.w	r2, r3, #1040	; 0x410
 8008b82:	78fb      	ldrb	r3, [r7, #3]
 8008b84:	7df8      	ldrb	r0, [r7, #23]
 8008b86:	47a0      	blx	r4
    }
  }

  return (uint8_t)USBD_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	371c      	adds	r7, #28
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd90      	pop	{r4, r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20002be4 	.word	0x20002be4
 8008b98:	20002bfc 	.word	0x20002bfc

08008b9c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	60bb      	str	r3, [r7, #8]
  uint8_t ep_to_ch = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73bb      	strb	r3, [r7, #14]
 8008bb4:	e00b      	b.n	8008bce <USBD_CDC_DataOut+0x32>
  {
    if (epnum == CDC_OUT_EP[i])
 8008bb6:	7bbb      	ldrb	r3, [r7, #14]
 8008bb8:	4a17      	ldr	r2, [pc, #92]	; (8008c18 <USBD_CDC_DataOut+0x7c>)
 8008bba:	5cd3      	ldrb	r3, [r2, r3]
 8008bbc:	78fa      	ldrb	r2, [r7, #3]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d102      	bne.n	8008bc8 <USBD_CDC_DataOut+0x2c>
    {
      ep_to_ch = i;
 8008bc2:	7bbb      	ldrb	r3, [r7, #14]
 8008bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8008bc6:	e005      	b.n	8008bd4 <USBD_CDC_DataOut+0x38>
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008bc8:	7bbb      	ldrb	r3, [r7, #14]
 8008bca:	3301      	adds	r3, #1
 8008bcc:	73bb      	strb	r3, [r7, #14]
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d9f0      	bls.n	8008bb6 <USBD_CDC_DataOut+0x1a>
    }
  }

  hcdc = &CDC_ACM_Class_Data[ep_to_ch];
 8008bd4:	7bfb      	ldrb	r3, [r7, #15]
 8008bd6:	f240 421c 	movw	r2, #1052	; 0x41c
 8008bda:	fb02 f303 	mul.w	r3, r2, r3
 8008bde:	4a0f      	ldr	r2, [pc, #60]	; (8008c1c <USBD_CDC_DataOut+0x80>)
 8008be0:	4413      	add	r3, r2
 8008be2:	60bb      	str	r3, [r7, #8]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f003 f906 	bl	800bdfa <USBD_LL_GetRxDataSize>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Receive(ep_to_ch, hcdc->RxBuffer, &hcdc->RxLength);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	f202 420c 	addw	r2, r2, #1036	; 0x40c
 8008c0a:	7bf8      	ldrb	r0, [r7, #15]
 8008c0c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	20002be8 	.word	0x20002be8
 8008c1c:	20002bfc 	.word	0x20002bfc

08008c20 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008c20:	b590      	push	{r4, r7, lr}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	60bb      	str	r3, [r7, #8]

  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73fb      	strb	r3, [r7, #15]
 8008c30:	e02e      	b.n	8008c90 <USBD_CDC_EP0_RxReady+0x70>
  {
    hcdc = &CDC_ACM_Class_Data[i];
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	f240 421c 	movw	r2, #1052	; 0x41c
 8008c38:	fb02 f303 	mul.w	r3, r2, r3
 8008c3c:	4a18      	ldr	r2, [pc, #96]	; (8008ca0 <USBD_CDC_EP0_RxReady+0x80>)
 8008c3e:	4413      	add	r3, r2
 8008c40:	60bb      	str	r3, [r7, #8]

    if (hcdc == NULL)
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d101      	bne.n	8008c4c <USBD_CDC_EP0_RxReady+0x2c>
    {
      return (uint8_t)USBD_FAIL;
 8008c48:	2303      	movs	r3, #3
 8008c4a:	e025      	b.n	8008c98 <USBD_CDC_EP0_RxReady+0x78>
    }

    if ((pdev->pUserData_CDC_ACM != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d019      	beq.n	8008c8a <USBD_CDC_EP0_RxReady+0x6a>
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8008c5c:	2bff      	cmp	r3, #255	; 0xff
 8008c5e:	d014      	beq.n	8008c8a <USBD_CDC_EP0_RxReady+0x6a>
    {
      ((USBD_CDC_ACM_ItfTypeDef *)pdev->pUserData_CDC_ACM)->Control(i, hcdc->CmdOpCode, (uint8_t *)hcdc->data[i], (uint16_t)hcdc->CmdLength);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c66:	689c      	ldr	r4, [r3, #8]
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f893 1400 	ldrb.w	r1, [r3, #1024]	; 0x400
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	025b      	lsls	r3, r3, #9
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	441a      	add	r2, r3
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	7bf8      	ldrb	r0, [r7, #15]
 8008c80:	47a0      	blx	r4
      hcdc->CmdOpCode = 0xFFU;
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	22ff      	movs	r2, #255	; 0xff
 8008c86:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	73fb      	strb	r3, [r7, #15]
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d9cd      	bls.n	8008c32 <USBD_CDC_EP0_RxReady+0x12>
    }
  }

  return (uint8_t)USBD_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd90      	pop	{r4, r7, pc}
 8008ca0:	20002bfc 	.word	0x20002bfc

08008ca4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	228d      	movs	r2, #141	; 0x8d
 8008cb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008cb2:	4b03      	ldr	r3, [pc, #12]	; (8008cc0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr
 8008cc0:	20000330 	.word	0x20000330

08008cc4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	228d      	movs	r2, #141	; 0x8d
 8008cd0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008cd2:	4b03      	ldr	r3, [pc, #12]	; (8008ce0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr
 8008ce0:	200002a0 	.word	0x200002a0

08008ce4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	228d      	movs	r2, #141	; 0x8d
 8008cf0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008cf2:	4b03      	ldr	r3, [pc, #12]	; (8008d00 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	20000330 	.word	0x20000330

08008d04 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	220a      	movs	r2, #10
 8008d10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008d12:	4b03      	ldr	r3, [pc, #12]	; (8008d20 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	20000258 	.word	0x20000258

08008d24 <USBD_CDC_ACM_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_ACM_RegisterInterface(USBD_HandleTypeDef *pdev,
                                       USBD_CDC_ACM_ItfTypeDef *fops)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d101      	bne.n	8008d38 <USBD_CDC_ACM_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d34:	2303      	movs	r3, #3
 8008d36:	e004      	b.n	8008d42 <USBD_CDC_ACM_RegisterInterface+0x1e>
  }

  pdev->pUserData_CDC_ACM = fops;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8008d40:	2300      	movs	r3, #0
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
	...

08008d50 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b087      	sub	sp, #28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60b9      	str	r1, [r7, #8]
 8008d58:	607a      	str	r2, [r7, #4]
 8008d5a:	603b      	str	r3, [r7, #0]
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008d60:	2300      	movs	r3, #0
 8008d62:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
 8008d66:	f240 421c 	movw	r2, #1052	; 0x41c
 8008d6a:	fb02 f303 	mul.w	r3, r2, r3
 8008d6e:	4a09      	ldr	r2, [pc, #36]	; (8008d94 <USBD_CDC_SetTxBuffer+0x44>)
 8008d70:	4413      	add	r3, r2
 8008d72:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	687a      	ldr	r2, [r7, #4]
 8008d78:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hcdc->TxLength = length;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	683a      	ldr	r2, [r7, #0]
 8008d80:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410

  return (uint8_t)USBD_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	371c      	adds	r7, #28
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	20002bfc 	.word	0x20002bfc

08008d98 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(uint8_t ch, USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	4603      	mov	r3, r0
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008da6:	2300      	movs	r3, #0
 8008da8:	617b      	str	r3, [r7, #20]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	f240 421c 	movw	r2, #1052	; 0x41c
 8008db0:	fb02 f303 	mul.w	r3, r2, r3
 8008db4:	4a06      	ldr	r2, [pc, #24]	; (8008dd0 <USBD_CDC_SetRxBuffer+0x38>)
 8008db6:	4413      	add	r3, r2
 8008db8:	617b      	str	r3, [r7, #20]

  hcdc->RxBuffer = pbuff;
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  return (uint8_t)USBD_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	371c      	adds	r7, #28
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr
 8008dd0:	20002bfc 	.word	0x20002bfc

08008dd4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	4603      	mov	r3, r0
 8008ddc:	6039      	str	r1, [r7, #0]
 8008dde:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008de0:	2300      	movs	r3, #0
 8008de2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008de4:	2301      	movs	r3, #1
 8008de6:	73fb      	strb	r3, [r7, #15]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	f240 421c 	movw	r2, #1052	; 0x41c
 8008dee:	fb02 f303 	mul.w	r3, r2, r3
 8008df2:	4a17      	ldr	r2, [pc, #92]	; (8008e50 <USBD_CDC_TransmitPacket+0x7c>)
 8008df4:	4413      	add	r3, r2
 8008df6:	60bb      	str	r3, [r7, #8]

  if (hcdc->TxState == 0U)
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d121      	bne.n	8008e46 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP[ch] & 0xFU].total_length = hcdc->TxLength;
 8008e0a:	79fb      	ldrb	r3, [r7, #7]
 8008e0c:	4a11      	ldr	r2, [pc, #68]	; (8008e54 <USBD_CDC_TransmitPacket+0x80>)
 8008e0e:	5cd3      	ldrb	r3, [r2, r3]
 8008e10:	f003 020f 	and.w	r2, r3, #15
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	f8d3 1410 	ldr.w	r1, [r3, #1040]	; 0x410
 8008e1a:	6838      	ldr	r0, [r7, #0]
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4403      	add	r3, r0
 8008e26:	3318      	adds	r3, #24
 8008e28:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP[ch], hcdc->TxBuffer, hcdc->TxLength);
 8008e2a:	79fb      	ldrb	r3, [r7, #7]
 8008e2c:	4a09      	ldr	r2, [pc, #36]	; (8008e54 <USBD_CDC_TransmitPacket+0x80>)
 8008e2e:	5cd1      	ldrb	r1, [r2, r3]
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8008e3c:	6838      	ldr	r0, [r7, #0]
 8008e3e:	f002 ff9a 	bl	800bd76 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20002bfc 	.word	0x20002bfc
 8008e54:	20002be4 	.word	0x20002be4

08008e58 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(uint8_t ch, USBD_HandleTypeDef *pdev)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	4603      	mov	r3, r0
 8008e60:	6039      	str	r1, [r7, #0]
 8008e62:	71fb      	strb	r3, [r7, #7]
  USBD_CDC_ACM_HandleTypeDef *hcdc = NULL;
 8008e64:	2300      	movs	r3, #0
 8008e66:	60fb      	str	r3, [r7, #12]

  hcdc = &CDC_ACM_Class_Data[ch];
 8008e68:	79fb      	ldrb	r3, [r7, #7]
 8008e6a:	f240 421c 	movw	r2, #1052	; 0x41c
 8008e6e:	fb02 f303 	mul.w	r3, r2, r3
 8008e72:	4a11      	ldr	r2, [pc, #68]	; (8008eb8 <USBD_CDC_ReceivePacket+0x60>)
 8008e74:	4413      	add	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	7c1b      	ldrb	r3, [r3, #16]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d10b      	bne.n	8008e98 <USBD_CDC_ReceivePacket+0x40>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8008e80:	79fb      	ldrb	r3, [r7, #7]
 8008e82:	4a0e      	ldr	r2, [pc, #56]	; (8008ebc <USBD_CDC_ReceivePacket+0x64>)
 8008e84:	5cd1      	ldrb	r1, [r2, r3]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008e8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e90:	6838      	ldr	r0, [r7, #0]
 8008e92:	f002 ff91 	bl	800bdb8 <USBD_LL_PrepareReceive>
 8008e96:	e009      	b.n	8008eac <USBD_CDC_ReceivePacket+0x54>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP[ch], hcdc->RxBuffer,
 8008e98:	79fb      	ldrb	r3, [r7, #7]
 8008e9a:	4a08      	ldr	r2, [pc, #32]	; (8008ebc <USBD_CDC_ReceivePacket+0x64>)
 8008e9c:	5cd1      	ldrb	r1, [r2, r3]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008ea4:	2340      	movs	r3, #64	; 0x40
 8008ea6:	6838      	ldr	r0, [r7, #0]
 8008ea8:	f002 ff86 	bl	800bdb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20002bfc 	.word	0x20002bfc
 8008ebc:	20002be8 	.word	0x20002be8

08008ec0 <USBD_Update_CDC_ACM_DESC>:
                              uint8_t com_itf,
                              uint8_t in_ep,
                              uint8_t cmd_ep,
                              uint8_t out_ep,
                              uint8_t str_idx)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	4608      	mov	r0, r1
 8008eca:	4611      	mov	r1, r2
 8008ecc:	461a      	mov	r2, r3
 8008ece:	4603      	mov	r3, r0
 8008ed0:	70fb      	strb	r3, [r7, #3]
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	70bb      	strb	r3, [r7, #2]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	707b      	strb	r3, [r7, #1]
  desc += 9;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	3309      	adds	r3, #9
 8008ede:	607b      	str	r3, [r7, #4]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	73fb      	strb	r3, [r7, #15]
 8008ee4:	e05b      	b.n	8008f9e <USBD_Update_CDC_ACM_DESC+0xde>
  {
    desc[2] = cmd_itf;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	3302      	adds	r3, #2
 8008eea:	78fa      	ldrb	r2, [r7, #3]
 8008eec:	701a      	strb	r2, [r3, #0]
    desc[16] = str_idx;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	3310      	adds	r3, #16
 8008ef2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008ef6:	701a      	strb	r2, [r3, #0]
    desc[10] = cmd_itf;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	330a      	adds	r3, #10
 8008efc:	78fa      	ldrb	r2, [r7, #3]
 8008efe:	701a      	strb	r2, [r3, #0]
    desc[26] = com_itf;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	331a      	adds	r3, #26
 8008f04:	78ba      	ldrb	r2, [r7, #2]
 8008f06:	701a      	strb	r2, [r3, #0]
    desc[34] = cmd_itf;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	3322      	adds	r3, #34	; 0x22
 8008f0c:	78fa      	ldrb	r2, [r7, #3]
 8008f0e:	701a      	strb	r2, [r3, #0]
    desc[35] = com_itf;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3323      	adds	r3, #35	; 0x23
 8008f14:	78ba      	ldrb	r2, [r7, #2]
 8008f16:	701a      	strb	r2, [r3, #0]
    desc[38] = cmd_ep;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3326      	adds	r3, #38	; 0x26
 8008f1c:	7e3a      	ldrb	r2, [r7, #24]
 8008f1e:	701a      	strb	r2, [r3, #0]
    desc[45] = com_itf;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	332d      	adds	r3, #45	; 0x2d
 8008f24:	78ba      	ldrb	r2, [r7, #2]
 8008f26:	701a      	strb	r2, [r3, #0]
    desc[54] = out_ep;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3336      	adds	r3, #54	; 0x36
 8008f2c:	7f3a      	ldrb	r2, [r7, #28]
 8008f2e:	701a      	strb	r2, [r3, #0]
    desc[61] = in_ep;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	333d      	adds	r3, #61	; 0x3d
 8008f34:	787a      	ldrb	r2, [r7, #1]
 8008f36:	701a      	strb	r2, [r3, #0]

    desc += 66;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	3342      	adds	r3, #66	; 0x42
 8008f3c:	607b      	str	r3, [r7, #4]
    CDC_IN_EP[i] = in_ep;
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
 8008f40:	491c      	ldr	r1, [pc, #112]	; (8008fb4 <USBD_Update_CDC_ACM_DESC+0xf4>)
 8008f42:	787a      	ldrb	r2, [r7, #1]
 8008f44:	54ca      	strb	r2, [r1, r3]
    CDC_OUT_EP[i] = out_ep;
 8008f46:	7bfb      	ldrb	r3, [r7, #15]
 8008f48:	491b      	ldr	r1, [pc, #108]	; (8008fb8 <USBD_Update_CDC_ACM_DESC+0xf8>)
 8008f4a:	7f3a      	ldrb	r2, [r7, #28]
 8008f4c:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_EP[i] = cmd_ep;
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	491a      	ldr	r1, [pc, #104]	; (8008fbc <USBD_Update_CDC_ACM_DESC+0xfc>)
 8008f52:	7e3a      	ldrb	r2, [r7, #24]
 8008f54:	54ca      	strb	r2, [r1, r3]
    CDC_CMD_ITF_NBR[i] = cmd_itf;
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
 8008f58:	4919      	ldr	r1, [pc, #100]	; (8008fc0 <USBD_Update_CDC_ACM_DESC+0x100>)
 8008f5a:	78fa      	ldrb	r2, [r7, #3]
 8008f5c:	54ca      	strb	r2, [r1, r3]
    CDC_COM_ITF_NBR[i] = com_itf;
 8008f5e:	7bfb      	ldrb	r3, [r7, #15]
 8008f60:	4918      	ldr	r1, [pc, #96]	; (8008fc4 <USBD_Update_CDC_ACM_DESC+0x104>)
 8008f62:	78ba      	ldrb	r2, [r7, #2]
 8008f64:	54ca      	strb	r2, [r1, r3]
    CDC_STR_DESC_IDX[i] = str_idx;
 8008f66:	7bfb      	ldrb	r3, [r7, #15]
 8008f68:	4917      	ldr	r1, [pc, #92]	; (8008fc8 <USBD_Update_CDC_ACM_DESC+0x108>)
 8008f6a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008f6e:	54ca      	strb	r2, [r1, r3]

    in_ep += 2;
 8008f70:	787b      	ldrb	r3, [r7, #1]
 8008f72:	3302      	adds	r3, #2
 8008f74:	707b      	strb	r3, [r7, #1]
    cmd_ep = in_ep + 1;
 8008f76:	787b      	ldrb	r3, [r7, #1]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	763b      	strb	r3, [r7, #24]
    out_ep++;
 8008f7c:	7f3b      	ldrb	r3, [r7, #28]
 8008f7e:	3301      	adds	r3, #1
 8008f80:	773b      	strb	r3, [r7, #28]
    str_idx++;
 8008f82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008f86:	3301      	adds	r3, #1
 8008f88:	f887 3020 	strb.w	r3, [r7, #32]

    cmd_itf += 2;
 8008f8c:	78fb      	ldrb	r3, [r7, #3]
 8008f8e:	3302      	adds	r3, #2
 8008f90:	70fb      	strb	r3, [r7, #3]
    com_itf = cmd_itf + 1;
 8008f92:	78fb      	ldrb	r3, [r7, #3]
 8008f94:	3301      	adds	r3, #1
 8008f96:	70bb      	strb	r3, [r7, #2]
  for (uint8_t i = 0; i < NUMBER_OF_CDC; i++)
 8008f98:	7bfb      	ldrb	r3, [r7, #15]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	73fb      	strb	r3, [r7, #15]
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d9a0      	bls.n	8008ee6 <USBD_Update_CDC_ACM_DESC+0x26>
  }
}
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop
 8008fa8:	3714      	adds	r7, #20
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr
 8008fb2:	bf00      	nop
 8008fb4:	20002be4 	.word	0x20002be4
 8008fb8:	20002be8 	.word	0x20002be8
 8008fbc:	20002bec 	.word	0x20002bec
 8008fc0:	20002bf0 	.word	0x20002bf0
 8008fc4:	20002bf4 	.word	0x20002bf4
 8008fc8:	20002bf8 	.word	0x20002bf8

08008fcc <USBD_COMPOSITE_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.Init(pdev, cfgidx);
 8008fd8:	4b0e      	ldr	r3, [pc, #56]	; (8009014 <USBD_COMPOSITE_Init+0x48>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	78fa      	ldrb	r2, [r7, #3]
 8008fde:	4611      	mov	r1, r2
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	4798      	blx	r3
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.Init(pdev, cfgidx);
#endif
#if (USBD_USE_UAC_MIC == 1)
  USBD_AUDIO_MIC.Init(pdev, cfgidx);
 8008fe4:	4b0c      	ldr	r3, [pc, #48]	; (8009018 <USBD_COMPOSITE_Init+0x4c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	78fa      	ldrb	r2, [r7, #3]
 8008fea:	4611      	mov	r1, r2
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	4798      	blx	r3
#endif
#if (USBD_USE_UAC_SPKR == 1)
  USBD_AUDIO_SPKR.Init(pdev, cfgidx);
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	; (800901c <USBD_COMPOSITE_Init+0x50>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	78fa      	ldrb	r2, [r7, #3]
 8008ff6:	4611      	mov	r1, r2
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	4798      	blx	r3
#endif
#if (USBD_USE_MSC == 1)
  USBD_MSC.Init(pdev, cfgidx);
#endif
#if (USBD_USE_DFU == 1)
  USBD_DFU.Init(pdev, cfgidx);
 8008ffc:	4b08      	ldr	r3, [pc, #32]	; (8009020 <USBD_COMPOSITE_Init+0x54>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	78fa      	ldrb	r2, [r7, #3]
 8009002:	4611      	mov	r1, r2
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.Init(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	3708      	adds	r7, #8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20000264 	.word	0x20000264
 8009018:	200000d8 	.word	0x200000d8
 800901c:	20000198 	.word	0x20000198
 8009020:	2000040c 	.word	0x2000040c

08009024 <USBD_COMPOSITE_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	460b      	mov	r3, r1
 800902e:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.DeInit(pdev, cfgidx);
 8009030:	4b0e      	ldr	r3, [pc, #56]	; (800906c <USBD_COMPOSITE_DeInit+0x48>)
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	78fa      	ldrb	r2, [r7, #3]
 8009036:	4611      	mov	r1, r2
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	4798      	blx	r3
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_UAC_MIC == 1)
  USBD_AUDIO_MIC.DeInit(pdev, cfgidx);
 800903c:	4b0c      	ldr	r3, [pc, #48]	; (8009070 <USBD_COMPOSITE_DeInit+0x4c>)
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	78fa      	ldrb	r2, [r7, #3]
 8009042:	4611      	mov	r1, r2
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	4798      	blx	r3
#endif
#if (USBD_USE_UAC_SPKR == 1)
  USBD_AUDIO_SPKR.DeInit(pdev, cfgidx);
 8009048:	4b0a      	ldr	r3, [pc, #40]	; (8009074 <USBD_COMPOSITE_DeInit+0x50>)
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	78fa      	ldrb	r2, [r7, #3]
 800904e:	4611      	mov	r1, r2
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	4798      	blx	r3
#endif
#if (USBD_USE_MSC == 1)
  USBD_MSC.DeInit(pdev, cfgidx);
#endif
#if (USBD_USE_DFU == 1)
  USBD_DFU.DeInit(pdev, cfgidx);
 8009054:	4b08      	ldr	r3, [pc, #32]	; (8009078 <USBD_COMPOSITE_DeInit+0x54>)
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	78fa      	ldrb	r2, [r7, #3]
 800905a:	4611      	mov	r1, r2
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
  USBD_PRNT.DeInit(pdev, cfgidx);
#endif

  return (uint8_t)USBD_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
 800906a:	bf00      	nop
 800906c:	20000264 	.word	0x20000264
 8009070:	200000d8 	.word	0x200000d8
 8009074:	20000198 	.word	0x20000198
 8009078:	2000040c 	.word	0x2000040c

0800907c <USBD_COMPOSITE_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_COMPOSITE_Setup(USBD_HandleTypeDef *pdev,
                                    USBD_SetupReqTypedef *req)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009086:	2300      	movs	r3, #0
 8009088:	73fb      	strb	r3, [r7, #15]
 800908a:	e019      	b.n	80090c0 <USBD_COMPOSITE_Setup+0x44>
  {
    if (LOBYTE(req->wIndex) == CDC_CMD_ITF_NBR[i] || LOBYTE(req->wIndex) == CDC_COM_ITF_NBR[i])
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	889b      	ldrh	r3, [r3, #4]
 8009090:	b2da      	uxtb	r2, r3
 8009092:	7bfb      	ldrb	r3, [r7, #15]
 8009094:	492a      	ldr	r1, [pc, #168]	; (8009140 <USBD_COMPOSITE_Setup+0xc4>)
 8009096:	5ccb      	ldrb	r3, [r1, r3]
 8009098:	429a      	cmp	r2, r3
 800909a:	d007      	beq.n	80090ac <USBD_COMPOSITE_Setup+0x30>
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	889b      	ldrh	r3, [r3, #4]
 80090a0:	b2da      	uxtb	r2, r3
 80090a2:	7bfb      	ldrb	r3, [r7, #15]
 80090a4:	4927      	ldr	r1, [pc, #156]	; (8009144 <USBD_COMPOSITE_Setup+0xc8>)
 80090a6:	5ccb      	ldrb	r3, [r1, r3]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d106      	bne.n	80090ba <USBD_COMPOSITE_Setup+0x3e>
    {
      return USBD_CDC_ACM.Setup(pdev, req);
 80090ac:	4b26      	ldr	r3, [pc, #152]	; (8009148 <USBD_COMPOSITE_Setup+0xcc>)
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	6839      	ldr	r1, [r7, #0]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	4798      	blx	r3
 80090b6:	4603      	mov	r3, r0
 80090b8:	e03e      	b.n	8009138 <USBD_COMPOSITE_Setup+0xbc>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80090ba:	7bfb      	ldrb	r3, [r7, #15]
 80090bc:	3301      	adds	r3, #1
 80090be:	73fb      	strb	r3, [r7, #15]
 80090c0:	7bfb      	ldrb	r3, [r7, #15]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d9e2      	bls.n	800908c <USBD_COMPOSITE_Setup+0x10>
  {
    return USBD_HID_CUSTOM.Setup(pdev, req);
  }
#endif
#if (USBD_USE_UAC_MIC == 1)
  if (LOBYTE(req->wIndex) == AUDIO_MIC_AC_ITF_NBR || LOBYTE(req->wIndex) == AUDIO_MIC_AS_ITF_NBR)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	889b      	ldrh	r3, [r3, #4]
 80090ca:	b2da      	uxtb	r2, r3
 80090cc:	4b1f      	ldr	r3, [pc, #124]	; (800914c <USBD_COMPOSITE_Setup+0xd0>)
 80090ce:	781b      	ldrb	r3, [r3, #0]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d006      	beq.n	80090e2 <USBD_COMPOSITE_Setup+0x66>
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	889b      	ldrh	r3, [r3, #4]
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	4b1d      	ldr	r3, [pc, #116]	; (8009150 <USBD_COMPOSITE_Setup+0xd4>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	429a      	cmp	r2, r3
 80090e0:	d106      	bne.n	80090f0 <USBD_COMPOSITE_Setup+0x74>
  {
    return USBD_AUDIO_MIC.Setup(pdev, req);
 80090e2:	4b1c      	ldr	r3, [pc, #112]	; (8009154 <USBD_COMPOSITE_Setup+0xd8>)
 80090e4:	689b      	ldr	r3, [r3, #8]
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	4798      	blx	r3
 80090ec:	4603      	mov	r3, r0
 80090ee:	e023      	b.n	8009138 <USBD_COMPOSITE_Setup+0xbc>
  }
#endif
#if (USBD_USE_UAC_SPKR == 1)
  if (LOBYTE(req->wIndex) == AUDIO_SPKR_AC_ITF_NBR || LOBYTE(req->wIndex) == AUDIO_SPKR_AS_ITF_NBR)
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	889b      	ldrh	r3, [r3, #4]
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	4b18      	ldr	r3, [pc, #96]	; (8009158 <USBD_COMPOSITE_Setup+0xdc>)
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d006      	beq.n	800910c <USBD_COMPOSITE_Setup+0x90>
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	889b      	ldrh	r3, [r3, #4]
 8009102:	b2da      	uxtb	r2, r3
 8009104:	4b15      	ldr	r3, [pc, #84]	; (800915c <USBD_COMPOSITE_Setup+0xe0>)
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	429a      	cmp	r2, r3
 800910a:	d106      	bne.n	800911a <USBD_COMPOSITE_Setup+0x9e>
  {
    return USBD_AUDIO_SPKR.Setup(pdev, req);
 800910c:	4b14      	ldr	r3, [pc, #80]	; (8009160 <USBD_COMPOSITE_Setup+0xe4>)
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	4798      	blx	r3
 8009116:	4603      	mov	r3, r0
 8009118:	e00e      	b.n	8009138 <USBD_COMPOSITE_Setup+0xbc>
  {
    return USBD_MSC.Setup(pdev, req);
  }
#endif
#if (USBD_USE_DFU == 1)
  if (LOBYTE(req->wIndex) == DFU_ITF_NBR)
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	889b      	ldrh	r3, [r3, #4]
 800911e:	b2da      	uxtb	r2, r3
 8009120:	4b10      	ldr	r3, [pc, #64]	; (8009164 <USBD_COMPOSITE_Setup+0xe8>)
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	429a      	cmp	r2, r3
 8009126:	d106      	bne.n	8009136 <USBD_COMPOSITE_Setup+0xba>
  {
    return USBD_DFU.Setup(pdev, req);
 8009128:	4b0f      	ldr	r3, [pc, #60]	; (8009168 <USBD_COMPOSITE_Setup+0xec>)
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	6839      	ldr	r1, [r7, #0]
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	4798      	blx	r3
 8009132:	4603      	mov	r3, r0
 8009134:	e000      	b.n	8009138 <USBD_COMPOSITE_Setup+0xbc>
  {
    USBD_PRNT.Setup(pdev, req);
  }
#endif

  return USBD_FAIL;
 8009136:	2303      	movs	r3, #3
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	20002bf0 	.word	0x20002bf0
 8009144:	20002bf4 	.word	0x20002bf4
 8009148:	20000264 	.word	0x20000264
 800914c:	200015a0 	.word	0x200015a0
 8009150:	200000d5 	.word	0x200000d5
 8009154:	200000d8 	.word	0x200000d8
 8009158:	20001792 	.word	0x20001792
 800915c:	20000197 	.word	0x20000197
 8009160:	20000198 	.word	0x20000198
 8009164:	20003764 	.word	0x20003764
 8009168:	2000040c 	.word	0x2000040c

0800916c <USBD_COMPOSITE_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	460b      	mov	r3, r1
 8009176:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009178:	2300      	movs	r3, #0
 800917a:	73fb      	strb	r3, [r7, #15]
 800917c:	e01a      	b.n	80091b4 <USBD_COMPOSITE_DataIn+0x48>
  {
    if (epnum == (CDC_IN_EP[i] & 0x7F) || epnum == (CDC_CMD_EP[i] & 0x7F))
 800917e:	78fa      	ldrb	r2, [r7, #3]
 8009180:	7bfb      	ldrb	r3, [r7, #15]
 8009182:	4918      	ldr	r1, [pc, #96]	; (80091e4 <USBD_COMPOSITE_DataIn+0x78>)
 8009184:	5ccb      	ldrb	r3, [r1, r3]
 8009186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800918a:	429a      	cmp	r2, r3
 800918c:	d007      	beq.n	800919e <USBD_COMPOSITE_DataIn+0x32>
 800918e:	78fa      	ldrb	r2, [r7, #3]
 8009190:	7bfb      	ldrb	r3, [r7, #15]
 8009192:	4915      	ldr	r1, [pc, #84]	; (80091e8 <USBD_COMPOSITE_DataIn+0x7c>)
 8009194:	5ccb      	ldrb	r3, [r1, r3]
 8009196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800919a:	429a      	cmp	r2, r3
 800919c:	d107      	bne.n	80091ae <USBD_COMPOSITE_DataIn+0x42>
    {
      return USBD_CDC_ACM.DataIn(pdev, epnum);
 800919e:	4b13      	ldr	r3, [pc, #76]	; (80091ec <USBD_COMPOSITE_DataIn+0x80>)
 80091a0:	695b      	ldr	r3, [r3, #20]
 80091a2:	78fa      	ldrb	r2, [r7, #3]
 80091a4:	4611      	mov	r1, r2
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	4798      	blx	r3
 80091aa:	4603      	mov	r3, r0
 80091ac:	e015      	b.n	80091da <USBD_COMPOSITE_DataIn+0x6e>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	3301      	adds	r3, #1
 80091b2:	73fb      	strb	r3, [r7, #15]
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d9e1      	bls.n	800917e <USBD_COMPOSITE_DataIn+0x12>
  {
    return USBD_HID_CUSTOM.DataIn(pdev, epnum);
  }
#endif
#if (USBD_USE_UAC_MIC == 1)
  if (epnum == (AUDIO_MIC_EP & 0x7F))
 80091ba:	78fa      	ldrb	r2, [r7, #3]
 80091bc:	4b0c      	ldr	r3, [pc, #48]	; (80091f0 <USBD_COMPOSITE_DataIn+0x84>)
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d107      	bne.n	80091d8 <USBD_COMPOSITE_DataIn+0x6c>
  {
    return USBD_AUDIO_MIC.DataIn(pdev, epnum);
 80091c8:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <USBD_COMPOSITE_DataIn+0x88>)
 80091ca:	695b      	ldr	r3, [r3, #20]
 80091cc:	78fa      	ldrb	r2, [r7, #3]
 80091ce:	4611      	mov	r1, r2
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	4798      	blx	r3
 80091d4:	4603      	mov	r3, r0
 80091d6:	e000      	b.n	80091da <USBD_COMPOSITE_DataIn+0x6e>
  {
    USBD_PRNT.DataIn(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 80091d8:	2303      	movs	r3, #3
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	20002be4 	.word	0x20002be4
 80091e8:	20002bec 	.word	0x20002bec
 80091ec:	20000264 	.word	0x20000264
 80091f0:	200000d4 	.word	0x200000d4
 80091f4:	200000d8 	.word	0x200000d8

080091f8 <USBD_COMPOSITE_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
#if (USBD_USE_CDC_ACM == 1)
  USBD_CDC_ACM.EP0_RxReady(pdev);
 8009200:	4b0a      	ldr	r3, [pc, #40]	; (800922c <USBD_COMPOSITE_EP0_RxReady+0x34>)
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	4798      	blx	r3
#endif
#if (USBD_USE_HID_CUSTOM == 1)
  USBD_HID_CUSTOM.EP0_RxReady(pdev);
#endif
#if (USBD_USE_UAC_MIC == 1)
  USBD_AUDIO_MIC.EP0_RxReady(pdev);
 8009208:	4b09      	ldr	r3, [pc, #36]	; (8009230 <USBD_COMPOSITE_EP0_RxReady+0x38>)
 800920a:	691b      	ldr	r3, [r3, #16]
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	4798      	blx	r3
#endif
#if (USBD_USE_UAC_SPKR == 1)
  USBD_AUDIO_SPKR.EP0_RxReady(pdev);
 8009210:	4b08      	ldr	r3, [pc, #32]	; (8009234 <USBD_COMPOSITE_EP0_RxReady+0x3c>)
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	4798      	blx	r3
#if (USBD_USE_UVC == 1)
#endif
#if (USBD_USE_MSC == 1)
#endif
#if (USBD_USE_DFU == 1)
  USBD_DFU.EP0_RxReady(pdev);
 8009218:	4b07      	ldr	r3, [pc, #28]	; (8009238 <USBD_COMPOSITE_EP0_RxReady+0x40>)
 800921a:	691b      	ldr	r3, [r3, #16]
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8009220:	2300      	movs	r3, #0
}
 8009222:	4618      	mov	r0, r3
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	20000264 	.word	0x20000264
 8009230:	200000d8 	.word	0x200000d8
 8009234:	20000198 	.word	0x20000198
 8009238:	2000040c 	.word	0x2000040c

0800923c <USBD_COMPOSITE_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
#endif
#if (USBD_USE_UAC_MIC == 1)
  USBD_AUDIO_MIC.EP0_TxSent(pdev);
 8009244:	4b08      	ldr	r3, [pc, #32]	; (8009268 <USBD_COMPOSITE_EP0_TxReady+0x2c>)
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	4798      	blx	r3
#endif
#if (USBD_USE_UAC_SPKR == 1)
  USBD_AUDIO_SPKR.EP0_TxSent(pdev);
 800924c:	4b07      	ldr	r3, [pc, #28]	; (800926c <USBD_COMPOSITE_EP0_TxReady+0x30>)
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	4798      	blx	r3
#if (USBD_USE_UVC == 1)
#endif
#if (USBD_USE_MSC == 1)
#endif
#if (USBD_USE_DFU == 1)
  USBD_DFU.EP0_TxSent(pdev);
 8009254:	4b06      	ldr	r3, [pc, #24]	; (8009270 <USBD_COMPOSITE_EP0_TxReady+0x34>)
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3708      	adds	r7, #8
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	200000d8 	.word	0x200000d8
 800926c:	20000198 	.word	0x20000198
 8009270:	2000040c 	.word	0x2000040c

08009274 <USBD_COMPOSITE_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_COMPOSITE_SOF(USBD_HandleTypeDef *pdev)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
#endif
#if (USBD_USE_UAC_MIC == 1)
  USBD_AUDIO_MIC.SOF(pdev);
 800927c:	4b08      	ldr	r3, [pc, #32]	; (80092a0 <USBD_COMPOSITE_SOF+0x2c>)
 800927e:	69db      	ldr	r3, [r3, #28]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	4798      	blx	r3
#endif
#if (USBD_USE_UAC_SPKR == 1)
  USBD_AUDIO_SPKR.SOF(pdev);
 8009284:	4b07      	ldr	r3, [pc, #28]	; (80092a4 <USBD_COMPOSITE_SOF+0x30>)
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	4798      	blx	r3
  USBD_VIDEO.SOF(pdev);
#endif
#if (USBD_USE_MSC == 1)
#endif
#if (USBD_USE_DFU == 1)
  USBD_DFU.SOF(pdev);
 800928c:	4b06      	ldr	r3, [pc, #24]	; (80092a8 <USBD_COMPOSITE_SOF+0x34>)
 800928e:	69db      	ldr	r3, [r3, #28]
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	4798      	blx	r3
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	200000d8 	.word	0x200000d8
 80092a4:	20000198 	.word	0x20000198
 80092a8:	2000040c 	.word	0x2000040c

080092ac <USBD_COMPOSITE_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b082      	sub	sp, #8
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	460b      	mov	r3, r1
 80092b6:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_HID_KEYBOARD == 1)
#endif
#if (USBD_USE_HID_CUSTOM == 1)
#endif
#if (USBD_USE_UAC_MIC == 1)
  if (epnum == (AUDIO_MIC_EP & 0x7F))
 80092b8:	78fa      	ldrb	r2, [r7, #3]
 80092ba:	4b08      	ldr	r3, [pc, #32]	; (80092dc <USBD_COMPOSITE_IsoINIncomplete+0x30>)
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d105      	bne.n	80092d2 <USBD_COMPOSITE_IsoINIncomplete+0x26>
  {
    USBD_AUDIO_MIC.IsoINIncomplete(pdev, epnum);
 80092c6:	4b06      	ldr	r3, [pc, #24]	; (80092e0 <USBD_COMPOSITE_IsoINIncomplete+0x34>)
 80092c8:	6a1b      	ldr	r3, [r3, #32]
 80092ca:	78fa      	ldrb	r2, [r7, #3]
 80092cc:	4611      	mov	r1, r2
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	4798      	blx	r3
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 80092d2:	2300      	movs	r3, #0
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	200000d4 	.word	0x200000d4
 80092e0:	200000d8 	.word	0x200000d8

080092e4 <USBD_COMPOSITE_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_HID_CUSTOM == 1)
#endif
#if (USBD_USE_UAC_MIC == 1)
#endif
#if (USBD_USE_UAC_SPKR == 1)
  if (epnum == AUDIO_SPKR_EP)
 80092f0:	4b07      	ldr	r3, [pc, #28]	; (8009310 <USBD_COMPOSITE_IsoOutIncomplete+0x2c>)
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	78fa      	ldrb	r2, [r7, #3]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d105      	bne.n	8009306 <USBD_COMPOSITE_IsoOutIncomplete+0x22>
  {
    USBD_AUDIO_SPKR.IsoOUTIncomplete(pdev, epnum);
 80092fa:	4b06      	ldr	r3, [pc, #24]	; (8009314 <USBD_COMPOSITE_IsoOutIncomplete+0x30>)
 80092fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fe:	78fa      	ldrb	r2, [r7, #3]
 8009300:	4611      	mov	r1, r2
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	4798      	blx	r3
#if (USBD_USE_DFU == 1)
#endif
#if (USBD_USE_PRNTR == 1)
#endif

  return (uint8_t)USBD_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	20000196 	.word	0x20000196
 8009314:	20000198 	.word	0x20000198

08009318 <USBD_COMPOSITE_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_COMPOSITE_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	460b      	mov	r3, r1
 8009322:	70fb      	strb	r3, [r7, #3]
#if (USBD_USE_CDC_ACM == 1)
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009324:	2300      	movs	r3, #0
 8009326:	73fb      	strb	r3, [r7, #15]
 8009328:	e010      	b.n	800934c <USBD_COMPOSITE_DataOut+0x34>
  {
    if (epnum == CDC_OUT_EP[i])
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	4a12      	ldr	r2, [pc, #72]	; (8009378 <USBD_COMPOSITE_DataOut+0x60>)
 800932e:	5cd3      	ldrb	r3, [r2, r3]
 8009330:	78fa      	ldrb	r2, [r7, #3]
 8009332:	429a      	cmp	r2, r3
 8009334:	d107      	bne.n	8009346 <USBD_COMPOSITE_DataOut+0x2e>
    {
      return USBD_CDC_ACM.DataOut(pdev, epnum);
 8009336:	4b11      	ldr	r3, [pc, #68]	; (800937c <USBD_COMPOSITE_DataOut+0x64>)
 8009338:	699b      	ldr	r3, [r3, #24]
 800933a:	78fa      	ldrb	r2, [r7, #3]
 800933c:	4611      	mov	r1, r2
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	4798      	blx	r3
 8009342:	4603      	mov	r3, r0
 8009344:	e013      	b.n	800936e <USBD_COMPOSITE_DataOut+0x56>
  for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009346:	7bfb      	ldrb	r3, [r7, #15]
 8009348:	3301      	adds	r3, #1
 800934a:	73fb      	strb	r3, [r7, #15]
 800934c:	7bfb      	ldrb	r3, [r7, #15]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d9eb      	bls.n	800932a <USBD_COMPOSITE_DataOut+0x12>
  }
#endif
#if (USBD_USE_UAC_MIC == 1)
#endif
#if (USBD_USE_UAC_SPKR == 1)
  if (epnum == AUDIO_SPKR_EP)
 8009352:	4b0b      	ldr	r3, [pc, #44]	; (8009380 <USBD_COMPOSITE_DataOut+0x68>)
 8009354:	781b      	ldrb	r3, [r3, #0]
 8009356:	78fa      	ldrb	r2, [r7, #3]
 8009358:	429a      	cmp	r2, r3
 800935a:	d107      	bne.n	800936c <USBD_COMPOSITE_DataOut+0x54>
  {
    return USBD_AUDIO_SPKR.DataOut(pdev, epnum);
 800935c:	4b09      	ldr	r3, [pc, #36]	; (8009384 <USBD_COMPOSITE_DataOut+0x6c>)
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	78fa      	ldrb	r2, [r7, #3]
 8009362:	4611      	mov	r1, r2
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	4798      	blx	r3
 8009368:	4603      	mov	r3, r0
 800936a:	e000      	b.n	800936e <USBD_COMPOSITE_DataOut+0x56>
  {
    USBD_PRNT.DataOut(pdev, epnum);
  }
#endif

  return USBD_FAIL;
 800936c:	2303      	movs	r3, #3
}
 800936e:	4618      	mov	r0, r3
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	20002be8 	.word	0x20002be8
 800937c:	20000264 	.word	0x20000264
 8009380:	20000196 	.word	0x20000196
 8009384:	20000198 	.word	0x20000198

08009388 <USBD_COMPOSITE_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetHSCfgDesc(uint16_t *length)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f240 1277 	movw	r2, #375	; 0x177
 8009396:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 8009398:	4b03      	ldr	r3, [pc, #12]	; (80093a8 <USBD_COMPOSITE_GetHSCfgDesc+0x20>)
}
 800939a:	4618      	mov	r0, r3
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr
 80093a6:	bf00      	nop
 80093a8:	200035ac 	.word	0x200035ac

080093ac <USBD_COMPOSITE_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetFSCfgDesc(uint16_t *length)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f240 1277 	movw	r2, #375	; 0x177
 80093ba:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
 80093bc:	4b03      	ldr	r3, [pc, #12]	; (80093cc <USBD_COMPOSITE_GetFSCfgDesc+0x20>)
}
 80093be:	4618      	mov	r0, r3
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	20003434 	.word	0x20003434

080093d0 <USBD_COMPOSITE_GetOtherSpeedCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_COMPOSITE_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
#if (USBD_USE_HS == 1)
  *length = (uint16_t)sizeof(USBD_COMPOSITE_FSCfgDesc);
  return (uint8_t *)&USBD_COMPOSITE_FSCfgDesc;
#else
  *length = (uint16_t)sizeof(USBD_COMPOSITE_HSCfgDesc);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f240 1277 	movw	r2, #375	; 0x177
 80093de:	801a      	strh	r2, [r3, #0]
  return (uint8_t *)&USBD_COMPOSITE_HSCfgDesc;
 80093e0:	4b03      	ldr	r3, [pc, #12]	; (80093f0 <USBD_COMPOSITE_GetOtherSpeedCfgDesc+0x20>)
#endif
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	200035ac 	.word	0x200035ac

080093f4 <USBD_COMPOSITE_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_COMPOSITE_GetDeviceQualifierDesc(uint16_t *length)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_COMPOSITE_DeviceQualifierDesc);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	220a      	movs	r2, #10
 8009400:	801a      	strh	r2, [r3, #0]
  return USBD_COMPOSITE_DeviceQualifierDesc;
 8009402:	4b03      	ldr	r3, [pc, #12]	; (8009410 <USBD_COMPOSITE_GetDeviceQualifierDesc+0x1c>)
}
 8009404:	4618      	mov	r0, r3
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr
 8009410:	20000400 	.word	0x20000400

08009414 <USBD_COMPOSITE_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_COMPOSITE_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b08a      	sub	sp, #40	; 0x28
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	460b      	mov	r3, r1
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[64];

  /* Check if the requested string interface is supported */
  if (index <= USBD_Track_String_Index)
 8009422:	4b2a      	ldr	r3, [pc, #168]	; (80094cc <USBD_COMPOSITE_GetUsrStringDesc+0xb8>)
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	7afa      	ldrb	r2, [r7, #11]
 8009428:	429a      	cmp	r2, r3
 800942a:	d84a      	bhi.n	80094c2 <USBD_COMPOSITE_GetUsrStringDesc+0xae>
  {
#if (USBD_USE_CDC_ACM == 1)
    char str_buffer[16] = "";
 800942c:	2300      	movs	r3, #0
 800942e:	617b      	str	r3, [r7, #20]
 8009430:	f107 0318 	add.w	r3, r7, #24
 8009434:	2200      	movs	r2, #0
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	605a      	str	r2, [r3, #4]
 800943a:	609a      	str	r2, [r3, #8]
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800943c:	2300      	movs	r3, #0
 800943e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009442:	e01a      	b.n	800947a <USBD_COMPOSITE_GetUsrStringDesc+0x66>
    {
      if (index == CDC_STR_DESC_IDX[i])
 8009444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009448:	4a21      	ldr	r2, [pc, #132]	; (80094d0 <USBD_COMPOSITE_GetUsrStringDesc+0xbc>)
 800944a:	5cd3      	ldrb	r3, [r2, r3]
 800944c:	7afa      	ldrb	r2, [r7, #11]
 800944e:	429a      	cmp	r2, r3
 8009450:	d10e      	bne.n	8009470 <USBD_COMPOSITE_GetUsrStringDesc+0x5c>
      {
        snprintf(str_buffer, sizeof(str_buffer), CDC_ACM_STR_DESC, i);
 8009452:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009456:	f107 0014 	add.w	r0, r7, #20
 800945a:	4a1e      	ldr	r2, [pc, #120]	; (80094d4 <USBD_COMPOSITE_GetUsrStringDesc+0xc0>)
 800945c:	2110      	movs	r1, #16
 800945e:	f002 fe3b 	bl	800c0d8 <sniprintf>
        USBD_GetString((uint8_t *)str_buffer, USBD_StrDesc, length);
 8009462:	f107 0314 	add.w	r3, r7, #20
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	491b      	ldr	r1, [pc, #108]	; (80094d8 <USBD_COMPOSITE_GetUsrStringDesc+0xc4>)
 800946a:	4618      	mov	r0, r3
 800946c:	f002 f909 	bl	800b682 <USBD_GetString>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 8009470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009474:	3301      	adds	r3, #1
 8009476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800947a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800947e:	2b01      	cmp	r3, #1
 8009480:	d9e0      	bls.n	8009444 <USBD_COMPOSITE_GetUsrStringDesc+0x30>
    {
      USBD_GetString((uint8_t *)CUSTOM_HID_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_UAC_MIC == 1)
    if (index == AUDIO_MIC_STR_DESC_IDX)
 8009482:	4b16      	ldr	r3, [pc, #88]	; (80094dc <USBD_COMPOSITE_GetUsrStringDesc+0xc8>)
 8009484:	781b      	ldrb	r3, [r3, #0]
 8009486:	7afa      	ldrb	r2, [r7, #11]
 8009488:	429a      	cmp	r2, r3
 800948a:	d104      	bne.n	8009496 <USBD_COMPOSITE_GetUsrStringDesc+0x82>
    {
      USBD_GetString((uint8_t *)AUDIO_MIC_STR_DESC, USBD_StrDesc, length);
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	4912      	ldr	r1, [pc, #72]	; (80094d8 <USBD_COMPOSITE_GetUsrStringDesc+0xc4>)
 8009490:	4813      	ldr	r0, [pc, #76]	; (80094e0 <USBD_COMPOSITE_GetUsrStringDesc+0xcc>)
 8009492:	f002 f8f6 	bl	800b682 <USBD_GetString>
    }
#endif
#if (USBD_USE_UAC_SPKR == 1)
    if (index == AUDIO_SPKR_STR_DESC_IDX)
 8009496:	4b13      	ldr	r3, [pc, #76]	; (80094e4 <USBD_COMPOSITE_GetUsrStringDesc+0xd0>)
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	7afa      	ldrb	r2, [r7, #11]
 800949c:	429a      	cmp	r2, r3
 800949e:	d104      	bne.n	80094aa <USBD_COMPOSITE_GetUsrStringDesc+0x96>
    {
      USBD_GetString((uint8_t *)AUDIO_SPKR_STR_DESC, USBD_StrDesc, length);
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	490d      	ldr	r1, [pc, #52]	; (80094d8 <USBD_COMPOSITE_GetUsrStringDesc+0xc4>)
 80094a4:	4810      	ldr	r0, [pc, #64]	; (80094e8 <USBD_COMPOSITE_GetUsrStringDesc+0xd4>)
 80094a6:	f002 f8ec 	bl	800b682 <USBD_GetString>
    {
      USBD_GetString((uint8_t *)MSC_BOT_STR_DESC, USBD_StrDesc, length);
    }
#endif
#if (USBD_USE_DFU == 1)
    if (index == DFU_STR_DESC_IDX)
 80094aa:	4b10      	ldr	r3, [pc, #64]	; (80094ec <USBD_COMPOSITE_GetUsrStringDesc+0xd8>)
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	7afa      	ldrb	r2, [r7, #11]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d104      	bne.n	80094be <USBD_COMPOSITE_GetUsrStringDesc+0xaa>
    {
      USBD_GetString((uint8_t *)DFU_STR_DESC, USBD_StrDesc, length);
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	4908      	ldr	r1, [pc, #32]	; (80094d8 <USBD_COMPOSITE_GetUsrStringDesc+0xc4>)
 80094b8:	480d      	ldr	r0, [pc, #52]	; (80094f0 <USBD_COMPOSITE_GetUsrStringDesc+0xdc>)
 80094ba:	f002 f8e2 	bl	800b682 <USBD_GetString>
    if (index == PRINTER_STR_DESC_IDX)
    {
      USBD_GetString((uint8_t *)PRNT_STR_DESC, USBD_StrDesc, length);
    }
#endif
    return USBD_StrDesc;
 80094be:	4b06      	ldr	r3, [pc, #24]	; (80094d8 <USBD_COMPOSITE_GetUsrStringDesc+0xc4>)
 80094c0:	e000      	b.n	80094c4 <USBD_COMPOSITE_GetUsrStringDesc+0xb0>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80094c2:	2300      	movs	r3, #0
  }
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3728      	adds	r7, #40	; 0x28
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	200003fc 	.word	0x200003fc
 80094d0:	20002bf8 	.word	0x20002bf8
 80094d4:	0800d2c8 	.word	0x0800d2c8
 80094d8:	20003724 	.word	0x20003724
 80094dc:	200015a1 	.word	0x200015a1
 80094e0:	0800d2d8 	.word	0x0800d2d8
 80094e4:	20001793 	.word	0x20001793
 80094e8:	0800d2ec 	.word	0x0800d2ec
 80094ec:	2000040a 	.word	0x2000040a
 80094f0:	0800d2fc 	.word	0x0800d2fc

080094f4 <USBD_COMPOSITE_Mount_Class>:
#endif

void USBD_COMPOSITE_Mount_Class(void)
{
 80094f4:	b590      	push	{r4, r7, lr}
 80094f6:	b089      	sub	sp, #36	; 0x24
 80094f8:	af04      	add	r7, sp, #16
  uint16_t len = 0;
 80094fa:	2300      	movs	r3, #0
 80094fc:	80bb      	strh	r3, [r7, #4]
  uint8_t *ptr = NULL;
 80094fe:	2300      	movs	r3, #0
 8009500:	60fb      	str	r3, [r7, #12]

  uint8_t in_ep_track = 0x81;
 8009502:	2381      	movs	r3, #129	; 0x81
 8009504:	72fb      	strb	r3, [r7, #11]
  uint8_t out_ep_track = 0x01;
 8009506:	2301      	movs	r3, #1
 8009508:	72bb      	strb	r3, [r7, #10]
  uint8_t interface_no_track = 0x00;
 800950a:	2300      	movs	r3, #0
 800950c:	727b      	strb	r3, [r7, #9]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_UAC_MIC == 1)
  ptr = USBD_AUDIO_MIC.GetFSConfigDescriptor(&len);
 800950e:	4bad      	ldr	r3, [pc, #692]	; (80097c4 <USBD_COMPOSITE_Mount_Class+0x2d0>)
 8009510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009512:	1d3a      	adds	r2, r7, #4
 8009514:	4610      	mov	r0, r2
 8009516:	4798      	blx	r3
 8009518:	60f8      	str	r0, [r7, #12]
  USBD_Update_Audio_MIC_DESC(ptr,
 800951a:	7a7b      	ldrb	r3, [r7, #9]
 800951c:	3301      	adds	r3, #1
 800951e:	b2da      	uxtb	r2, r3
 8009520:	4ba9      	ldr	r3, [pc, #676]	; (80097c8 <USBD_COMPOSITE_Mount_Class+0x2d4>)
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	7af8      	ldrb	r0, [r7, #11]
 8009526:	7a79      	ldrb	r1, [r7, #9]
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	4603      	mov	r3, r0
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f7fe fc97 	bl	8007e60 <USBD_Update_Audio_MIC_DESC>
                             interface_no_track,
                             interface_no_track + 1,
                             in_ep_track,
                             USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_UAC_MIC_DESC, ptr + 0x09, len - 0x09);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3309      	adds	r3, #9
 8009536:	88ba      	ldrh	r2, [r7, #4]
 8009538:	3a09      	subs	r2, #9
 800953a:	4619      	mov	r1, r3
 800953c:	48a3      	ldr	r0, [pc, #652]	; (80097cc <USBD_COMPOSITE_Mount_Class+0x2d8>)
 800953e:	f002 fcc5 	bl	800becc <memcpy>

  ptr = USBD_AUDIO_MIC.GetHSConfigDescriptor(&len);
 8009542:	4ba0      	ldr	r3, [pc, #640]	; (80097c4 <USBD_COMPOSITE_Mount_Class+0x2d0>)
 8009544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009546:	1d3a      	adds	r2, r7, #4
 8009548:	4610      	mov	r0, r2
 800954a:	4798      	blx	r3
 800954c:	60f8      	str	r0, [r7, #12]
  USBD_Update_Audio_MIC_DESC(ptr,
 800954e:	7a7b      	ldrb	r3, [r7, #9]
 8009550:	3301      	adds	r3, #1
 8009552:	b2da      	uxtb	r2, r3
 8009554:	4b9c      	ldr	r3, [pc, #624]	; (80097c8 <USBD_COMPOSITE_Mount_Class+0x2d4>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	7af8      	ldrb	r0, [r7, #11]
 800955a:	7a79      	ldrb	r1, [r7, #9]
 800955c:	9300      	str	r3, [sp, #0]
 800955e:	4603      	mov	r3, r0
 8009560:	68f8      	ldr	r0, [r7, #12]
 8009562:	f7fe fc7d 	bl	8007e60 <USBD_Update_Audio_MIC_DESC>
                             interface_no_track,
                             interface_no_track + 1,
                             in_ep_track,
                             USBD_Track_String_Index);

  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_UAC_MIC_DESC, ptr + 0x09, len - 0x09);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	3309      	adds	r3, #9
 800956a:	88ba      	ldrh	r2, [r7, #4]
 800956c:	3a09      	subs	r2, #9
 800956e:	4619      	mov	r1, r3
 8009570:	4897      	ldr	r0, [pc, #604]	; (80097d0 <USBD_COMPOSITE_Mount_Class+0x2dc>)
 8009572:	f002 fcab 	bl	800becc <memcpy>
  in_ep_track += 1;
 8009576:	7afb      	ldrb	r3, [r7, #11]
 8009578:	3301      	adds	r3, #1
 800957a:	72fb      	strb	r3, [r7, #11]
  interface_no_track += 2;
 800957c:	7a7b      	ldrb	r3, [r7, #9]
 800957e:	3302      	adds	r3, #2
 8009580:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8009582:	4b91      	ldr	r3, [pc, #580]	; (80097c8 <USBD_COMPOSITE_Mount_Class+0x2d4>)
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	3301      	adds	r3, #1
 8009588:	b2da      	uxtb	r2, r3
 800958a:	4b8f      	ldr	r3, [pc, #572]	; (80097c8 <USBD_COMPOSITE_Mount_Class+0x2d4>)
 800958c:	701a      	strb	r2, [r3, #0]
#endif

#if (USBD_USE_UAC_SPKR == 1)
  ptr = USBD_AUDIO_SPKR.GetFSConfigDescriptor(&len);
 800958e:	4b91      	ldr	r3, [pc, #580]	; (80097d4 <USBD_COMPOSITE_Mount_Class+0x2e0>)
 8009590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009592:	1d3a      	adds	r2, r7, #4
 8009594:	4610      	mov	r0, r2
 8009596:	4798      	blx	r3
 8009598:	60f8      	str	r0, [r7, #12]
  USBD_Update_Audio_SPKR_DESC(ptr, interface_no_track, interface_no_track + 1, out_ep_track, USBD_Track_String_Index);
 800959a:	7a7b      	ldrb	r3, [r7, #9]
 800959c:	3301      	adds	r3, #1
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	4b89      	ldr	r3, [pc, #548]	; (80097c8 <USBD_COMPOSITE_Mount_Class+0x2d4>)
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	7ab8      	ldrb	r0, [r7, #10]
 80095a6:	7a79      	ldrb	r1, [r7, #9]
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	4603      	mov	r3, r0
 80095ac:	68f8      	ldr	r0, [r7, #12]
 80095ae:	f7fe ffe5 	bl	800857c <USBD_Update_Audio_SPKR_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_AUDIO_SPKR_DESC, ptr + 0x09, len - 0x09);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	3309      	adds	r3, #9
 80095b6:	88ba      	ldrh	r2, [r7, #4]
 80095b8:	3a09      	subs	r2, #9
 80095ba:	4619      	mov	r1, r3
 80095bc:	4886      	ldr	r0, [pc, #536]	; (80097d8 <USBD_COMPOSITE_Mount_Class+0x2e4>)
 80095be:	f002 fc85 	bl	800becc <memcpy>

  ptr = USBD_AUDIO_SPKR.GetHSConfigDescriptor(&len);
 80095c2:	4b84      	ldr	r3, [pc, #528]	; (80097d4 <USBD_COMPOSITE_Mount_Class+0x2e0>)
 80095c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c6:	1d3a      	adds	r2, r7, #4
 80095c8:	4610      	mov	r0, r2
 80095ca:	4798      	blx	r3
 80095cc:	60f8      	str	r0, [r7, #12]
  USBD_Update_Audio_SPKR_DESC(ptr, interface_no_track, interface_no_track + 1, out_ep_track, USBD_Track_String_Index);
 80095ce:	7a7b      	ldrb	r3, [r7, #9]
 80095d0:	3301      	adds	r3, #1
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	4b7c      	ldr	r3, [pc, #496]	; (80097c8 <USBD_COMPOSITE_Mount_Class+0x2d4>)
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	7ab8      	ldrb	r0, [r7, #10]
 80095da:	7a79      	ldrb	r1, [r7, #9]
 80095dc:	9300      	str	r3, [sp, #0]
 80095de:	4603      	mov	r3, r0
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f7fe ffcb 	bl	800857c <USBD_Update_Audio_SPKR_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_AUDIO_SPKR_DESC, ptr + 0x09, len - 0x09);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	3309      	adds	r3, #9
 80095ea:	88ba      	ldrh	r2, [r7, #4]
 80095ec:	3a09      	subs	r2, #9
 80095ee:	4619      	mov	r1, r3
 80095f0:	487a      	ldr	r0, [pc, #488]	; (80097dc <USBD_COMPOSITE_Mount_Class+0x2e8>)
 80095f2:	f002 fc6b 	bl	800becc <memcpy>

  out_ep_track += 1;
 80095f6:	7abb      	ldrb	r3, [r7, #10]
 80095f8:	3301      	adds	r3, #1
 80095fa:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2;
 80095fc:	7a7b      	ldrb	r3, [r7, #9]
 80095fe:	3302      	adds	r3, #2
 8009600:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += 1;
 8009602:	4b71      	ldr	r3, [pc, #452]	; (80097c8 <USBD_COMPOSITE_Mount_Class+0x2d4>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	3301      	adds	r3, #1
 8009608:	b2da      	uxtb	r2, r3
 800960a:	4b6f      	ldr	r3, [pc, #444]	; (80097c8 <USBD_COMPOSITE_Mount_Class+0x2d4>)
 800960c:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_DFU == 1)
  ptr = USBD_DFU.GetFSConfigDescriptor(&len);
 800960e:	4b74      	ldr	r3, [pc, #464]	; (80097e0 <USBD_COMPOSITE_Mount_Class+0x2ec>)
 8009610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009612:	1d3a      	adds	r2, r7, #4
 8009614:	4610      	mov	r0, r2
 8009616:	4798      	blx	r3
 8009618:	60f8      	str	r0, [r7, #12]
  USBD_Update_DFU_DESC(ptr, interface_no_track, USBD_Track_String_Index);
 800961a:	4b6b      	ldr	r3, [pc, #428]	; (80097c8 <USBD_COMPOSITE_Mount_Class+0x2d4>)
 800961c:	781a      	ldrb	r2, [r3, #0]
 800961e:	7a7b      	ldrb	r3, [r7, #9]
 8009620:	4619      	mov	r1, r3
 8009622:	68f8      	ldr	r0, [r7, #12]
 8009624:	f000 ff4a 	bl	800a4bc <USBD_Update_DFU_DESC>
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_DFU_DESC, ptr + 0x09, len - 0x09);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	3309      	adds	r3, #9
 800962c:	88ba      	ldrh	r2, [r7, #4]
 800962e:	3a09      	subs	r2, #9
 8009630:	4619      	mov	r1, r3
 8009632:	486c      	ldr	r0, [pc, #432]	; (80097e4 <USBD_COMPOSITE_Mount_Class+0x2f0>)
 8009634:	f002 fc4a 	bl	800becc <memcpy>

  ptr = USBD_DFU.GetHSConfigDescriptor(&len);
 8009638:	4b69      	ldr	r3, [pc, #420]	; (80097e0 <USBD_COMPOSITE_Mount_Class+0x2ec>)
 800963a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800963c:	1d3a      	adds	r2, r7, #4
 800963e:	4610      	mov	r0, r2
 8009640:	4798      	blx	r3
 8009642:	60f8      	str	r0, [r7, #12]
  USBD_Update_DFU_DESC(ptr, interface_no_track, USBD_Track_String_Index);
 8009644:	4b60      	ldr	r3, [pc, #384]	; (80097c8 <USBD_COMPOSITE_Mount_Class+0x2d4>)
 8009646:	781a      	ldrb	r2, [r3, #0]
 8009648:	7a7b      	ldrb	r3, [r7, #9]
 800964a:	4619      	mov	r1, r3
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f000 ff35 	bl	800a4bc <USBD_Update_DFU_DESC>
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_DFU_DESC, ptr + 0x09, len - 0x09);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3309      	adds	r3, #9
 8009656:	88ba      	ldrh	r2, [r7, #4]
 8009658:	3a09      	subs	r2, #9
 800965a:	4619      	mov	r1, r3
 800965c:	4862      	ldr	r0, [pc, #392]	; (80097e8 <USBD_COMPOSITE_Mount_Class+0x2f4>)
 800965e:	f002 fc35 	bl	800becc <memcpy>

  interface_no_track += USBD_DFU_MAX_ITF_NUM;
 8009662:	7a7b      	ldrb	r3, [r7, #9]
 8009664:	3301      	adds	r3, #1
 8009666:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_DFU_MAX_ITF_NUM;
 8009668:	4b57      	ldr	r3, [pc, #348]	; (80097c8 <USBD_COMPOSITE_Mount_Class+0x2d4>)
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	3301      	adds	r3, #1
 800966e:	b2da      	uxtb	r2, r3
 8009670:	4b55      	ldr	r3, [pc, #340]	; (80097c8 <USBD_COMPOSITE_Mount_Class+0x2d4>)
 8009672:	701a      	strb	r2, [r3, #0]
  interface_no_track += 1;
  USBD_Track_String_Index += 1;
#endif

#if (USBD_USE_CDC_ACM == 1)
  ptr = USBD_CDC_ACM.GetFSConfigDescriptor(&len);
 8009674:	4b5d      	ldr	r3, [pc, #372]	; (80097ec <USBD_COMPOSITE_Mount_Class+0x2f8>)
 8009676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009678:	1d3a      	adds	r2, r7, #4
 800967a:	4610      	mov	r0, r2
 800967c:	4798      	blx	r3
 800967e:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 8009680:	7a7b      	ldrb	r3, [r7, #9]
 8009682:	3301      	adds	r3, #1
 8009684:	b2d8      	uxtb	r0, r3
 8009686:	7afb      	ldrb	r3, [r7, #11]
 8009688:	3301      	adds	r3, #1
 800968a:	b2db      	uxtb	r3, r3
 800968c:	4a4e      	ldr	r2, [pc, #312]	; (80097c8 <USBD_COMPOSITE_Mount_Class+0x2d4>)
 800968e:	7812      	ldrb	r2, [r2, #0]
 8009690:	7afc      	ldrb	r4, [r7, #11]
 8009692:	7a79      	ldrb	r1, [r7, #9]
 8009694:	9202      	str	r2, [sp, #8]
 8009696:	7aba      	ldrb	r2, [r7, #10]
 8009698:	9201      	str	r2, [sp, #4]
 800969a:	9300      	str	r3, [sp, #0]
 800969c:	4623      	mov	r3, r4
 800969e:	4602      	mov	r2, r0
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f7ff fc0d 	bl	8008ec0 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_FSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	3309      	adds	r3, #9
 80096aa:	88ba      	ldrh	r2, [r7, #4]
 80096ac:	3a09      	subs	r2, #9
 80096ae:	4619      	mov	r1, r3
 80096b0:	484f      	ldr	r0, [pc, #316]	; (80097f0 <USBD_COMPOSITE_Mount_Class+0x2fc>)
 80096b2:	f002 fc0b 	bl	800becc <memcpy>

  ptr = USBD_CDC_ACM.GetHSConfigDescriptor(&len);
 80096b6:	4b4d      	ldr	r3, [pc, #308]	; (80097ec <USBD_COMPOSITE_Mount_Class+0x2f8>)
 80096b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096ba:	1d3a      	adds	r2, r7, #4
 80096bc:	4610      	mov	r0, r2
 80096be:	4798      	blx	r3
 80096c0:	60f8      	str	r0, [r7, #12]
  USBD_Update_CDC_ACM_DESC(ptr,
 80096c2:	7a7b      	ldrb	r3, [r7, #9]
 80096c4:	3301      	adds	r3, #1
 80096c6:	b2d8      	uxtb	r0, r3
 80096c8:	7afb      	ldrb	r3, [r7, #11]
 80096ca:	3301      	adds	r3, #1
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	4a3e      	ldr	r2, [pc, #248]	; (80097c8 <USBD_COMPOSITE_Mount_Class+0x2d4>)
 80096d0:	7812      	ldrb	r2, [r2, #0]
 80096d2:	7afc      	ldrb	r4, [r7, #11]
 80096d4:	7a79      	ldrb	r1, [r7, #9]
 80096d6:	9202      	str	r2, [sp, #8]
 80096d8:	7aba      	ldrb	r2, [r7, #10]
 80096da:	9201      	str	r2, [sp, #4]
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	4623      	mov	r3, r4
 80096e0:	4602      	mov	r2, r0
 80096e2:	68f8      	ldr	r0, [r7, #12]
 80096e4:	f7ff fbec 	bl	8008ec0 <USBD_Update_CDC_ACM_DESC>
                           interface_no_track + 1,
                           in_ep_track,
                           in_ep_track + 1,
                           out_ep_track,
                           USBD_Track_String_Index);
  memcpy(USBD_COMPOSITE_HSCfgDesc.USBD_CDC_ACM_DESC, ptr + 0x09, len - 0x09);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	3309      	adds	r3, #9
 80096ec:	88ba      	ldrh	r2, [r7, #4]
 80096ee:	3a09      	subs	r2, #9
 80096f0:	4619      	mov	r1, r3
 80096f2:	4840      	ldr	r0, [pc, #256]	; (80097f4 <USBD_COMPOSITE_Mount_Class+0x300>)
 80096f4:	f002 fbea 	bl	800becc <memcpy>

  in_ep_track += 2 * USBD_CDC_ACM_COUNT;
 80096f8:	7afb      	ldrb	r3, [r7, #11]
 80096fa:	3304      	adds	r3, #4
 80096fc:	72fb      	strb	r3, [r7, #11]
  out_ep_track += 1 * USBD_CDC_ACM_COUNT;
 80096fe:	7abb      	ldrb	r3, [r7, #10]
 8009700:	3302      	adds	r3, #2
 8009702:	72bb      	strb	r3, [r7, #10]
  interface_no_track += 2 * USBD_CDC_ACM_COUNT;
 8009704:	7a7b      	ldrb	r3, [r7, #9]
 8009706:	3304      	adds	r3, #4
 8009708:	727b      	strb	r3, [r7, #9]
  USBD_Track_String_Index += USBD_CDC_ACM_COUNT;
 800970a:	4b2f      	ldr	r3, [pc, #188]	; (80097c8 <USBD_COMPOSITE_Mount_Class+0x2d4>)
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	3302      	adds	r3, #2
 8009710:	b2da      	uxtb	r2, r3
 8009712:	4b2d      	ldr	r3, [pc, #180]	; (80097c8 <USBD_COMPOSITE_Mount_Class+0x2d4>)
 8009714:	701a      	strb	r2, [r3, #0]
#endif

  uint16_t CFG_SIZE = sizeof(USBD_COMPOSITE_CFG_DESC_t);
 8009716:	f240 1377 	movw	r3, #375	; 0x177
 800971a:	80fb      	strh	r3, [r7, #6]
  ptr = USBD_COMPOSITE_HSCfgDesc.CONFIG_DESC;
 800971c:	4b36      	ldr	r3, [pc, #216]	; (80097f8 <USBD_COMPOSITE_Mount_Class+0x304>)
 800971e:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2209      	movs	r2, #9
 8009724:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	3301      	adds	r3, #1
 800972a:	2202      	movs	r2, #2
 800972c:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3302      	adds	r3, #2
 8009732:	88fa      	ldrh	r2, [r7, #6]
 8009734:	b2d2      	uxtb	r2, r2
 8009736:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 8009738:	88fb      	ldrh	r3, [r7, #6]
 800973a:	0a1b      	lsrs	r3, r3, #8
 800973c:	b29a      	uxth	r2, r3
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	3303      	adds	r3, #3
 8009742:	b2d2      	uxtb	r2, r2
 8009744:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	3304      	adds	r3, #4
 800974a:	7a7a      	ldrb	r2, [r7, #9]
 800974c:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3305      	adds	r3, #5
 8009752:	2201      	movs	r2, #1
 8009754:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	3306      	adds	r3, #6
 800975a:	2200      	movs	r2, #0
 800975c:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3307      	adds	r3, #7
 8009762:	22c0      	movs	r2, #192	; 0xc0
 8009764:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3308      	adds	r3, #8
 800976a:	2232      	movs	r2, #50	; 0x32
 800976c:	701a      	strb	r2, [r3, #0]

  ptr = USBD_COMPOSITE_FSCfgDesc.CONFIG_DESC;
 800976e:	4b23      	ldr	r3, [pc, #140]	; (80097fc <USBD_COMPOSITE_Mount_Class+0x308>)
 8009770:	60fb      	str	r3, [r7, #12]
  /* Configuration Descriptor */
  ptr[0] = 0x09;                        /* bLength: Configuration Descriptor size */
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2209      	movs	r2, #9
 8009776:	701a      	strb	r2, [r3, #0]
  ptr[1] = USB_DESC_TYPE_CONFIGURATION; /* bDescriptorType: Configuration */
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	3301      	adds	r3, #1
 800977c:	2202      	movs	r2, #2
 800977e:	701a      	strb	r2, [r3, #0]
  ptr[2] = LOBYTE(CFG_SIZE);            /* wTotalLength:no of returned bytes */
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3302      	adds	r3, #2
 8009784:	88fa      	ldrh	r2, [r7, #6]
 8009786:	b2d2      	uxtb	r2, r2
 8009788:	701a      	strb	r2, [r3, #0]
  ptr[3] = HIBYTE(CFG_SIZE);
 800978a:	88fb      	ldrh	r3, [r7, #6]
 800978c:	0a1b      	lsrs	r3, r3, #8
 800978e:	b29a      	uxth	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	3303      	adds	r3, #3
 8009794:	b2d2      	uxtb	r2, r2
 8009796:	701a      	strb	r2, [r3, #0]
  ptr[4] = interface_no_track; /* bNumInterfaces: 2 interface */
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3304      	adds	r3, #4
 800979c:	7a7a      	ldrb	r2, [r7, #9]
 800979e:	701a      	strb	r2, [r3, #0]
  ptr[5] = 0x01;               /* bConfigurationValue: Configuration value */
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	3305      	adds	r3, #5
 80097a4:	2201      	movs	r2, #1
 80097a6:	701a      	strb	r2, [r3, #0]
  ptr[6] = 0x00;               /* iConfiguration: Index of string descriptor describing the configuration */
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	3306      	adds	r3, #6
 80097ac:	2200      	movs	r2, #0
 80097ae:	701a      	strb	r2, [r3, #0]
#if (USBD_SELF_POWERED == 1U)
  ptr[7] = 0xC0; /* bmAttributes: Bus Powered according to user configuration */
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	3307      	adds	r3, #7
 80097b4:	22c0      	movs	r2, #192	; 0xc0
 80097b6:	701a      	strb	r2, [r3, #0]
#else
  ptr[7] = 0x80; /* bmAttributes: Bus Powered according to user configuration */
#endif
  ptr[8] = USBD_MAX_POWER; /* MaxPower 100 mA */
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	3308      	adds	r3, #8
 80097bc:	2232      	movs	r2, #50	; 0x32
 80097be:	701a      	strb	r2, [r3, #0]
 80097c0:	e01e      	b.n	8009800 <USBD_COMPOSITE_Mount_Class+0x30c>
 80097c2:	bf00      	nop
 80097c4:	200000d8 	.word	0x200000d8
 80097c8:	200003fc 	.word	0x200003fc
 80097cc:	2000343d 	.word	0x2000343d
 80097d0:	200035b5 	.word	0x200035b5
 80097d4:	20000198 	.word	0x20000198
 80097d8:	200034a9 	.word	0x200034a9
 80097dc:	20003621 	.word	0x20003621
 80097e0:	2000040c 	.word	0x2000040c
 80097e4:	20003515 	.word	0x20003515
 80097e8:	2000368d 	.word	0x2000368d
 80097ec:	20000264 	.word	0x20000264
 80097f0:	20003527 	.word	0x20003527
 80097f4:	2000369f 	.word	0x2000369f
 80097f8:	200035ac 	.word	0x200035ac
 80097fc:	20003434 	.word	0x20003434

  (void)out_ep_track;
  (void)in_ep_track;
}
 8009800:	bf00      	nop
 8009802:	3714      	adds	r7, #20
 8009804:	46bd      	mov	sp, r7
 8009806:	bd90      	pop	{r4, r7, pc}

08009808 <__NVIC_SystemReset>:
{
 8009808:	b480      	push	{r7}
 800980a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800980c:	f3bf 8f4f 	dsb	sy
}
 8009810:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009812:	4b06      	ldr	r3, [pc, #24]	; (800982c <__NVIC_SystemReset+0x24>)
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800981a:	4904      	ldr	r1, [pc, #16]	; (800982c <__NVIC_SystemReset+0x24>)
 800981c:	4b04      	ldr	r3, [pc, #16]	; (8009830 <__NVIC_SystemReset+0x28>)
 800981e:	4313      	orrs	r3, r2
 8009820:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009822:	f3bf 8f4f 	dsb	sy
}
 8009826:	bf00      	nop
    __NOP();
 8009828:	bf00      	nop
 800982a:	e7fd      	b.n	8009828 <__NVIC_SystemReset+0x20>
 800982c:	e000ed00 	.word	0xe000ed00
 8009830:	05fa0004 	.word	0x05fa0004

08009834 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = &DFU_Instance;
 8009840:	4b26      	ldr	r3, [pc, #152]	; (80098dc <USBD_DFU_Init+0xa8>)
 8009842:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d105      	bne.n	8009856 <USBD_DFU_Init+0x22>
  {
    pdev->pClassData_DFU = NULL;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
    return (uint8_t)USBD_EMEM;
 8009852:	2302      	movs	r3, #2
 8009854:	e03e      	b.n	80098d4 <USBD_DFU_Init+0xa0>
  }

  pdev->pClassData_DFU = (void *)hdfu;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

  hdfu->alt_setting = 0U;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2200      	movs	r2, #0
 8009862:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	4a1d      	ldr	r2, [pc, #116]	; (80098e0 <USBD_DFU_Init+0xac>)
 800986a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2202      	movs	r2, #2
 800988a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2202      	movs	r2, #2
 80098b2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData_DFU)->Init() != USBD_OK)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	4798      	blx	r3
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d001      	beq.n	80098d2 <USBD_DFU_Init+0x9e>
  {
    return (uint8_t)USBD_FAIL;
 80098ce:	2303      	movs	r3, #3
 80098d0:	e000      	b.n	80098d4 <USBD_DFU_Init+0xa0>
  }

  return (uint8_t)USBD_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	20003768 	.word	0x20003768
 80098e0:	08008000 	.word	0x08008000

080098e4 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
 80098ec:	460b      	mov	r3, r1
 80098ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData_DFU == NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 80098fa:	2302      	movs	r3, #2
 80098fc:	e021      	b.n	8009942 <USBD_DFU_DeInit+0x5e>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData_DFU;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009904:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2200      	movs	r2, #0
 800990a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	2202      	movs	r2, #2
 800991a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2200      	movs	r2, #0
 8009922:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2202      	movs	r2, #2
 800992a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData_DFU)->DeInit();
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	4798      	blx	r3
#if (0)
  USBD_free(pdev->pClassData_DFU);
#endif
  pdev->pClassData_DFU = NULL;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

  return (uint8_t)USBD_OK;
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
	...

0800994c <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b088      	sub	sp, #32
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData_DFU;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800995c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800995e:	2300      	movs	r3, #0
 8009960:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8009962:	2300      	movs	r3, #0
 8009964:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8009966:	2300      	movs	r3, #0
 8009968:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 800996a:	2300      	movs	r3, #0
 800996c:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d101      	bne.n	8009978 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8009974:	2303      	movs	r3, #3
 8009976:	e0d5      	b.n	8009b24 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009980:	2b00      	cmp	r3, #0
 8009982:	d03e      	beq.n	8009a02 <USBD_DFU_Setup+0xb6>
 8009984:	2b20      	cmp	r3, #32
 8009986:	f040 80c5 	bne.w	8009b14 <USBD_DFU_Setup+0x1c8>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	785b      	ldrb	r3, [r3, #1]
 800998e:	2b06      	cmp	r3, #6
 8009990:	d82f      	bhi.n	80099f2 <USBD_DFU_Setup+0xa6>
 8009992:	a201      	add	r2, pc, #4	; (adr r2, 8009998 <USBD_DFU_Setup+0x4c>)
 8009994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009998:	080099e9 	.word	0x080099e9
 800999c:	080099b5 	.word	0x080099b5
 80099a0:	080099bf 	.word	0x080099bf
 80099a4:	080099c9 	.word	0x080099c9
 80099a8:	080099d1 	.word	0x080099d1
 80099ac:	080099d9 	.word	0x080099d9
 80099b0:	080099e1 	.word	0x080099e1
    {
    case DFU_DNLOAD:
      DFU_Download(pdev, req);
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	6878      	ldr	r0, [r7, #4]
 80099b8:	f000 fa6c 	bl	8009e94 <DFU_Download>
      break;
 80099bc:	e020      	b.n	8009a00 <USBD_DFU_Setup+0xb4>

    case DFU_UPLOAD:
      DFU_Upload(pdev, req);
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 fad9 	bl	8009f78 <DFU_Upload>
      break;
 80099c6:	e01b      	b.n	8009a00 <USBD_DFU_Setup+0xb4>

    case DFU_GETSTATUS:
      DFU_GetStatus(pdev);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fbb5 	bl	800a138 <DFU_GetStatus>
      break;
 80099ce:	e017      	b.n	8009a00 <USBD_DFU_Setup+0xb4>

    case DFU_CLRSTATUS:
      DFU_ClearStatus(pdev);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fc67 	bl	800a2a4 <DFU_ClearStatus>
      break;
 80099d6:	e013      	b.n	8009a00 <USBD_DFU_Setup+0xb4>

    case DFU_GETSTATE:
      DFU_GetState(pdev);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fcb7 	bl	800a34c <DFU_GetState>
      break;
 80099de:	e00f      	b.n	8009a00 <USBD_DFU_Setup+0xb4>

    case DFU_ABORT:
      DFU_Abort(pdev);
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 fccb 	bl	800a37c <DFU_Abort>
      break;
 80099e6:	e00b      	b.n	8009a00 <USBD_DFU_Setup+0xb4>

    case DFU_DETACH:
      DFU_Detach(pdev, req);
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f000 f9ee 	bl	8009dcc <DFU_Detach>
      break;
 80099f0:	e006      	b.n	8009a00 <USBD_DFU_Setup+0xb4>

    default:
      USBD_CtlError(pdev, req);
 80099f2:	6839      	ldr	r1, [r7, #0]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f001 fe33 	bl	800b660 <USBD_CtlError>
      ret = USBD_FAIL;
 80099fa:	2303      	movs	r3, #3
 80099fc:	77fb      	strb	r3, [r7, #31]
      break;
 80099fe:	bf00      	nop
    }
    break;
 8009a00:	e08f      	b.n	8009b22 <USBD_DFU_Setup+0x1d6>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	785b      	ldrb	r3, [r3, #1]
 8009a06:	2b0b      	cmp	r3, #11
 8009a08:	d87b      	bhi.n	8009b02 <USBD_DFU_Setup+0x1b6>
 8009a0a:	a201      	add	r2, pc, #4	; (adr r2, 8009a10 <USBD_DFU_Setup+0xc4>)
 8009a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a10:	08009a41 	.word	0x08009a41
 8009a14:	08009b11 	.word	0x08009b11
 8009a18:	08009b03 	.word	0x08009b03
 8009a1c:	08009b03 	.word	0x08009b03
 8009a20:	08009b03 	.word	0x08009b03
 8009a24:	08009b03 	.word	0x08009b03
 8009a28:	08009a6b 	.word	0x08009a6b
 8009a2c:	08009b03 	.word	0x08009b03
 8009a30:	08009b03 	.word	0x08009b03
 8009a34:	08009b03 	.word	0x08009b03
 8009a38:	08009a95 	.word	0x08009a95
 8009a3c:	08009ac1 	.word	0x08009ac1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b03      	cmp	r3, #3
 8009a4a:	d107      	bne.n	8009a5c <USBD_DFU_Setup+0x110>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009a4c:	f107 030e 	add.w	r3, r7, #14
 8009a50:	2202      	movs	r2, #2
 8009a52:	4619      	mov	r1, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f001 fe74 	bl	800b742 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009a5a:	e05a      	b.n	8009b12 <USBD_DFU_Setup+0x1c6>
        USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f001 fdfe 	bl	800b660 <USBD_CtlError>
        ret = USBD_FAIL;
 8009a64:	2303      	movs	r3, #3
 8009a66:	77fb      	strb	r3, [r7, #31]
      break;
 8009a68:	e053      	b.n	8009b12 <USBD_DFU_Setup+0x1c6>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	885b      	ldrh	r3, [r3, #2]
 8009a6e:	0a1b      	lsrs	r3, r3, #8
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	2b21      	cmp	r3, #33	; 0x21
 8009a74:	d107      	bne.n	8009a86 <USBD_DFU_Setup+0x13a>
      {
        pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8009a76:	4b2d      	ldr	r3, [pc, #180]	; (8009b2c <USBD_DFU_Setup+0x1e0>)
 8009a78:	61bb      	str	r3, [r7, #24]
        len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	88db      	ldrh	r3, [r3, #6]
 8009a7e:	2b09      	cmp	r3, #9
 8009a80:	bf28      	it	cs
 8009a82:	2309      	movcs	r3, #9
 8009a84:	82fb      	strh	r3, [r7, #22]
      }

      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009a86:	8afb      	ldrh	r3, [r7, #22]
 8009a88:	461a      	mov	r2, r3
 8009a8a:	69b9      	ldr	r1, [r7, #24]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f001 fe58 	bl	800b742 <USBD_CtlSendData>
      break;
 8009a92:	e03e      	b.n	8009b12 <USBD_DFU_Setup+0x1c6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	2b03      	cmp	r3, #3
 8009a9e:	d108      	bne.n	8009ab2 <USBD_DFU_Setup+0x166>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f001 fe49 	bl	800b742 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009ab0:	e02f      	b.n	8009b12 <USBD_DFU_Setup+0x1c6>
        USBD_CtlError(pdev, req);
 8009ab2:	6839      	ldr	r1, [r7, #0]
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f001 fdd3 	bl	800b660 <USBD_CtlError>
        ret = USBD_FAIL;
 8009aba:	2303      	movs	r3, #3
 8009abc:	77fb      	strb	r3, [r7, #31]
      break;
 8009abe:	e028      	b.n	8009b12 <USBD_DFU_Setup+0x1c6>

    case USB_REQ_SET_INTERFACE:
      if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	885b      	ldrh	r3, [r3, #2]
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d114      	bne.n	8009af4 <USBD_DFU_Setup+0x1a8>
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	2b03      	cmp	r3, #3
 8009ad4:	d107      	bne.n	8009ae6 <USBD_DFU_Setup+0x19a>
        {
          hdfu->alt_setting = (uint8_t)(req->wValue);
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	885b      	ldrh	r3, [r3, #2]
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	461a      	mov	r2, r3
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
      {
        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009ae4:	e015      	b.n	8009b12 <USBD_DFU_Setup+0x1c6>
          USBD_CtlError(pdev, req);
 8009ae6:	6839      	ldr	r1, [r7, #0]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f001 fdb9 	bl	800b660 <USBD_CtlError>
          ret = USBD_FAIL;
 8009aee:	2303      	movs	r3, #3
 8009af0:	77fb      	strb	r3, [r7, #31]
      break;
 8009af2:	e00e      	b.n	8009b12 <USBD_DFU_Setup+0x1c6>
        USBD_CtlError(pdev, req);
 8009af4:	6839      	ldr	r1, [r7, #0]
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f001 fdb2 	bl	800b660 <USBD_CtlError>
        ret = USBD_FAIL;
 8009afc:	2303      	movs	r3, #3
 8009afe:	77fb      	strb	r3, [r7, #31]
      break;
 8009b00:	e007      	b.n	8009b12 <USBD_DFU_Setup+0x1c6>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009b02:	6839      	ldr	r1, [r7, #0]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f001 fdab 	bl	800b660 <USBD_CtlError>
      ret = USBD_FAIL;
 8009b0a:	2303      	movs	r3, #3
 8009b0c:	77fb      	strb	r3, [r7, #31]
      break;
 8009b0e:	e000      	b.n	8009b12 <USBD_DFU_Setup+0x1c6>
      break;
 8009b10:	bf00      	nop
    }
    break;
 8009b12:	e006      	b.n	8009b22 <USBD_DFU_Setup+0x1d6>

  default:
    USBD_CtlError(pdev, req);
 8009b14:	6839      	ldr	r1, [r7, #0]
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f001 fda2 	bl	800b660 <USBD_CtlError>
    ret = USBD_FAIL;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	77fb      	strb	r3, [r7, #31]
    break;
 8009b20:	bf00      	nop
  }

  return (uint8_t)ret;
 8009b22:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3720      	adds	r7, #32
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	2000045a 	.word	0x2000045a

08009b30 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b083      	sub	sp, #12
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	221b      	movs	r2, #27
 8009b3c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8009b3e:	4b03      	ldr	r3, [pc, #12]	; (8009b4c <USBD_DFU_GetCfgDesc+0x1c>)
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	20000448 	.word	0x20000448

08009b50 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8009b58:	2300      	movs	r3, #0
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	370c      	adds	r7, #12
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b088      	sub	sp, #32
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData_DFU;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009b74:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData_DFU;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8009b7c:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d101      	bne.n	8009b88 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e0ce      	b.n	8009d26 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009b8e:	2b04      	cmp	r3, #4
 8009b90:	f040 80bd 	bne.w	8009d0e <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8009b94:	69fb      	ldr	r3, [r7, #28]
 8009b96:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d17c      	bne.n	8009c98 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	f000 8093 	beq.w	8009cd0 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bb0:	2b05      	cmp	r3, #5
 8009bb2:	d15e      	bne.n	8009c72 <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	781b      	ldrb	r3, [r3, #0]
 8009bb8:	2b21      	cmp	r3, #33	; 0x21
 8009bba:	d124      	bne.n	8009c06 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	785b      	ldrb	r3, [r3, #1]
 8009bc0:	461a      	mov	r2, r3
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	789b      	ldrb	r3, [r3, #2]
 8009bd2:	021b      	lsls	r3, r3, #8
 8009bd4:	441a      	add	r2, r3
 8009bd6:	69fb      	ldr	r3, [r7, #28]
 8009bd8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009be2:	69fb      	ldr	r3, [r7, #28]
 8009be4:	78db      	ldrb	r3, [r3, #3]
 8009be6:	041b      	lsls	r3, r3, #16
 8009be8:	441a      	add	r2, r3
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	791b      	ldrb	r3, [r3, #4]
 8009bfa:	061b      	lsls	r3, r3, #24
 8009bfc:	441a      	add	r2, r3
 8009bfe:	69fb      	ldr	r3, [r7, #28]
 8009c00:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8009c04:	e064      	b.n	8009cd0 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	2b41      	cmp	r3, #65	; 0x41
 8009c0c:	d12f      	bne.n	8009c6e <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	785b      	ldrb	r3, [r3, #1]
 8009c12:	461a      	mov	r2, r3
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8009c1a:	69fb      	ldr	r3, [r7, #28]
 8009c1c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	789b      	ldrb	r3, [r3, #2]
 8009c24:	021b      	lsls	r3, r3, #8
 8009c26:	441a      	add	r2, r3
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	78db      	ldrb	r3, [r3, #3]
 8009c38:	041b      	lsls	r3, r3, #16
 8009c3a:	441a      	add	r2, r3
 8009c3c:	69fb      	ldr	r3, [r7, #28]
 8009c3e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	791b      	ldrb	r3, [r3, #4]
 8009c4c:	061b      	lsls	r3, r3, #24
 8009c4e:	441a      	add	r2, r3
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	69fa      	ldr	r2, [r7, #28]
 8009c5c:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8009c60:	4610      	mov	r0, r2
 8009c62:	4798      	blx	r3
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d032      	beq.n	8009cd0 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 8009c6a:	2303      	movs	r3, #3
 8009c6c:	e05b      	b.n	8009d26 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	e059      	b.n	8009d26 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8009c82:	2300      	movs	r3, #0
 8009c84:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8009c86:	2301      	movs	r3, #1
 8009c88:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8009c8a:	f107 030c 	add.w	r3, r7, #12
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f001 fce5 	bl	800b660 <USBD_CtlError>
 8009c96:	e01b      	b.n	8009cd0 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d916      	bls.n	8009cd0 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009ca8:	3b02      	subs	r3, #2
 8009caa:	029a      	lsls	r2, r3, #10
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8009cb2:	4413      	add	r3, r2
 8009cb4:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	69f8      	ldr	r0, [r7, #28]
 8009cbc:	6979      	ldr	r1, [r7, #20]
 8009cbe:	69fa      	ldr	r2, [r7, #28]
 8009cc0:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8009cc4:	4798      	blx	r3
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d001      	beq.n	8009cd0 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e02a      	b.n	8009d26 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8009cd0:	69fb      	ldr	r3, [r7, #28]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	2203      	movs	r2, #3
 8009ce4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8009cf8:	69fb      	ldr	r3, [r7, #28]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009d06:	69fb      	ldr	r3, [r7, #28]
 8009d08:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8009d0c:	e00a      	b.n	8009d24 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST) /* Manifestation in progress */
 8009d0e:	69fb      	ldr	r3, [r7, #28]
 8009d10:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009d14:	2b07      	cmp	r3, #7
 8009d16:	d103      	bne.n	8009d20 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fb81 	bl	800a420 <DFU_Leave>
 8009d1e:	e001      	b.n	8009d24 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e000      	b.n	8009d26 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3720      	adds	r7, #32
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b083      	sub	sp, #12
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	220a      	movs	r2, #10
 8009d50:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8009d52:	4b03      	ldr	r3, [pc, #12]	; (8009d60 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr
 8009d60:	20000464 	.word	0x20000464

08009d64 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	607a      	str	r2, [r7, #4]
 8009d70:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData_DFU;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8009d78:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8009d7a:	7afb      	ldrb	r3, [r7, #11]
 8009d7c:	2b06      	cmp	r3, #6
 8009d7e:	d808      	bhi.n	8009d92 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	4905      	ldr	r1, [pc, #20]	; (8009d9c <USBD_DFU_GetUsrStringDesc+0x38>)
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f001 fc7a 	bl	800b682 <USBD_GetString>
    return USBD_StrDesc;
 8009d8e:	4b03      	ldr	r3, [pc, #12]	; (8009d9c <USBD_DFU_GetUsrStringDesc+0x38>)
 8009d90:	e000      	b.n	8009d94 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 8009d92:	2300      	movs	r3, #0
  }
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3718      	adds	r7, #24
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}
 8009d9c:	20003b84 	.word	0x20003b84

08009da0 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009db0:	2303      	movs	r3, #3
 8009db2:	e004      	b.n	8009dbe <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData_DFU = fops;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  return (uint8_t)USBD_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
	...

08009dcc <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData_DFU;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009ddc:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d051      	beq.n	8009e88 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009dea:	2b02      	cmp	r3, #2
 8009dec:	d013      	beq.n	8009e16 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8009df4:	2b03      	cmp	r3, #3
 8009df6:	d00e      	beq.n	8009e16 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8009dfe:	2b05      	cmp	r3, #5
 8009e00:	d009      	beq.n	8009e16 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8009e08:	2b06      	cmp	r3, #6
 8009e0a:	d004      	beq.n	8009e16 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8009e12:	2b09      	cmp	r3, #9
 8009e14:	d125      	bne.n	8009e62 <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2202      	movs	r2, #2
 8009e1a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8009e62:	4b0b      	ldr	r3, [pc, #44]	; (8009e90 <DFU_Detach+0xc4>)
 8009e64:	7d5b      	ldrb	r3, [r3, #21]
 8009e66:	f003 0310 	and.w	r3, r3, #16
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d006      	beq.n	8009e7c <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 fbba 	bl	800a5e8 <USBD_Stop>
    (void)USBD_Start(pdev);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 fbab 	bl	800a5d0 <USBD_Start>
 8009e7a:	e006      	b.n	8009e8a <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	885b      	ldrh	r3, [r3, #2]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7f7 ff8b 	bl	8001d9c <HAL_Delay>
 8009e86:	e000      	b.n	8009e8a <DFU_Detach+0xbe>
    return;
 8009e88:	bf00      	nop
  }
}
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	20000448 	.word	0x20000448

08009e94 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData_DFU;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009ea4:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d061      	beq.n	8009f70 <DFU_Download+0xdc>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	88db      	ldrh	r3, [r3, #6]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d033      	beq.n	8009f1c <DFU_Download+0x88>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009eba:	2b02      	cmp	r3, #2
 8009ebc:	d004      	beq.n	8009ec8 <DFU_Download+0x34>
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009ec4:	2b05      	cmp	r3, #5
 8009ec6:	d124      	bne.n	8009f12 <DFU_Download+0x7e>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	885b      	ldrh	r3, [r3, #2]
 8009ecc:	461a      	mov	r2, r3
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	88db      	ldrh	r3, [r3, #6]
 8009ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009edc:	bf28      	it	cs
 8009ede:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2203      	movs	r2, #3
 8009ef0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8009f00:	68f9      	ldr	r1, [r7, #12]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f08:	461a      	mov	r2, r3
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f001 fc45 	bl	800b79a <USBD_CtlPrepareRx>
 8009f10:	e02f      	b.n	8009f72 <DFU_Download+0xde>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f001 fba3 	bl	800b660 <USBD_CtlError>
 8009f1a:	e02a      	b.n	8009f72 <DFU_Download+0xde>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009f22:	2b05      	cmp	r3, #5
 8009f24:	d004      	beq.n	8009f30 <DFU_Download+0x9c>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	d11a      	bne.n	8009f66 <DFU_Download+0xd2>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2206      	movs	r2, #6
 8009f3c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8009f64:	e005      	b.n	8009f72 <DFU_Download+0xde>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 fb79 	bl	800b660 <USBD_CtlError>
 8009f6e:	e000      	b.n	8009f72 <DFU_Download+0xde>
    return;
 8009f70:	bf00      	nop
    }
  }
}
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData_DFU;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f88:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData_DFU;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8009f90:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	f000 80ca 	beq.w	800a12e <DFU_Upload+0x1b6>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	88db      	ldrh	r3, [r3, #6]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f000 80ae 	beq.w	800a100 <DFU_Upload+0x188>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009faa:	2b02      	cmp	r3, #2
 8009fac:	d005      	beq.n	8009fba <DFU_Upload+0x42>
 8009fae:	697b      	ldr	r3, [r7, #20]
 8009fb0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8009fb4:	2b09      	cmp	r3, #9
 8009fb6:	f040 8096 	bne.w	800a0e6 <DFU_Upload+0x16e>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	885b      	ldrh	r3, [r3, #2]
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = MIN(req->wLength, USBD_DFU_XFER_SIZE);
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	88db      	ldrh	r3, [r3, #6]
 8009fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fce:	bf28      	it	cs
 8009fd0:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d12c      	bne.n	800a042 <DFU_Upload+0xca>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009fee:	2b03      	cmp	r3, #3
 8009ff0:	d901      	bls.n	8009ff6 <DFU_Upload+0x7e>
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	e000      	b.n	8009ff8 <DFU_Upload+0x80>
 8009ff6:	2209      	movs	r2, #9
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	2200      	movs	r2, #0
 800a026:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	2221      	movs	r2, #33	; 0x21
 800a02c:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	2241      	movs	r2, #65	; 0x41
 800a032:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	2203      	movs	r2, #3
 800a038:	4619      	mov	r1, r3
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f001 fb81 	bl	800b742 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800a040:	e076      	b.n	800a130 <DFU_Upload+0x1b8>
      }
      else if (hdfu->wblock_num > 1U)
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d931      	bls.n	800a0b0 <DFU_Upload+0x138>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	2209      	movs	r2, #9
 800a050:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	2200      	movs	r2, #0
 800a058:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	2200      	movs	r2, #0
 800a060:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a07e:	3b02      	subs	r3, #2
 800a080:	029a      	lsls	r2, r3, #10
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800a088:	4413      	add	r3, r2
 800a08a:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	695b      	ldr	r3, [r3, #20]
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	6979      	ldr	r1, [r7, #20]
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 800a09a:	4798      	blx	r3
 800a09c:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	68b9      	ldr	r1, [r7, #8]
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f001 fb4a 	bl	800b742 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 800a0ae:	e03f      	b.n	800a130 <DFU_Upload+0x1b8>
      }
      else /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	220f      	movs	r2, #15
 800a0b4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 800a0dc:	6839      	ldr	r1, [r7, #0]
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f001 fabe 	bl	800b660 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 800a0e4:	e024      	b.n	800a130 <DFU_Upload+0x1b8>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 800a0f6:	6839      	ldr	r1, [r7, #0]
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	f001 fab1 	bl	800b660 <USBD_CtlError>
 800a0fe:	e017      	b.n	800a130 <DFU_Upload+0x1b8>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	2202      	movs	r2, #2
 800a104:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800a110:	697b      	ldr	r3, [r7, #20]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 800a12c:	e000      	b.n	800a130 <DFU_Upload+0x1b8>
    return;
 800a12e:	bf00      	nop
  }
}
 800a130:	3718      	adds	r7, #24
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
	...

0800a138 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData_DFU;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a146:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData_DFU;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800a14e:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2b00      	cmp	r3, #0
 800a154:	f000 80a0 	beq.w	800a298 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a15e:	2b03      	cmp	r3, #3
 800a160:	d002      	beq.n	800a168 <DFU_GetStatus+0x30>
 800a162:	2b06      	cmp	r3, #6
 800a164:	d051      	beq.n	800a20a <DFU_GetStatus+0xd2>
      }
    }
    break;

  default:
    break;
 800a166:	e08e      	b.n	800a286 <DFU_GetStatus+0x14e>
    if (hdfu->wlength != 0U)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d034      	beq.n	800a1dc <DFU_GetStatus+0xa4>
      hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2204      	movs	r2, #4
 800a176:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d10e      	bne.n	800a1c6 <DFU_GetStatus+0x8e>
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	2b41      	cmp	r3, #65	; 0x41
 800a1ae:	d10a      	bne.n	800a1c6 <DFU_GetStatus+0x8e>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	699b      	ldr	r3, [r3, #24]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800a1c0:	2100      	movs	r1, #0
 800a1c2:	4798      	blx	r3
    break;
 800a1c4:	e05f      	b.n	800a286 <DFU_GetStatus+0x14e>
        DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 800a1d0:	68fa      	ldr	r2, [r7, #12]
 800a1d2:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	4798      	blx	r3
    break;
 800a1da:	e054      	b.n	800a286 <DFU_GetStatus+0x14e>
      hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2205      	movs	r2, #5
 800a1e0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 800a208:	e03d      	b.n	800a286 <DFU_GetStatus+0x14e>
    if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800a210:	2b01      	cmp	r3, #1
 800a212:	d116      	bne.n	800a242 <DFU_GetStatus+0x10a>
      hdfu->dev_state = DFU_STATE_MANIFEST;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2207      	movs	r2, #7
 800a218:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 1U; /*bwPollTimeout = 1ms*/
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2201      	movs	r2, #1
 800a220:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2200      	movs	r2, #0
 800a230:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 800a240:	e020      	b.n	800a284 <DFU_GetStatus+0x14c>
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d11b      	bne.n	800a284 <DFU_GetStatus+0x14c>
          (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 800a24c:	4b14      	ldr	r3, [pc, #80]	; (800a2a0 <DFU_GetStatus+0x168>)
 800a24e:	7d1b      	ldrb	r3, [r3, #20]
 800a250:	f003 0304 	and.w	r3, r3, #4
      if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 800a254:	2b00      	cmp	r3, #0
 800a256:	d015      	beq.n	800a284 <DFU_GetStatus+0x14c>
        hdfu->dev_state = DFU_STATE_IDLE;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2202      	movs	r2, #2
 800a25c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2200      	movs	r2, #0
 800a264:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    break;
 800a284:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800a28c:	2206      	movs	r2, #6
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f001 fa56 	bl	800b742 <USBD_CtlSendData>
 800a296:	e000      	b.n	800a29a <DFU_GetStatus+0x162>
    return;
 800a298:	bf00      	nop
}
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	20000448 	.word	0x20000448

0800a2a4 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData_DFU;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a2b2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d042      	beq.n	800a340 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a2c0:	2b0a      	cmp	r3, #10
 800a2c2:	d11e      	bne.n	800a302 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;              /* bwPollTimeout=0ms */
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;              /* iString */
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 800a300:	e01f      	b.n	800a342 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	220a      	movs	r2, #10
 800a306:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	220e      	movs	r2, #14
 800a30e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;              /* bwPollTimeout=0ms */
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U;              /* iString */
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 800a33e:	e000      	b.n	800a342 <DFU_ClearStatus+0x9e>
    return;
 800a340:	bf00      	nop
  }
}
 800a342:	3714      	adds	r7, #20
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData_DFU;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a35a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d008      	beq.n	800a374 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800a368:	2201      	movs	r2, #1
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f001 f9e8 	bl	800b742 <USBD_CtlSendData>
 800a372:	e000      	b.n	800a376 <DFU_GetState+0x2a>
    return;
 800a374:	bf00      	nop
}
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData_DFU;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a38a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d03f      	beq.n	800a412 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a398:	2b02      	cmp	r3, #2
 800a39a:	d013      	beq.n	800a3c4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 800a3a2:	2b03      	cmp	r3, #3
 800a3a4:	d00e      	beq.n	800a3c4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 800a3ac:	2b05      	cmp	r3, #5
 800a3ae:	d009      	beq.n	800a3c4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 800a3b6:	2b06      	cmp	r3, #6
 800a3b8:	d004      	beq.n	800a3c4 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 800a3c0:	2b09      	cmp	r3, #9
 800a3c2:	d127      	bne.n	800a414 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2202      	movs	r2, #2
 800a3c8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 800a410:	e000      	b.n	800a414 <DFU_Abort+0x98>
    return;
 800a412:	bf00      	nop
  }
}
 800a414:	3714      	adds	r7, #20
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
	...

0800a420 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b084      	sub	sp, #16
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData_DFU;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800a42e:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d03b      	beq.n	800a4ae <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2200      	movs	r2, #0
 800a43a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 800a43e:	4b1e      	ldr	r3, [pc, #120]	; (800a4b8 <DFU_Leave+0x98>)
 800a440:	7d1b      	ldrb	r3, [r3, #20]
 800a442:	f003 0304 	and.w	r3, r3, #4
 800a446:	2b00      	cmp	r3, #0
 800a448:	d016      	beq.n	800a478 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2206      	movs	r2, #6
 800a44e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	2200      	movs	r2, #0
 800a456:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 800a476:	e01b      	b.n	800a4b0 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2208      	movs	r2, #8
 800a47c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f000 f89f 	bl	800a5e8 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 800a4aa:	f7ff f9ad 	bl	8009808 <__NVIC_SystemReset>
    return;
 800a4ae:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	20000448 	.word	0x20000448

0800a4bc <USBD_Update_DFU_DESC>:

void USBD_Update_DFU_DESC(uint8_t *desc, uint8_t itf_no, uint8_t str_idx)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	70fb      	strb	r3, [r7, #3]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	70bb      	strb	r3, [r7, #2]
  desc[11] = itf_no;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	330b      	adds	r3, #11
 800a4d0:	78fa      	ldrb	r2, [r7, #3]
 800a4d2:	701a      	strb	r2, [r3, #0]
  desc[17] = str_idx;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	3311      	adds	r3, #17
 800a4d8:	78ba      	ldrb	r2, [r7, #2]
 800a4da:	701a      	strb	r2, [r3, #0]

#if (USBD_DFU_MAX_ITF_NUM > 5U)
  desc[56] = itf_no;
#endif /* (USBD_DFU_MAX_ITF_NUM > 5) */

  DFU_ITF_NBR = itf_no;
 800a4dc:	4a05      	ldr	r2, [pc, #20]	; (800a4f4 <USBD_Update_DFU_DESC+0x38>)
 800a4de:	78fb      	ldrb	r3, [r7, #3]
 800a4e0:	7013      	strb	r3, [r2, #0]
  DFU_STR_DESC_IDX = str_idx;
 800a4e2:	4a05      	ldr	r2, [pc, #20]	; (800a4f8 <USBD_Update_DFU_DESC+0x3c>)
 800a4e4:	78bb      	ldrb	r3, [r7, #2]
 800a4e6:	7013      	strb	r3, [r2, #0]
}
 800a4e8:	bf00      	nop
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr
 800a4f4:	20003764 	.word	0x20003764
 800a4f8:	2000040a 	.word	0x2000040a

0800a4fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	4613      	mov	r3, r2
 800a508:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d101      	bne.n	800a514 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a510:	2303      	movs	r3, #3
 800a512:	e01b      	b.n	800a54c <USBD_Init+0x50>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2200      	movs	r2, #0
 800a518:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pConfDesc = NULL;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	2200      	movs	r2, #0
 800a520:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d003      	beq.n	800a532 <USBD_Init+0x36>
  {
    pdev->pDesc = pdesc;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2201      	movs	r2, #1
 800a536:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	79fa      	ldrb	r2, [r7, #7]
 800a53e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f001 fa97 	bl	800ba74 <USBD_LL_Init>
 800a546:	4603      	mov	r3, r0
 800a548:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a54a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	3718      	adds	r7, #24
 800a550:	46bd      	mov	sp, r7
 800a552:	bd80      	pop	{r7, pc}

0800a554 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a55e:	2300      	movs	r3, #0
 800a560:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d101      	bne.n	800a56c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a568:	2303      	movs	r3, #3
 800a56a:	e02d      	b.n	800a5c8 <USBD_RegisterClass+0x74>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	7c1b      	ldrb	r3, [r3, #16]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d112      	bne.n	800a5a2 <USBD_RegisterClass+0x4e>
  {
	  if (pdev->pClass->GetHSConfigDescriptor != NULL)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a584:	2b00      	cmp	r3, #0
 800a586:	d01e      	beq.n	800a5c6 <USBD_RegisterClass+0x72>
	  {
		  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a590:	f107 020e 	add.w	r2, r7, #14
 800a594:	4610      	mov	r0, r2
 800a596:	4798      	blx	r3
 800a598:	4602      	mov	r2, r0
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
 800a5a0:	e011      	b.n	800a5c6 <USBD_RegisterClass+0x72>
	  }
  }
  else if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00b      	beq.n	800a5c6 <USBD_RegisterClass+0x72>
  {
	  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b6:	f107 020e 	add.w	r2, r7, #14
 800a5ba:	4610      	mov	r0, r2
 800a5bc:	4798      	blx	r3
 800a5be:	4602      	mov	r2, r0
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f8c3 2318 	str.w	r2, [r3, #792]	; 0x318
  }

  return USBD_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b082      	sub	sp, #8
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f001 faa9 	bl	800bb30 <USBD_LL_Start>
 800a5de:	4603      	mov	r3, r0
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b082      	sub	sp, #8
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f001 fab8 	bl	800bb66 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d009      	beq.n	800a614 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	6852      	ldr	r2, [r2, #4]
 800a60c:	b2d2      	uxtb	r2, r2
 800a60e:	4611      	mov	r1, r2
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	4798      	blx	r3
  }

  return USBD_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3708      	adds	r7, #8
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a61e:	b480      	push	{r7}
 800a620:	b083      	sub	sp, #12
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	460b      	mov	r3, r1
 800a63e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a640:	2303      	movs	r3, #3
 800a642:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d009      	beq.n	800a662 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	78fa      	ldrb	r2, [r7, #3]
 800a658:	4611      	mov	r1, r2
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	4798      	blx	r3
 800a65e:	4603      	mov	r3, r0
 800a660:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a662:	7bfb      	ldrb	r3, [r7, #15]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b082      	sub	sp, #8
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d007      	beq.n	800a692 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	78fa      	ldrb	r2, [r7, #3]
 800a68c:	4611      	mov	r1, r2
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	4798      	blx	r3
  }

  return USBD_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6ac:	6839      	ldr	r1, [r7, #0]
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f000 ff9c 	bl	800b5ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2201      	movs	r2, #1
 800a6b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6d0:	f003 031f 	and.w	r3, r3, #31
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d01a      	beq.n	800a70e <USBD_LL_SetupStage+0x72>
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d822      	bhi.n	800a722 <USBD_LL_SetupStage+0x86>
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <USBD_LL_SetupStage+0x4a>
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d00a      	beq.n	800a6fa <USBD_LL_SetupStage+0x5e>
 800a6e4:	e01d      	b.n	800a722 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6ec:	4619      	mov	r1, r3
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fa5c 	bl	800abac <USBD_StdDevReq>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6f8:	e020      	b.n	800a73c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 fac0 	bl	800ac88 <USBD_StdItfReq>
 800a708:	4603      	mov	r3, r0
 800a70a:	73fb      	strb	r3, [r7, #15]
      break;
 800a70c:	e016      	b.n	800a73c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a714:	4619      	mov	r1, r3
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 faff 	bl	800ad1a <USBD_StdEPReq>
 800a71c:	4603      	mov	r3, r0
 800a71e:	73fb      	strb	r3, [r7, #15]
      break;
 800a720:	e00c      	b.n	800a73c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a728:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	4619      	mov	r1, r3
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f001 fa97 	bl	800bc64 <USBD_LL_StallEP>
 800a736:	4603      	mov	r3, r0
 800a738:	73fb      	strb	r3, [r7, #15]
      break;
 800a73a:	bf00      	nop
  }

  return ret;
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b086      	sub	sp, #24
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	60f8      	str	r0, [r7, #12]
 800a74e:	460b      	mov	r3, r1
 800a750:	607a      	str	r2, [r7, #4]
 800a752:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a754:	7afb      	ldrb	r3, [r7, #11]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d138      	bne.n	800a7cc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a760:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a768:	2b03      	cmp	r3, #3
 800a76a:	d14a      	bne.n	800a802 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	689a      	ldr	r2, [r3, #8]
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	429a      	cmp	r2, r3
 800a776:	d913      	bls.n	800a7a0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	689a      	ldr	r2, [r3, #8]
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	1ad2      	subs	r2, r2, r3
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	68da      	ldr	r2, [r3, #12]
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	4293      	cmp	r3, r2
 800a790:	bf28      	it	cs
 800a792:	4613      	movcs	r3, r2
 800a794:	461a      	mov	r2, r3
 800a796:	6879      	ldr	r1, [r7, #4]
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f001 f81b 	bl	800b7d4 <USBD_CtlContinueRx>
 800a79e:	e030      	b.n	800a802 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	2b03      	cmp	r3, #3
 800a7aa:	d10b      	bne.n	800a7c4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d005      	beq.n	800a7c4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7be:	691b      	ldr	r3, [r3, #16]
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f001 f816 	bl	800b7f6 <USBD_CtlSendStatus>
 800a7ca:	e01a      	b.n	800a802 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d2:	b2db      	uxtb	r3, r3
 800a7d4:	2b03      	cmp	r3, #3
 800a7d6:	d114      	bne.n	800a802 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d00e      	beq.n	800a802 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	7afa      	ldrb	r2, [r7, #11]
 800a7ee:	4611      	mov	r1, r2
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	4798      	blx	r3
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a7f8:	7dfb      	ldrb	r3, [r7, #23]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a7fe:	7dfb      	ldrb	r3, [r7, #23]
 800a800:	e000      	b.n	800a804 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3718      	adds	r7, #24
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b086      	sub	sp, #24
 800a810:	af00      	add	r7, sp, #0
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	460b      	mov	r3, r1
 800a816:	607a      	str	r2, [r7, #4]
 800a818:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a81a:	7afb      	ldrb	r3, [r7, #11]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d16b      	bne.n	800a8f8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	3314      	adds	r3, #20
 800a824:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d156      	bne.n	800a8de <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	689a      	ldr	r2, [r3, #8]
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	429a      	cmp	r2, r3
 800a83a:	d914      	bls.n	800a866 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	689a      	ldr	r2, [r3, #8]
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	1ad2      	subs	r2, r2, r3
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	461a      	mov	r2, r3
 800a850:	6879      	ldr	r1, [r7, #4]
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f000 ff90 	bl	800b778 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a858:	2300      	movs	r3, #0
 800a85a:	2200      	movs	r2, #0
 800a85c:	2100      	movs	r1, #0
 800a85e:	68f8      	ldr	r0, [r7, #12]
 800a860:	f001 faaa 	bl	800bdb8 <USBD_LL_PrepareReceive>
 800a864:	e03b      	b.n	800a8de <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	68da      	ldr	r2, [r3, #12]
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	689b      	ldr	r3, [r3, #8]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d11c      	bne.n	800a8ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	685a      	ldr	r2, [r3, #4]
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d316      	bcc.n	800a8ac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	685a      	ldr	r2, [r3, #4]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a888:	429a      	cmp	r2, r3
 800a88a:	d20f      	bcs.n	800a8ac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a88c:	2200      	movs	r2, #0
 800a88e:	2100      	movs	r1, #0
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f000 ff71 	bl	800b778 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a89e:	2300      	movs	r3, #0
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	2100      	movs	r1, #0
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f001 fa87 	bl	800bdb8 <USBD_LL_PrepareReceive>
 800a8aa:	e018      	b.n	800a8de <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	2b03      	cmp	r3, #3
 800a8b6:	d10b      	bne.n	800a8d0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d005      	beq.n	800a8d0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	68f8      	ldr	r0, [r7, #12]
 800a8ce:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8d0:	2180      	movs	r1, #128	; 0x80
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f001 f9c6 	bl	800bc64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a8d8:	68f8      	ldr	r0, [r7, #12]
 800a8da:	f000 ff9f 	bl	800b81c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d122      	bne.n	800a92e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	f7ff fe98 	bl	800a61e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a8f6:	e01a      	b.n	800a92e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b03      	cmp	r3, #3
 800a902:	d114      	bne.n	800a92e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a90a:	695b      	ldr	r3, [r3, #20]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d00e      	beq.n	800a92e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a916:	695b      	ldr	r3, [r3, #20]
 800a918:	7afa      	ldrb	r2, [r7, #11]
 800a91a:	4611      	mov	r1, r2
 800a91c:	68f8      	ldr	r0, [r7, #12]
 800a91e:	4798      	blx	r3
 800a920:	4603      	mov	r3, r0
 800a922:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a924:	7dfb      	ldrb	r3, [r7, #23]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d001      	beq.n	800a92e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
 800a92c:	e000      	b.n	800a930 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3718      	adds	r7, #24
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2201      	movs	r2, #1
 800a944:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2200      	movs	r2, #0
 800a954:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a968:	2303      	movs	r3, #3
 800a96a:	e02a      	b.n	800a9c2 <USBD_LL_Reset+0x8a>
  }

	if (pdev->pClass->DeInit != NULL)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d009      	beq.n	800a98c <USBD_LL_Reset+0x54>
	{
	  (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	6852      	ldr	r2, [r2, #4]
 800a984:	b2d2      	uxtb	r2, r2
 800a986:	4611      	mov	r1, r2
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	4798      	blx	r3
	}

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a98c:	2340      	movs	r3, #64	; 0x40
 800a98e:	2200      	movs	r2, #0
 800a990:	2100      	movs	r1, #0
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f001 f902 	bl	800bb9c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2240      	movs	r2, #64	; 0x40
 800a9a4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a9a8:	2340      	movs	r3, #64	; 0x40
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	2180      	movs	r1, #128	; 0x80
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f001 f8f4 	bl	800bb9c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2240      	movs	r2, #64	; 0x40
 800a9be:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b083      	sub	sp, #12
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	78fa      	ldrb	r2, [r7, #3]
 800a9da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a9dc:	2300      	movs	r3, #0
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	370c      	adds	r7, #12
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e8:	4770      	bx	lr

0800a9ea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b083      	sub	sp, #12
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9f8:	b2da      	uxtb	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2204      	movs	r2, #4
 800aa04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	370c      	adds	r7, #12
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr

0800aa16 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa16:	b480      	push	{r7}
 800aa18:	b083      	sub	sp, #12
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b04      	cmp	r3, #4
 800aa28:	d106      	bne.n	800aa38 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aa38:	2300      	movs	r3, #0
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b082      	sub	sp, #8
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d101      	bne.n	800aa5c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	e012      	b.n	800aa82 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa62:	b2db      	uxtb	r3, r3
 800aa64:	2b03      	cmp	r3, #3
 800aa66:	d10b      	bne.n	800aa80 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa6e:	69db      	ldr	r3, [r3, #28]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d005      	beq.n	800aa80 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa7a:	69db      	ldr	r3, [r3, #28]
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b082      	sub	sp, #8
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	460b      	mov	r3, r1
 800aa94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d101      	bne.n	800aaa4 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800aaa0:	2303      	movs	r3, #3
 800aaa2:	e014      	b.n	800aace <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaaa:	b2db      	uxtb	r3, r3
 800aaac:	2b03      	cmp	r3, #3
 800aaae:	d10d      	bne.n	800aacc <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab6:	6a1b      	ldr	r3, [r3, #32]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d007      	beq.n	800aacc <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac2:	6a1b      	ldr	r3, [r3, #32]
 800aac4:	78fa      	ldrb	r2, [r7, #3]
 800aac6:	4611      	mov	r1, r2
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aacc:	2300      	movs	r3, #0
}
 800aace:	4618      	mov	r0, r3
 800aad0:	3708      	adds	r7, #8
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd80      	pop	{r7, pc}

0800aad6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b082      	sub	sp, #8
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	460b      	mov	r3, r1
 800aae0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d101      	bne.n	800aaf0 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800aaec:	2303      	movs	r3, #3
 800aaee:	e014      	b.n	800ab1a <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	2b03      	cmp	r3, #3
 800aafa:	d10d      	bne.n	800ab18 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d007      	beq.n	800ab18 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	78fa      	ldrb	r2, [r7, #3]
 800ab12:	4611      	mov	r1, r2
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab18:	2300      	movs	r3, #0
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b083      	sub	sp, #12
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d009      	beq.n	800ab66 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	687a      	ldr	r2, [r7, #4]
 800ab5c:	6852      	ldr	r2, [r2, #4]
 800ab5e:	b2d2      	uxtb	r2, r2
 800ab60:	4611      	mov	r1, r2
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	4798      	blx	r3
  }

  return USBD_OK;
 800ab66:	2300      	movs	r3, #0
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ab70:	b480      	push	{r7}
 800ab72:	b087      	sub	sp, #28
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	3301      	adds	r3, #1
 800ab86:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ab8e:	8a3b      	ldrh	r3, [r7, #16]
 800ab90:	021b      	lsls	r3, r3, #8
 800ab92:	b21a      	sxth	r2, r3
 800ab94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	b21b      	sxth	r3, r3
 800ab9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ab9e:	89fb      	ldrh	r3, [r7, #14]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	371c      	adds	r7, #28
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abb6:	2300      	movs	r3, #0
 800abb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abc2:	2b40      	cmp	r3, #64	; 0x40
 800abc4:	d005      	beq.n	800abd2 <USBD_StdDevReq+0x26>
 800abc6:	2b40      	cmp	r3, #64	; 0x40
 800abc8:	d853      	bhi.n	800ac72 <USBD_StdDevReq+0xc6>
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d00b      	beq.n	800abe6 <USBD_StdDevReq+0x3a>
 800abce:	2b20      	cmp	r3, #32
 800abd0:	d14f      	bne.n	800ac72 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	6839      	ldr	r1, [r7, #0]
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	4798      	blx	r3
 800abe0:	4603      	mov	r3, r0
 800abe2:	73fb      	strb	r3, [r7, #15]
      break;
 800abe4:	e04a      	b.n	800ac7c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	785b      	ldrb	r3, [r3, #1]
 800abea:	2b09      	cmp	r3, #9
 800abec:	d83b      	bhi.n	800ac66 <USBD_StdDevReq+0xba>
 800abee:	a201      	add	r2, pc, #4	; (adr r2, 800abf4 <USBD_StdDevReq+0x48>)
 800abf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf4:	0800ac49 	.word	0x0800ac49
 800abf8:	0800ac5d 	.word	0x0800ac5d
 800abfc:	0800ac67 	.word	0x0800ac67
 800ac00:	0800ac53 	.word	0x0800ac53
 800ac04:	0800ac67 	.word	0x0800ac67
 800ac08:	0800ac27 	.word	0x0800ac27
 800ac0c:	0800ac1d 	.word	0x0800ac1d
 800ac10:	0800ac67 	.word	0x0800ac67
 800ac14:	0800ac3f 	.word	0x0800ac3f
 800ac18:	0800ac31 	.word	0x0800ac31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ac1c:	6839      	ldr	r1, [r7, #0]
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f9de 	bl	800afe0 <USBD_GetDescriptor>
          break;
 800ac24:	e024      	b.n	800ac70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ac26:	6839      	ldr	r1, [r7, #0]
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f000 fb55 	bl	800b2d8 <USBD_SetAddress>
          break;
 800ac2e:	e01f      	b.n	800ac70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ac30:	6839      	ldr	r1, [r7, #0]
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fb94 	bl	800b360 <USBD_SetConfig>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	73fb      	strb	r3, [r7, #15]
          break;
 800ac3c:	e018      	b.n	800ac70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 fc33 	bl	800b4ac <USBD_GetConfig>
          break;
 800ac46:	e013      	b.n	800ac70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ac48:	6839      	ldr	r1, [r7, #0]
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 fc64 	bl	800b518 <USBD_GetStatus>
          break;
 800ac50:	e00e      	b.n	800ac70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ac52:	6839      	ldr	r1, [r7, #0]
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fc93 	bl	800b580 <USBD_SetFeature>
          break;
 800ac5a:	e009      	b.n	800ac70 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ac5c:	6839      	ldr	r1, [r7, #0]
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fca2 	bl	800b5a8 <USBD_ClrFeature>
          break;
 800ac64:	e004      	b.n	800ac70 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ac66:	6839      	ldr	r1, [r7, #0]
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f000 fcf9 	bl	800b660 <USBD_CtlError>
          break;
 800ac6e:	bf00      	nop
      }
      break;
 800ac70:	e004      	b.n	800ac7c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ac72:	6839      	ldr	r1, [r7, #0]
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 fcf3 	bl	800b660 <USBD_CtlError>
      break;
 800ac7a:	bf00      	nop
  }

  return ret;
 800ac7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop

0800ac88 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac92:	2300      	movs	r3, #0
 800ac94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ac9e:	2b40      	cmp	r3, #64	; 0x40
 800aca0:	d005      	beq.n	800acae <USBD_StdItfReq+0x26>
 800aca2:	2b40      	cmp	r3, #64	; 0x40
 800aca4:	d82f      	bhi.n	800ad06 <USBD_StdItfReq+0x7e>
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <USBD_StdItfReq+0x26>
 800acaa:	2b20      	cmp	r3, #32
 800acac:	d12b      	bne.n	800ad06 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	3b01      	subs	r3, #1
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d81d      	bhi.n	800acf8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	889b      	ldrh	r3, [r3, #4]
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	2b0f      	cmp	r3, #15
 800acc4:	d813      	bhi.n	800acee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	6839      	ldr	r1, [r7, #0]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	4798      	blx	r3
 800acd4:	4603      	mov	r3, r0
 800acd6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	88db      	ldrh	r3, [r3, #6]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d110      	bne.n	800ad02 <USBD_StdItfReq+0x7a>
 800ace0:	7bfb      	ldrb	r3, [r7, #15]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d10d      	bne.n	800ad02 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f000 fd85 	bl	800b7f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800acec:	e009      	b.n	800ad02 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800acee:	6839      	ldr	r1, [r7, #0]
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 fcb5 	bl	800b660 <USBD_CtlError>
          break;
 800acf6:	e004      	b.n	800ad02 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800acf8:	6839      	ldr	r1, [r7, #0]
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fcb0 	bl	800b660 <USBD_CtlError>
          break;
 800ad00:	e000      	b.n	800ad04 <USBD_StdItfReq+0x7c>
          break;
 800ad02:	bf00      	nop
      }
      break;
 800ad04:	e004      	b.n	800ad10 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ad06:	6839      	ldr	r1, [r7, #0]
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 fca9 	bl	800b660 <USBD_CtlError>
      break;
 800ad0e:	bf00      	nop
  }

  return ret;
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b084      	sub	sp, #16
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ad24:	2300      	movs	r3, #0
 800ad26:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	889b      	ldrh	r3, [r3, #4]
 800ad2c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad36:	2b40      	cmp	r3, #64	; 0x40
 800ad38:	d007      	beq.n	800ad4a <USBD_StdEPReq+0x30>
 800ad3a:	2b40      	cmp	r3, #64	; 0x40
 800ad3c:	f200 8145 	bhi.w	800afca <USBD_StdEPReq+0x2b0>
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00c      	beq.n	800ad5e <USBD_StdEPReq+0x44>
 800ad44:	2b20      	cmp	r3, #32
 800ad46:	f040 8140 	bne.w	800afca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad50:	689b      	ldr	r3, [r3, #8]
 800ad52:	6839      	ldr	r1, [r7, #0]
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	4798      	blx	r3
 800ad58:	4603      	mov	r3, r0
 800ad5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ad5c:	e13a      	b.n	800afd4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	785b      	ldrb	r3, [r3, #1]
 800ad62:	2b03      	cmp	r3, #3
 800ad64:	d007      	beq.n	800ad76 <USBD_StdEPReq+0x5c>
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	f300 8129 	bgt.w	800afbe <USBD_StdEPReq+0x2a4>
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d07f      	beq.n	800ae70 <USBD_StdEPReq+0x156>
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d03c      	beq.n	800adee <USBD_StdEPReq+0xd4>
 800ad74:	e123      	b.n	800afbe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	2b02      	cmp	r3, #2
 800ad80:	d002      	beq.n	800ad88 <USBD_StdEPReq+0x6e>
 800ad82:	2b03      	cmp	r3, #3
 800ad84:	d016      	beq.n	800adb4 <USBD_StdEPReq+0x9a>
 800ad86:	e02c      	b.n	800ade2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ad88:	7bbb      	ldrb	r3, [r7, #14]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00d      	beq.n	800adaa <USBD_StdEPReq+0x90>
 800ad8e:	7bbb      	ldrb	r3, [r7, #14]
 800ad90:	2b80      	cmp	r3, #128	; 0x80
 800ad92:	d00a      	beq.n	800adaa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ad94:	7bbb      	ldrb	r3, [r7, #14]
 800ad96:	4619      	mov	r1, r3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 ff63 	bl	800bc64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad9e:	2180      	movs	r1, #128	; 0x80
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 ff5f 	bl	800bc64 <USBD_LL_StallEP>
 800ada6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ada8:	e020      	b.n	800adec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800adaa:	6839      	ldr	r1, [r7, #0]
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 fc57 	bl	800b660 <USBD_CtlError>
              break;
 800adb2:	e01b      	b.n	800adec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	885b      	ldrh	r3, [r3, #2]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10e      	bne.n	800adda <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800adbc:	7bbb      	ldrb	r3, [r7, #14]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00b      	beq.n	800adda <USBD_StdEPReq+0xc0>
 800adc2:	7bbb      	ldrb	r3, [r7, #14]
 800adc4:	2b80      	cmp	r3, #128	; 0x80
 800adc6:	d008      	beq.n	800adda <USBD_StdEPReq+0xc0>
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	88db      	ldrh	r3, [r3, #6]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d104      	bne.n	800adda <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800add0:	7bbb      	ldrb	r3, [r7, #14]
 800add2:	4619      	mov	r1, r3
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 ff45 	bl	800bc64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fd0b 	bl	800b7f6 <USBD_CtlSendStatus>

              break;
 800ade0:	e004      	b.n	800adec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ade2:	6839      	ldr	r1, [r7, #0]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fc3b 	bl	800b660 <USBD_CtlError>
              break;
 800adea:	bf00      	nop
          }
          break;
 800adec:	e0ec      	b.n	800afc8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d002      	beq.n	800ae00 <USBD_StdEPReq+0xe6>
 800adfa:	2b03      	cmp	r3, #3
 800adfc:	d016      	beq.n	800ae2c <USBD_StdEPReq+0x112>
 800adfe:	e030      	b.n	800ae62 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae00:	7bbb      	ldrb	r3, [r7, #14]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00d      	beq.n	800ae22 <USBD_StdEPReq+0x108>
 800ae06:	7bbb      	ldrb	r3, [r7, #14]
 800ae08:	2b80      	cmp	r3, #128	; 0x80
 800ae0a:	d00a      	beq.n	800ae22 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae0c:	7bbb      	ldrb	r3, [r7, #14]
 800ae0e:	4619      	mov	r1, r3
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 ff27 	bl	800bc64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae16:	2180      	movs	r1, #128	; 0x80
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 ff23 	bl	800bc64 <USBD_LL_StallEP>
 800ae1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae20:	e025      	b.n	800ae6e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ae22:	6839      	ldr	r1, [r7, #0]
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fc1b 	bl	800b660 <USBD_CtlError>
              break;
 800ae2a:	e020      	b.n	800ae6e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	885b      	ldrh	r3, [r3, #2]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d11b      	bne.n	800ae6c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ae34:	7bbb      	ldrb	r3, [r7, #14]
 800ae36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d004      	beq.n	800ae48 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ae3e:	7bbb      	ldrb	r3, [r7, #14]
 800ae40:	4619      	mov	r1, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 ff2d 	bl	800bca2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 fcd4 	bl	800b7f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	4798      	blx	r3
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ae60:	e004      	b.n	800ae6c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ae62:	6839      	ldr	r1, [r7, #0]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fbfb 	bl	800b660 <USBD_CtlError>
              break;
 800ae6a:	e000      	b.n	800ae6e <USBD_StdEPReq+0x154>
              break;
 800ae6c:	bf00      	nop
          }
          break;
 800ae6e:	e0ab      	b.n	800afc8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	d002      	beq.n	800ae82 <USBD_StdEPReq+0x168>
 800ae7c:	2b03      	cmp	r3, #3
 800ae7e:	d032      	beq.n	800aee6 <USBD_StdEPReq+0x1cc>
 800ae80:	e097      	b.n	800afb2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae82:	7bbb      	ldrb	r3, [r7, #14]
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d007      	beq.n	800ae98 <USBD_StdEPReq+0x17e>
 800ae88:	7bbb      	ldrb	r3, [r7, #14]
 800ae8a:	2b80      	cmp	r3, #128	; 0x80
 800ae8c:	d004      	beq.n	800ae98 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ae8e:	6839      	ldr	r1, [r7, #0]
 800ae90:	6878      	ldr	r0, [r7, #4]
 800ae92:	f000 fbe5 	bl	800b660 <USBD_CtlError>
                break;
 800ae96:	e091      	b.n	800afbc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ae98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	da0b      	bge.n	800aeb8 <USBD_StdEPReq+0x19e>
 800aea0:	7bbb      	ldrb	r3, [r7, #14]
 800aea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aea6:	4613      	mov	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4413      	add	r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	3310      	adds	r3, #16
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	e00b      	b.n	800aed0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aeb8:	7bbb      	ldrb	r3, [r7, #14]
 800aeba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aebe:	4613      	mov	r3, r2
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4413      	add	r3, r2
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	4413      	add	r3, r2
 800aece:	3304      	adds	r3, #4
 800aed0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	2200      	movs	r2, #0
 800aed6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	2202      	movs	r2, #2
 800aedc:	4619      	mov	r1, r3
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 fc2f 	bl	800b742 <USBD_CtlSendData>
              break;
 800aee4:	e06a      	b.n	800afbc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800aee6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	da11      	bge.n	800af12 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aeee:	7bbb      	ldrb	r3, [r7, #14]
 800aef0:	f003 020f 	and.w	r2, r3, #15
 800aef4:	6879      	ldr	r1, [r7, #4]
 800aef6:	4613      	mov	r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	4413      	add	r3, r2
 800aefc:	009b      	lsls	r3, r3, #2
 800aefe:	440b      	add	r3, r1
 800af00:	3324      	adds	r3, #36	; 0x24
 800af02:	881b      	ldrh	r3, [r3, #0]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d117      	bne.n	800af38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800af08:	6839      	ldr	r1, [r7, #0]
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 fba8 	bl	800b660 <USBD_CtlError>
                  break;
 800af10:	e054      	b.n	800afbc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af12:	7bbb      	ldrb	r3, [r7, #14]
 800af14:	f003 020f 	and.w	r2, r3, #15
 800af18:	6879      	ldr	r1, [r7, #4]
 800af1a:	4613      	mov	r3, r2
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4413      	add	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	440b      	add	r3, r1
 800af24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af28:	881b      	ldrh	r3, [r3, #0]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d104      	bne.n	800af38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 fb95 	bl	800b660 <USBD_CtlError>
                  break;
 800af36:	e041      	b.n	800afbc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	da0b      	bge.n	800af58 <USBD_StdEPReq+0x23e>
 800af40:	7bbb      	ldrb	r3, [r7, #14]
 800af42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af46:	4613      	mov	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4413      	add	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	3310      	adds	r3, #16
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	4413      	add	r3, r2
 800af54:	3304      	adds	r3, #4
 800af56:	e00b      	b.n	800af70 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af58:	7bbb      	ldrb	r3, [r7, #14]
 800af5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af5e:	4613      	mov	r3, r2
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	4413      	add	r3, r2
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	4413      	add	r3, r2
 800af6e:	3304      	adds	r3, #4
 800af70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800af72:	7bbb      	ldrb	r3, [r7, #14]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d002      	beq.n	800af7e <USBD_StdEPReq+0x264>
 800af78:	7bbb      	ldrb	r3, [r7, #14]
 800af7a:	2b80      	cmp	r3, #128	; 0x80
 800af7c:	d103      	bne.n	800af86 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2200      	movs	r2, #0
 800af82:	601a      	str	r2, [r3, #0]
 800af84:	e00e      	b.n	800afa4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800af86:	7bbb      	ldrb	r3, [r7, #14]
 800af88:	4619      	mov	r1, r3
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fea8 	bl	800bce0 <USBD_LL_IsStallEP>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d003      	beq.n	800af9e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	2201      	movs	r2, #1
 800af9a:	601a      	str	r2, [r3, #0]
 800af9c:	e002      	b.n	800afa4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	2200      	movs	r2, #0
 800afa2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	2202      	movs	r2, #2
 800afa8:	4619      	mov	r1, r3
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fbc9 	bl	800b742 <USBD_CtlSendData>
              break;
 800afb0:	e004      	b.n	800afbc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 fb53 	bl	800b660 <USBD_CtlError>
              break;
 800afba:	bf00      	nop
          }
          break;
 800afbc:	e004      	b.n	800afc8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 fb4d 	bl	800b660 <USBD_CtlError>
          break;
 800afc6:	bf00      	nop
      }
      break;
 800afc8:	e004      	b.n	800afd4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 fb47 	bl	800b660 <USBD_CtlError>
      break;
 800afd2:	bf00      	nop
  }

  return ret;
 800afd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
	...

0800afe0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800afea:	2300      	movs	r3, #0
 800afec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800afee:	2300      	movs	r3, #0
 800aff0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aff2:	2300      	movs	r3, #0
 800aff4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	885b      	ldrh	r3, [r3, #2]
 800affa:	0a1b      	lsrs	r3, r3, #8
 800affc:	b29b      	uxth	r3, r3
 800affe:	3b01      	subs	r3, #1
 800b000:	2b06      	cmp	r3, #6
 800b002:	f200 813b 	bhi.w	800b27c <USBD_GetDescriptor+0x29c>
 800b006:	a201      	add	r2, pc, #4	; (adr r2, 800b00c <USBD_GetDescriptor+0x2c>)
 800b008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b00c:	0800b029 	.word	0x0800b029
 800b010:	0800b041 	.word	0x0800b041
 800b014:	0800b081 	.word	0x0800b081
 800b018:	0800b27d 	.word	0x0800b27d
 800b01c:	0800b27d 	.word	0x0800b27d
 800b020:	0800b21d 	.word	0x0800b21d
 800b024:	0800b249 	.word	0x0800b249
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	7c12      	ldrb	r2, [r2, #16]
 800b034:	f107 0108 	add.w	r1, r7, #8
 800b038:	4610      	mov	r0, r2
 800b03a:	4798      	blx	r3
 800b03c:	60f8      	str	r0, [r7, #12]
      break;
 800b03e:	e125      	b.n	800b28c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	7c1b      	ldrb	r3, [r3, #16]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d10d      	bne.n	800b064 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b050:	f107 0208 	add.w	r2, r7, #8
 800b054:	4610      	mov	r0, r2
 800b056:	4798      	blx	r3
 800b058:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	3301      	adds	r3, #1
 800b05e:	2202      	movs	r2, #2
 800b060:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b062:	e113      	b.n	800b28c <USBD_GetDescriptor+0x2ac>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b06c:	f107 0208 	add.w	r2, r7, #8
 800b070:	4610      	mov	r0, r2
 800b072:	4798      	blx	r3
 800b074:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	3301      	adds	r3, #1
 800b07a:	2202      	movs	r2, #2
 800b07c:	701a      	strb	r2, [r3, #0]
      break;
 800b07e:	e105      	b.n	800b28c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	885b      	ldrh	r3, [r3, #2]
 800b084:	b2db      	uxtb	r3, r3
 800b086:	2b05      	cmp	r3, #5
 800b088:	f200 80ac 	bhi.w	800b1e4 <USBD_GetDescriptor+0x204>
 800b08c:	a201      	add	r2, pc, #4	; (adr r2, 800b094 <USBD_GetDescriptor+0xb4>)
 800b08e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b092:	bf00      	nop
 800b094:	0800b0ad 	.word	0x0800b0ad
 800b098:	0800b0e1 	.word	0x0800b0e1
 800b09c:	0800b115 	.word	0x0800b115
 800b0a0:	0800b149 	.word	0x0800b149
 800b0a4:	0800b17d 	.word	0x0800b17d
 800b0a8:	0800b1b1 	.word	0x0800b1b1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d00b      	beq.n	800b0d0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	7c12      	ldrb	r2, [r2, #16]
 800b0c4:	f107 0108 	add.w	r1, r7, #8
 800b0c8:	4610      	mov	r0, r2
 800b0ca:	4798      	blx	r3
 800b0cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b0ce:	e0a4      	b.n	800b21a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fac4 	bl	800b660 <USBD_CtlError>
            err++;
 800b0d8:	7afb      	ldrb	r3, [r7, #11]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b0de:	e09c      	b.n	800b21a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0e6:	689b      	ldr	r3, [r3, #8]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00b      	beq.n	800b104 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b0f2:	689b      	ldr	r3, [r3, #8]
 800b0f4:	687a      	ldr	r2, [r7, #4]
 800b0f6:	7c12      	ldrb	r2, [r2, #16]
 800b0f8:	f107 0108 	add.w	r1, r7, #8
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	4798      	blx	r3
 800b100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b102:	e08a      	b.n	800b21a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b104:	6839      	ldr	r1, [r7, #0]
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f000 faaa 	bl	800b660 <USBD_CtlError>
            err++;
 800b10c:	7afb      	ldrb	r3, [r7, #11]
 800b10e:	3301      	adds	r3, #1
 800b110:	72fb      	strb	r3, [r7, #11]
          break;
 800b112:	e082      	b.n	800b21a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00b      	beq.n	800b138 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	7c12      	ldrb	r2, [r2, #16]
 800b12c:	f107 0108 	add.w	r1, r7, #8
 800b130:	4610      	mov	r0, r2
 800b132:	4798      	blx	r3
 800b134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b136:	e070      	b.n	800b21a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b138:	6839      	ldr	r1, [r7, #0]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fa90 	bl	800b660 <USBD_CtlError>
            err++;
 800b140:	7afb      	ldrb	r3, [r7, #11]
 800b142:	3301      	adds	r3, #1
 800b144:	72fb      	strb	r3, [r7, #11]
          break;
 800b146:	e068      	b.n	800b21a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b14e:	691b      	ldr	r3, [r3, #16]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d00b      	beq.n	800b16c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b15a:	691b      	ldr	r3, [r3, #16]
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	7c12      	ldrb	r2, [r2, #16]
 800b160:	f107 0108 	add.w	r1, r7, #8
 800b164:	4610      	mov	r0, r2
 800b166:	4798      	blx	r3
 800b168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b16a:	e056      	b.n	800b21a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b16c:	6839      	ldr	r1, [r7, #0]
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 fa76 	bl	800b660 <USBD_CtlError>
            err++;
 800b174:	7afb      	ldrb	r3, [r7, #11]
 800b176:	3301      	adds	r3, #1
 800b178:	72fb      	strb	r3, [r7, #11]
          break;
 800b17a:	e04e      	b.n	800b21a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b182:	695b      	ldr	r3, [r3, #20]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d00b      	beq.n	800b1a0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b18e:	695b      	ldr	r3, [r3, #20]
 800b190:	687a      	ldr	r2, [r7, #4]
 800b192:	7c12      	ldrb	r2, [r2, #16]
 800b194:	f107 0108 	add.w	r1, r7, #8
 800b198:	4610      	mov	r0, r2
 800b19a:	4798      	blx	r3
 800b19c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b19e:	e03c      	b.n	800b21a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b1a0:	6839      	ldr	r1, [r7, #0]
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 fa5c 	bl	800b660 <USBD_CtlError>
            err++;
 800b1a8:	7afb      	ldrb	r3, [r7, #11]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b1ae:	e034      	b.n	800b21a <USBD_GetDescriptor+0x23a>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1b6:	699b      	ldr	r3, [r3, #24]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00b      	beq.n	800b1d4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1c2:	699b      	ldr	r3, [r3, #24]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	7c12      	ldrb	r2, [r2, #16]
 800b1c8:	f107 0108 	add.w	r1, r7, #8
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	4798      	blx	r3
 800b1d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1d2:	e022      	b.n	800b21a <USBD_GetDescriptor+0x23a>
            USBD_CtlError(pdev, req);
 800b1d4:	6839      	ldr	r1, [r7, #0]
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fa42 	bl	800b660 <USBD_CtlError>
            err++;
 800b1dc:	7afb      	ldrb	r3, [r7, #11]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b1e2:	e01a      	b.n	800b21a <USBD_GetDescriptor+0x23a>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00c      	beq.n	800b20a <USBD_GetDescriptor+0x22a>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1f8:	683a      	ldr	r2, [r7, #0]
 800b1fa:	8852      	ldrh	r2, [r2, #2]
 800b1fc:	b2d1      	uxtb	r1, r2
 800b1fe:	f107 0208 	add.w	r2, r7, #8
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	4798      	blx	r3
 800b206:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 800b208:	e006      	b.n	800b218 <USBD_GetDescriptor+0x238>
            USBD_CtlError(pdev, req);
 800b20a:	6839      	ldr	r1, [r7, #0]
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 fa27 	bl	800b660 <USBD_CtlError>
            err++;
 800b212:	7afb      	ldrb	r3, [r7, #11]
 800b214:	3301      	adds	r3, #1
 800b216:	72fb      	strb	r3, [r7, #11]
          break;
 800b218:	bf00      	nop
      }
      break;
 800b21a:	e037      	b.n	800b28c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	7c1b      	ldrb	r3, [r3, #16]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d109      	bne.n	800b238 <USBD_GetDescriptor+0x258>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b22a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b22c:	f107 0208 	add.w	r2, r7, #8
 800b230:	4610      	mov	r0, r2
 800b232:	4798      	blx	r3
 800b234:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b236:	e029      	b.n	800b28c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800b238:	6839      	ldr	r1, [r7, #0]
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 fa10 	bl	800b660 <USBD_CtlError>
        err++;
 800b240:	7afb      	ldrb	r3, [r7, #11]
 800b242:	3301      	adds	r3, #1
 800b244:	72fb      	strb	r3, [r7, #11]
      break;
 800b246:	e021      	b.n	800b28c <USBD_GetDescriptor+0x2ac>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	7c1b      	ldrb	r3, [r3, #16]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d10d      	bne.n	800b26c <USBD_GetDescriptor+0x28c>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b258:	f107 0208 	add.w	r2, r7, #8
 800b25c:	4610      	mov	r0, r2
 800b25e:	4798      	blx	r3
 800b260:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	3301      	adds	r3, #1
 800b266:	2207      	movs	r2, #7
 800b268:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b26a:	e00f      	b.n	800b28c <USBD_GetDescriptor+0x2ac>
        USBD_CtlError(pdev, req);
 800b26c:	6839      	ldr	r1, [r7, #0]
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f000 f9f6 	bl	800b660 <USBD_CtlError>
        err++;
 800b274:	7afb      	ldrb	r3, [r7, #11]
 800b276:	3301      	adds	r3, #1
 800b278:	72fb      	strb	r3, [r7, #11]
      break;
 800b27a:	e007      	b.n	800b28c <USBD_GetDescriptor+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f9ee 	bl	800b660 <USBD_CtlError>
      err++;
 800b284:	7afb      	ldrb	r3, [r7, #11]
 800b286:	3301      	adds	r3, #1
 800b288:	72fb      	strb	r3, [r7, #11]
      break;
 800b28a:	bf00      	nop
  }

  if (err != 0U)
 800b28c:	7afb      	ldrb	r3, [r7, #11]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d11e      	bne.n	800b2d0 <USBD_GetDescriptor+0x2f0>
  {
    return;
  }

  if (req->wLength != 0U)
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	88db      	ldrh	r3, [r3, #6]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d016      	beq.n	800b2c8 <USBD_GetDescriptor+0x2e8>
  {
    if (len != 0U)
 800b29a:	893b      	ldrh	r3, [r7, #8]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d00e      	beq.n	800b2be <USBD_GetDescriptor+0x2de>
    {
      len = MIN(len, req->wLength);
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	88da      	ldrh	r2, [r3, #6]
 800b2a4:	893b      	ldrh	r3, [r7, #8]
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	bf28      	it	cs
 800b2aa:	4613      	movcs	r3, r2
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b2b0:	893b      	ldrh	r3, [r7, #8]
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	68f9      	ldr	r1, [r7, #12]
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 fa43 	bl	800b742 <USBD_CtlSendData>
 800b2bc:	e009      	b.n	800b2d2 <USBD_GetDescriptor+0x2f2>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b2be:	6839      	ldr	r1, [r7, #0]
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f9cd 	bl	800b660 <USBD_CtlError>
 800b2c6:	e004      	b.n	800b2d2 <USBD_GetDescriptor+0x2f2>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f000 fa94 	bl	800b7f6 <USBD_CtlSendStatus>
 800b2ce:	e000      	b.n	800b2d2 <USBD_GetDescriptor+0x2f2>
    return;
 800b2d0:	bf00      	nop
  }
}
 800b2d2:	3710      	adds	r7, #16
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	889b      	ldrh	r3, [r3, #4]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d131      	bne.n	800b34e <USBD_SetAddress+0x76>
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	88db      	ldrh	r3, [r3, #6]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d12d      	bne.n	800b34e <USBD_SetAddress+0x76>
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	885b      	ldrh	r3, [r3, #2]
 800b2f6:	2b7f      	cmp	r3, #127	; 0x7f
 800b2f8:	d829      	bhi.n	800b34e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	885b      	ldrh	r3, [r3, #2]
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b304:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b30c:	b2db      	uxtb	r3, r3
 800b30e:	2b03      	cmp	r3, #3
 800b310:	d104      	bne.n	800b31c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 f9a3 	bl	800b660 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b31a:	e01d      	b.n	800b358 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	7bfa      	ldrb	r2, [r7, #15]
 800b320:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b324:	7bfb      	ldrb	r3, [r7, #15]
 800b326:	4619      	mov	r1, r3
 800b328:	6878      	ldr	r0, [r7, #4]
 800b32a:	f000 fd05 	bl	800bd38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f000 fa61 	bl	800b7f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b334:	7bfb      	ldrb	r3, [r7, #15]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d004      	beq.n	800b344 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2202      	movs	r2, #2
 800b33e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b342:	e009      	b.n	800b358 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b34c:	e004      	b.n	800b358 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b34e:	6839      	ldr	r1, [r7, #0]
 800b350:	6878      	ldr	r0, [r7, #4]
 800b352:	f000 f985 	bl	800b660 <USBD_CtlError>
  }
}
 800b356:	bf00      	nop
 800b358:	bf00      	nop
 800b35a:	3710      	adds	r7, #16
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}

0800b360 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b084      	sub	sp, #16
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b36a:	2300      	movs	r3, #0
 800b36c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	885b      	ldrh	r3, [r3, #2]
 800b372:	b2da      	uxtb	r2, r3
 800b374:	4b4c      	ldr	r3, [pc, #304]	; (800b4a8 <USBD_SetConfig+0x148>)
 800b376:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b378:	4b4b      	ldr	r3, [pc, #300]	; (800b4a8 <USBD_SetConfig+0x148>)
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d905      	bls.n	800b38c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 f96c 	bl	800b660 <USBD_CtlError>
    return USBD_FAIL;
 800b388:	2303      	movs	r3, #3
 800b38a:	e088      	b.n	800b49e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b02      	cmp	r3, #2
 800b396:	d002      	beq.n	800b39e <USBD_SetConfig+0x3e>
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d025      	beq.n	800b3e8 <USBD_SetConfig+0x88>
 800b39c:	e071      	b.n	800b482 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b39e:	4b42      	ldr	r3, [pc, #264]	; (800b4a8 <USBD_SetConfig+0x148>)
 800b3a0:	781b      	ldrb	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d01c      	beq.n	800b3e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b3a6:	4b40      	ldr	r3, [pc, #256]	; (800b4a8 <USBD_SetConfig+0x148>)
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b3b0:	4b3d      	ldr	r3, [pc, #244]	; (800b4a8 <USBD_SetConfig+0x148>)
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7ff f93c 	bl	800a634 <USBD_SetClassConfig>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b3c0:	7bfb      	ldrb	r3, [r7, #15]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d004      	beq.n	800b3d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 f949 	bl	800b660 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b3ce:	e065      	b.n	800b49c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f000 fa10 	bl	800b7f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2203      	movs	r2, #3
 800b3da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b3de:	e05d      	b.n	800b49c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 fa08 	bl	800b7f6 <USBD_CtlSendStatus>
      break;
 800b3e6:	e059      	b.n	800b49c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b3e8:	4b2f      	ldr	r3, [pc, #188]	; (800b4a8 <USBD_SetConfig+0x148>)
 800b3ea:	781b      	ldrb	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d112      	bne.n	800b416 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2202      	movs	r2, #2
 800b3f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b3f8:	4b2b      	ldr	r3, [pc, #172]	; (800b4a8 <USBD_SetConfig+0x148>)
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b402:	4b29      	ldr	r3, [pc, #164]	; (800b4a8 <USBD_SetConfig+0x148>)
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	4619      	mov	r1, r3
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f7ff f92f 	bl	800a66c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f000 f9f1 	bl	800b7f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b414:	e042      	b.n	800b49c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b416:	4b24      	ldr	r3, [pc, #144]	; (800b4a8 <USBD_SetConfig+0x148>)
 800b418:	781b      	ldrb	r3, [r3, #0]
 800b41a:	461a      	mov	r2, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	429a      	cmp	r2, r3
 800b422:	d02a      	beq.n	800b47a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	b2db      	uxtb	r3, r3
 800b42a:	4619      	mov	r1, r3
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f7ff f91d 	bl	800a66c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b432:	4b1d      	ldr	r3, [pc, #116]	; (800b4a8 <USBD_SetConfig+0x148>)
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	461a      	mov	r2, r3
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b43c:	4b1a      	ldr	r3, [pc, #104]	; (800b4a8 <USBD_SetConfig+0x148>)
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	4619      	mov	r1, r3
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7ff f8f6 	bl	800a634 <USBD_SetClassConfig>
 800b448:	4603      	mov	r3, r0
 800b44a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b44c:	7bfb      	ldrb	r3, [r7, #15]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00f      	beq.n	800b472 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b452:	6839      	ldr	r1, [r7, #0]
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f000 f903 	bl	800b660 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	4619      	mov	r1, r3
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f7ff f902 	bl	800a66c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2202      	movs	r2, #2
 800b46c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b470:	e014      	b.n	800b49c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f000 f9bf 	bl	800b7f6 <USBD_CtlSendStatus>
      break;
 800b478:	e010      	b.n	800b49c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 f9bb 	bl	800b7f6 <USBD_CtlSendStatus>
      break;
 800b480:	e00c      	b.n	800b49c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b482:	6839      	ldr	r1, [r7, #0]
 800b484:	6878      	ldr	r0, [r7, #4]
 800b486:	f000 f8eb 	bl	800b660 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b48a:	4b07      	ldr	r3, [pc, #28]	; (800b4a8 <USBD_SetConfig+0x148>)
 800b48c:	781b      	ldrb	r3, [r3, #0]
 800b48e:	4619      	mov	r1, r3
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7ff f8eb 	bl	800a66c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b496:	2303      	movs	r3, #3
 800b498:	73fb      	strb	r3, [r7, #15]
      break;
 800b49a:	bf00      	nop
  }

  return ret;
 800b49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3710      	adds	r7, #16
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	20003c83 	.word	0x20003c83

0800b4ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	88db      	ldrh	r3, [r3, #6]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d004      	beq.n	800b4c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b4be:	6839      	ldr	r1, [r7, #0]
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f000 f8cd 	bl	800b660 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b4c6:	e023      	b.n	800b510 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ce:	b2db      	uxtb	r3, r3
 800b4d0:	2b02      	cmp	r3, #2
 800b4d2:	dc02      	bgt.n	800b4da <USBD_GetConfig+0x2e>
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	dc03      	bgt.n	800b4e0 <USBD_GetConfig+0x34>
 800b4d8:	e015      	b.n	800b506 <USBD_GetConfig+0x5a>
 800b4da:	2b03      	cmp	r3, #3
 800b4dc:	d00b      	beq.n	800b4f6 <USBD_GetConfig+0x4a>
 800b4de:	e012      	b.n	800b506 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	3308      	adds	r3, #8
 800b4ea:	2201      	movs	r2, #1
 800b4ec:	4619      	mov	r1, r3
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 f927 	bl	800b742 <USBD_CtlSendData>
        break;
 800b4f4:	e00c      	b.n	800b510 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	3304      	adds	r3, #4
 800b4fa:	2201      	movs	r2, #1
 800b4fc:	4619      	mov	r1, r3
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 f91f 	bl	800b742 <USBD_CtlSendData>
        break;
 800b504:	e004      	b.n	800b510 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b506:	6839      	ldr	r1, [r7, #0]
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 f8a9 	bl	800b660 <USBD_CtlError>
        break;
 800b50e:	bf00      	nop
}
 800b510:	bf00      	nop
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}

0800b518 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	3b01      	subs	r3, #1
 800b52c:	2b02      	cmp	r3, #2
 800b52e:	d81e      	bhi.n	800b56e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	88db      	ldrh	r3, [r3, #6]
 800b534:	2b02      	cmp	r3, #2
 800b536:	d004      	beq.n	800b542 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b538:	6839      	ldr	r1, [r7, #0]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	f000 f890 	bl	800b660 <USBD_CtlError>
        break;
 800b540:	e01a      	b.n	800b578 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2201      	movs	r2, #1
 800b546:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d005      	beq.n	800b55e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	f043 0202 	orr.w	r2, r3, #2
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	330c      	adds	r3, #12
 800b562:	2202      	movs	r2, #2
 800b564:	4619      	mov	r1, r3
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 f8eb 	bl	800b742 <USBD_CtlSendData>
      break;
 800b56c:	e004      	b.n	800b578 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b56e:	6839      	ldr	r1, [r7, #0]
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 f875 	bl	800b660 <USBD_CtlError>
      break;
 800b576:	bf00      	nop
  }
}
 800b578:	bf00      	nop
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	885b      	ldrh	r3, [r3, #2]
 800b58e:	2b01      	cmp	r3, #1
 800b590:	d106      	bne.n	800b5a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2201      	movs	r2, #1
 800b596:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f92b 	bl	800b7f6 <USBD_CtlSendStatus>
  }
}
 800b5a0:	bf00      	nop
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	3b01      	subs	r3, #1
 800b5bc:	2b02      	cmp	r3, #2
 800b5be:	d80b      	bhi.n	800b5d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	885b      	ldrh	r3, [r3, #2]
 800b5c4:	2b01      	cmp	r3, #1
 800b5c6:	d10c      	bne.n	800b5e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f910 	bl	800b7f6 <USBD_CtlSendStatus>
      }
      break;
 800b5d6:	e004      	b.n	800b5e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b5d8:	6839      	ldr	r1, [r7, #0]
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f840 	bl	800b660 <USBD_CtlError>
      break;
 800b5e0:	e000      	b.n	800b5e4 <USBD_ClrFeature+0x3c>
      break;
 800b5e2:	bf00      	nop
  }
}
 800b5e4:	bf00      	nop
 800b5e6:	3708      	adds	r7, #8
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	781a      	ldrb	r2, [r3, #0]
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	3301      	adds	r3, #1
 800b606:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	781a      	ldrb	r2, [r3, #0]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	3301      	adds	r3, #1
 800b614:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f7ff faaa 	bl	800ab70 <SWAPBYTE>
 800b61c:	4603      	mov	r3, r0
 800b61e:	461a      	mov	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	3301      	adds	r3, #1
 800b628:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	3301      	adds	r3, #1
 800b62e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f7ff fa9d 	bl	800ab70 <SWAPBYTE>
 800b636:	4603      	mov	r3, r0
 800b638:	461a      	mov	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	3301      	adds	r3, #1
 800b642:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	3301      	adds	r3, #1
 800b648:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f7ff fa90 	bl	800ab70 <SWAPBYTE>
 800b650:	4603      	mov	r3, r0
 800b652:	461a      	mov	r2, r3
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	80da      	strh	r2, [r3, #6]
}
 800b658:	bf00      	nop
 800b65a:	3710      	adds	r7, #16
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd80      	pop	{r7, pc}

0800b660 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b66a:	2180      	movs	r1, #128	; 0x80
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 faf9 	bl	800bc64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b672:	2100      	movs	r1, #0
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 faf5 	bl	800bc64 <USBD_LL_StallEP>
}
 800b67a:	bf00      	nop
 800b67c:	3708      	adds	r7, #8
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b086      	sub	sp, #24
 800b686:	af00      	add	r7, sp, #0
 800b688:	60f8      	str	r0, [r7, #12]
 800b68a:	60b9      	str	r1, [r7, #8]
 800b68c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b68e:	2300      	movs	r3, #0
 800b690:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d036      	beq.n	800b706 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b69c:	6938      	ldr	r0, [r7, #16]
 800b69e:	f000 f836 	bl	800b70e <USBD_GetLen>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	005b      	lsls	r3, r3, #1
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b6b0:	7dfb      	ldrb	r3, [r7, #23]
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	7812      	ldrb	r2, [r2, #0]
 800b6ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6bc:	7dfb      	ldrb	r3, [r7, #23]
 800b6be:	3301      	adds	r3, #1
 800b6c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b6c2:	7dfb      	ldrb	r3, [r7, #23]
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	2203      	movs	r2, #3
 800b6ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800b6cc:	7dfb      	ldrb	r3, [r7, #23]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b6d2:	e013      	b.n	800b6fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b6d4:	7dfb      	ldrb	r3, [r7, #23]
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	4413      	add	r3, r2
 800b6da:	693a      	ldr	r2, [r7, #16]
 800b6dc:	7812      	ldrb	r2, [r2, #0]
 800b6de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	613b      	str	r3, [r7, #16]
    idx++;
 800b6e6:	7dfb      	ldrb	r3, [r7, #23]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b6ec:	7dfb      	ldrb	r3, [r7, #23]
 800b6ee:	68ba      	ldr	r2, [r7, #8]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	701a      	strb	r2, [r3, #0]
    idx++;
 800b6f6:	7dfb      	ldrb	r3, [r7, #23]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	781b      	ldrb	r3, [r3, #0]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d1e7      	bne.n	800b6d4 <USBD_GetString+0x52>
 800b704:	e000      	b.n	800b708 <USBD_GetString+0x86>
    return;
 800b706:	bf00      	nop
  }
}
 800b708:	3718      	adds	r7, #24
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}

0800b70e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b70e:	b480      	push	{r7}
 800b710:	b085      	sub	sp, #20
 800b712:	af00      	add	r7, sp, #0
 800b714:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b716:	2300      	movs	r3, #0
 800b718:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b71e:	e005      	b.n	800b72c <USBD_GetLen+0x1e>
  {
    len++;
 800b720:	7bfb      	ldrb	r3, [r7, #15]
 800b722:	3301      	adds	r3, #1
 800b724:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	3301      	adds	r3, #1
 800b72a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b72c:	68bb      	ldr	r3, [r7, #8]
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d1f5      	bne.n	800b720 <USBD_GetLen+0x12>
  }

  return len;
 800b734:	7bfb      	ldrb	r3, [r7, #15]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b084      	sub	sp, #16
 800b746:	af00      	add	r7, sp, #0
 800b748:	60f8      	str	r0, [r7, #12]
 800b74a:	60b9      	str	r1, [r7, #8]
 800b74c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2202      	movs	r2, #2
 800b752:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	687a      	ldr	r2, [r7, #4]
 800b760:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	2100      	movs	r1, #0
 800b768:	68f8      	ldr	r0, [r7, #12]
 800b76a:	f000 fb04 	bl	800bd76 <USBD_LL_Transmit>

  return USBD_OK;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3710      	adds	r7, #16
 800b774:	46bd      	mov	sp, r7
 800b776:	bd80      	pop	{r7, pc}

0800b778 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	60f8      	str	r0, [r7, #12]
 800b780:	60b9      	str	r1, [r7, #8]
 800b782:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	2100      	movs	r1, #0
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f000 faf3 	bl	800bd76 <USBD_LL_Transmit>

  return USBD_OK;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	3710      	adds	r7, #16
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b084      	sub	sp, #16
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	60f8      	str	r0, [r7, #12]
 800b7a2:	60b9      	str	r1, [r7, #8]
 800b7a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2203      	movs	r2, #3
 800b7aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	68ba      	ldr	r2, [r7, #8]
 800b7c2:	2100      	movs	r1, #0
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f000 faf7 	bl	800bdb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7ca:	2300      	movs	r3, #0
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3710      	adds	r7, #16
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}

0800b7d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f000 fae6 	bl	800bdb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}

0800b7f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b7f6:	b580      	push	{r7, lr}
 800b7f8:	b082      	sub	sp, #8
 800b7fa:	af00      	add	r7, sp, #0
 800b7fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	2204      	movs	r2, #4
 800b802:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b806:	2300      	movs	r3, #0
 800b808:	2200      	movs	r2, #0
 800b80a:	2100      	movs	r1, #0
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 fab2 	bl	800bd76 <USBD_LL_Transmit>

  return USBD_OK;
 800b812:	2300      	movs	r3, #0
}
 800b814:	4618      	mov	r0, r3
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2205      	movs	r2, #5
 800b828:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b82c:	2300      	movs	r3, #0
 800b82e:	2200      	movs	r2, #0
 800b830:	2100      	movs	r1, #0
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f000 fac0 	bl	800bdb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3708      	adds	r7, #8
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <HAL_PCDEx_SetTxFiFoInBytes>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 1 */
#if(!STM32F1_DEVICE)
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b082      	sub	sp, #8
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	460b      	mov	r3, r1
 800b84c:	70fb      	strb	r3, [r7, #3]
 800b84e:	4613      	mov	r3, r2
 800b850:	803b      	strh	r3, [r7, #0]
	return HAL_PCDEx_SetTxFiFo(hpcd, fifo, (size/4));
 800b852:	883b      	ldrh	r3, [r7, #0]
 800b854:	089b      	lsrs	r3, r3, #2
 800b856:	b29a      	uxth	r2, r3
 800b858:	78fb      	ldrb	r3, [r7, #3]
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f7f8 fded 	bl	800443c <HAL_PCDEx_SetTxFiFo>
 800b862:	4603      	mov	r3, r0
}
 800b864:	4618      	mov	r0, r3
 800b866:	3708      	adds	r7, #8
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <HAL_PCDEx_SetRxFiFoInBytes>:

HAL_StatusTypeDef HAL_PCDEx_SetRxFiFoInBytes(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b082      	sub	sp, #8
 800b870:	af00      	add	r7, sp, #0
 800b872:	6078      	str	r0, [r7, #4]
 800b874:	460b      	mov	r3, r1
 800b876:	807b      	strh	r3, [r7, #2]
	return HAL_PCDEx_SetRxFiFo(hpcd, (size/4));
 800b878:	887b      	ldrh	r3, [r7, #2]
 800b87a:	089b      	lsrs	r3, r3, #2
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	4619      	mov	r1, r3
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7f8 fe22 	bl	80044ca <HAL_PCDEx_SetRxFiFo>
 800b886:	4603      	mov	r3, r0
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3708      	adds	r7, #8
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}

0800b890 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b082      	sub	sp, #8
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef *)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	4610      	mov	r0, r2
 800b8a8:	f7fe fef8 	bl	800a69c <USBD_LL_SetupStage>
}
 800b8ac:	bf00      	nop
 800b8ae:	3708      	adds	r7, #8
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b082      	sub	sp, #8
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	460b      	mov	r3, r1
 800b8be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b8c6:	78fa      	ldrb	r2, [r7, #3]
 800b8c8:	6879      	ldr	r1, [r7, #4]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	00db      	lsls	r3, r3, #3
 800b8ce:	4413      	add	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	440b      	add	r3, r1
 800b8d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	78fb      	ldrb	r3, [r7, #3]
 800b8dc:	4619      	mov	r1, r3
 800b8de:	f7fe ff32 	bl	800a746 <USBD_LL_DataOutStage>
}
 800b8e2:	bf00      	nop
 800b8e4:	3708      	adds	r7, #8
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b082      	sub	sp, #8
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	460b      	mov	r3, r1
 800b8f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef *)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b8fc:	78fa      	ldrb	r2, [r7, #3]
 800b8fe:	6879      	ldr	r1, [r7, #4]
 800b900:	4613      	mov	r3, r2
 800b902:	00db      	lsls	r3, r3, #3
 800b904:	4413      	add	r3, r2
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	440b      	add	r3, r1
 800b90a:	334c      	adds	r3, #76	; 0x4c
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	78fb      	ldrb	r3, [r7, #3]
 800b910:	4619      	mov	r1, r3
 800b912:	f7fe ff7b 	bl	800a80c <USBD_LL_DataInStage>
}
 800b916:	bf00      	nop
 800b918:	3708      	adds	r7, #8
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b082      	sub	sp, #8
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef *)hpcd->pData);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7ff f88a 	bl	800aa46 <USBD_LL_SOF>
}
 800b932:	bf00      	nop
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b084      	sub	sp, #16
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b942:	2301      	movs	r3, #1
 800b944:	73fb      	strb	r3, [r7, #15]

  if (hpcd->Init.speed == PCD_SPEED_FULL)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	2b02      	cmp	r3, #2
 800b94c:	d102      	bne.n	800b954 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_FULL; 
 800b94e:	2301      	movs	r3, #1
 800b950:	73fb      	strb	r3, [r7, #15]
 800b952:	e008      	b.n	800b966 <HAL_PCD_ResetCallback+0x2c>
  }
  #if(!STM32F1_DEVICE)
  else if (hpcd->Init.speed == PCD_SPEED_HIGH)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	68db      	ldr	r3, [r3, #12]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d102      	bne.n	800b962 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_HIGH;
 800b95c:	2300      	movs	r3, #0
 800b95e:	73fb      	strb	r3, [r7, #15]
 800b960:	e001      	b.n	800b966 <HAL_PCD_ResetCallback+0x2c>
  }
  #endif
  else
  {
    Error_Handler();
 800b962:	f7f6 f84d 	bl	8001a00 <Error_Handler>
  }
  /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef *)hpcd->pData, speed);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b96c:	7bfa      	ldrb	r2, [r7, #15]
 800b96e:	4611      	mov	r1, r2
 800b970:	4618      	mov	r0, r3
 800b972:	f7ff f82a 	bl	800a9ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef *)hpcd->pData);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7fe ffdb 	bl	800a938 <USBD_LL_Reset>
}
 800b982:	bf00      	nop
 800b984:	3710      	adds	r7, #16
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
	...

0800b98c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef *)hpcd->pData);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7ff f825 	bl	800a9ea <USBD_LL_Suspend>
#if (!STM32F1_DEVICE)
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	6812      	ldr	r2, [r2, #0]
 800b9ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b9b2:	f043 0301 	orr.w	r3, r3, #1
 800b9b6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6a1b      	ldr	r3, [r3, #32]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d005      	beq.n	800b9cc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b9c0:	4b04      	ldr	r3, [pc, #16]	; (800b9d4 <HAL_PCD_SuspendCallback+0x48>)
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	4a03      	ldr	r2, [pc, #12]	; (800b9d4 <HAL_PCD_SuspendCallback+0x48>)
 800b9c6:	f043 0306 	orr.w	r3, r3, #6
 800b9ca:	6113      	str	r3, [r2, #16]
  }
#endif
  /* USER CODE END 2 */
}
 800b9cc:	bf00      	nop
 800b9ce:	3708      	adds	r7, #8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	e000ed00 	.word	0xe000ed00

0800b9d8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b082      	sub	sp, #8
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef *)hpcd->pData);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7ff f815 	bl	800aa16 <USBD_LL_Resume>
}
 800b9ec:	bf00      	nop
 800b9ee:	3708      	adds	r7, #8
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba06:	78fa      	ldrb	r2, [r7, #3]
 800ba08:	4611      	mov	r1, r2
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7ff f863 	bl	800aad6 <USBD_LL_IsoOUTIncomplete>
}
 800ba10:	bf00      	nop
 800ba12:	3708      	adds	r7, #8
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}

0800ba18 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b082      	sub	sp, #8
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	460b      	mov	r3, r1
 800ba22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef *)hpcd->pData, epnum);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba2a:	78fa      	ldrb	r2, [r7, #3]
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7ff f82b 	bl	800aa8a <USBD_LL_IsoINIncomplete>
}
 800ba34:	bf00      	nop
 800ba36:	3708      	adds	r7, #8
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef *)hpcd->pData);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7ff f869 	bl	800ab22 <USBD_LL_DevConnected>
}
 800ba50:	bf00      	nop
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b082      	sub	sp, #8
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef *)hpcd->pData);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff f866 	bl	800ab38 <USBD_LL_DevDisconnected>
}
 800ba6c:	bf00      	nop
 800ba6e:	3708      	adds	r7, #8
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}

0800ba74 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
#else
  /**FULL SPEED USB */
#if (STM32F1_DEVICE) /** for STM32F1 or similar */
  hpcd_USB_OTG_PTR = &hpcd_USB_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
#else
  hpcd_USB_OTG_PTR = &hpcd_USB_OTG_FS;  /** hpcd_USB_FS or hpcd_USB_OTG_FS*/
 800ba7c:	4b27      	ldr	r3, [pc, #156]	; (800bb1c <USBD_LL_Init+0xa8>)
 800ba7e:	4a28      	ldr	r2, [pc, #160]	; (800bb20 <USBD_LL_Init+0xac>)
 800ba80:	601a      	str	r2, [r3, #0]
#endif

  if (pdev->id == DEVICE_FS)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d143      	bne.n	800bb12 <USBD_LL_Init+0x9e>
  {
    /* Link the driver to the stack. */
    hpcd_USB_OTG_PTR->pData = pdev;
 800ba8a:	4b24      	ldr	r3, [pc, #144]	; (800bb1c <USBD_LL_Init+0xa8>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    pdev->pData = hpcd_USB_OTG_PTR;
 800ba94:	4b21      	ldr	r3, [pc, #132]	; (800bb1c <USBD_LL_Init+0xa8>)
 800ba96:	681a      	ldr	r2, [r3, #0]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
      pma_track += 8;
    }
#endif
#else /** if HAL_PCDEx_SetRxFiFo() is used by HAL driver */

    HAL_PCDEx_SetRxFiFoInBytes(hpcd_USB_OTG_PTR, 512); // ALL OUT EP Buffer
 800ba9e:	4b1f      	ldr	r3, [pc, #124]	; (800bb1c <USBD_LL_Init+0xa8>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7ff fee0 	bl	800b86c <HAL_PCDEx_SetRxFiFoInBytes>

    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, 0, 64); // EP0 IN
 800baac:	4b1b      	ldr	r3, [pc, #108]	; (800bb1c <USBD_LL_Init+0xa8>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	2240      	movs	r2, #64	; 0x40
 800bab2:	2100      	movs	r1, #0
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7ff fec4 	bl	800b842 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_HID_CUSTOM == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CUSTOM_HID_IN_EP & 0x7F), 64);
#endif
#if (USBD_USE_UAC_MIC == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (AUDIO_MIC_EP & 0x7F), 128);
 800baba:	4b18      	ldr	r3, [pc, #96]	; (800bb1c <USBD_LL_Init+0xa8>)
 800babc:	6818      	ldr	r0, [r3, #0]
 800babe:	4b19      	ldr	r3, [pc, #100]	; (800bb24 <USBD_LL_Init+0xb0>)
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	2280      	movs	r2, #128	; 0x80
 800baca:	4619      	mov	r1, r3
 800bacc:	f7ff feb9 	bl	800b842 <HAL_PCDEx_SetTxFiFoInBytes>
#endif
#if (USBD_USE_PRNTR == 1)
    HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (PRNT_IN_EP & 0x7F), 128);
#endif
#if (USBD_USE_CDC_ACM == 1)
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800bad0:	2300      	movs	r3, #0
 800bad2:	73fb      	strb	r3, [r7, #15]
 800bad4:	e01a      	b.n	800bb0c <USBD_LL_Init+0x98>
    {
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_IN_EP[i] & 0x7F), 128);
 800bad6:	4b11      	ldr	r3, [pc, #68]	; (800bb1c <USBD_LL_Init+0xa8>)
 800bad8:	6818      	ldr	r0, [r3, #0]
 800bada:	7bfb      	ldrb	r3, [r7, #15]
 800badc:	4a12      	ldr	r2, [pc, #72]	; (800bb28 <USBD_LL_Init+0xb4>)
 800bade:	5cd3      	ldrb	r3, [r2, r3]
 800bae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	2280      	movs	r2, #128	; 0x80
 800bae8:	4619      	mov	r1, r3
 800baea:	f7ff feaa 	bl	800b842 <HAL_PCDEx_SetTxFiFoInBytes>
      HAL_PCDEx_SetTxFiFoInBytes(hpcd_USB_OTG_PTR, (CDC_CMD_EP[i] & 0x7F), 64);
 800baee:	4b0b      	ldr	r3, [pc, #44]	; (800bb1c <USBD_LL_Init+0xa8>)
 800baf0:	6818      	ldr	r0, [r3, #0]
 800baf2:	7bfb      	ldrb	r3, [r7, #15]
 800baf4:	4a0d      	ldr	r2, [pc, #52]	; (800bb2c <USBD_LL_Init+0xb8>)
 800baf6:	5cd3      	ldrb	r3, [r2, r3]
 800baf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2240      	movs	r2, #64	; 0x40
 800bb00:	4619      	mov	r1, r3
 800bb02:	f7ff fe9e 	bl	800b842 <HAL_PCDEx_SetTxFiFoInBytes>
    for (uint8_t i = 0; i < USBD_CDC_ACM_COUNT; i++)
 800bb06:	7bfb      	ldrb	r3, [r7, #15]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	73fb      	strb	r3, [r7, #15]
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d9e1      	bls.n	800bad6 <USBD_LL_Init+0x62>
  HAL_PCD_RegisterDataOutStageCallback(hpcd_USB_OTG_PTR, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(hpcd_USB_OTG_PTR, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(hpcd_USB_OTG_PTR, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  return USBD_OK;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3710      	adds	r7, #16
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}
 800bb1c:	20003c84 	.word	0x20003c84
 800bb20:	20000a5c 	.word	0x20000a5c
 800bb24:	200000d4 	.word	0x200000d4
 800bb28:	20002be4 	.word	0x20002be4
 800bb2c:	20002bec 	.word	0x20002bec

0800bb30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7f7 fb15 	bl	8003176 <HAL_PCD_Start>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bb50:	7bfb      	ldrb	r3, [r7, #15]
 800bb52:	4618      	mov	r0, r3
 800bb54:	f000 f964 	bl	800be20 <USBD_Get_USB_Status>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}

0800bb66 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b084      	sub	sp, #16
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb72:	2300      	movs	r3, #0
 800bb74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Stop(pdev->pData);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7f7 fb2d 	bl	80031dc <HAL_PCD_Stop>
 800bb82:	4603      	mov	r3, r0
 800bb84:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f000 f949 	bl	800be20 <USBD_Get_USB_Status>
 800bb8e:	4603      	mov	r3, r0
 800bb90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb92:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb94:	4618      	mov	r0, r3
 800bb96:	3710      	adds	r7, #16
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b084      	sub	sp, #16
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	4608      	mov	r0, r1
 800bba6:	4611      	mov	r1, r2
 800bba8:	461a      	mov	r2, r3
 800bbaa:	4603      	mov	r3, r0
 800bbac:	70fb      	strb	r3, [r7, #3]
 800bbae:	460b      	mov	r3, r1
 800bbb0:	70bb      	strb	r3, [r7, #2]
 800bbb2:	4613      	mov	r3, r2
 800bbb4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800bbc4:	78bb      	ldrb	r3, [r7, #2]
 800bbc6:	883a      	ldrh	r2, [r7, #0]
 800bbc8:	78f9      	ldrb	r1, [r7, #3]
 800bbca:	f7f8 f804 	bl	8003bd6 <HAL_PCD_EP_Open>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bbd2:	7bfb      	ldrb	r3, [r7, #15]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f000 f923 	bl	800be20 <USBD_Get_USB_Status>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbde:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	3710      	adds	r7, #16
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}

0800bbe8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800bc02:	78fa      	ldrb	r2, [r7, #3]
 800bc04:	4611      	mov	r1, r2
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7f8 f84d 	bl	8003ca6 <HAL_PCD_EP_Close>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bc10:	7bfb      	ldrb	r3, [r7, #15]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f000 f904 	bl	800be20 <USBD_Get_USB_Status>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b084      	sub	sp, #16
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
 800bc2e:	460b      	mov	r3, r1
 800bc30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc32:	2300      	movs	r3, #0
 800bc34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc36:	2300      	movs	r3, #0
 800bc38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800bc40:	78fa      	ldrb	r2, [r7, #3]
 800bc42:	4611      	mov	r1, r2
 800bc44:	4618      	mov	r0, r3
 800bc46:	f7f8 fa10 	bl	800406a <HAL_PCD_EP_Flush>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bc4e:	7bfb      	ldrb	r3, [r7, #15]
 800bc50:	4618      	mov	r0, r3
 800bc52:	f000 f8e5 	bl	800be20 <USBD_Get_USB_Status>
 800bc56:	4603      	mov	r3, r0
 800bc58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3710      	adds	r7, #16
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc70:	2300      	movs	r3, #0
 800bc72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc74:	2300      	movs	r3, #0
 800bc76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800bc7e:	78fa      	ldrb	r2, [r7, #3]
 800bc80:	4611      	mov	r1, r2
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7f8 f906 	bl	8003e94 <HAL_PCD_EP_SetStall>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bc8c:	7bfb      	ldrb	r3, [r7, #15]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f000 f8c6 	bl	800be20 <USBD_Get_USB_Status>
 800bc94:	4603      	mov	r3, r0
 800bc96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc98:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3710      	adds	r7, #16
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b084      	sub	sp, #16
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
 800bcaa:	460b      	mov	r3, r1
 800bcac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800bcbc:	78fa      	ldrb	r2, [r7, #3]
 800bcbe:	4611      	mov	r1, r2
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7f8 f94b 	bl	8003f5c <HAL_PCD_EP_ClrStall>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bcca:	7bfb      	ldrb	r3, [r7, #15]
 800bccc:	4618      	mov	r0, r3
 800bcce:	f000 f8a7 	bl	800be20 <USBD_Get_USB_Status>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3710      	adds	r7, #16
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b085      	sub	sp, #20
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
 800bce8:	460b      	mov	r3, r1
 800bcea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800bcf2:	60fb      	str	r3, [r7, #12]

  if ((ep_addr & 0x80) == 0x80)
 800bcf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	da0b      	bge.n	800bd14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bcfc:	78fb      	ldrb	r3, [r7, #3]
 800bcfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd02:	68f9      	ldr	r1, [r7, #12]
 800bd04:	4613      	mov	r3, r2
 800bd06:	00db      	lsls	r3, r3, #3
 800bd08:	4413      	add	r3, r2
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	440b      	add	r3, r1
 800bd0e:	333e      	adds	r3, #62	; 0x3e
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	e00b      	b.n	800bd2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bd14:	78fb      	ldrb	r3, [r7, #3]
 800bd16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bd1a:	68f9      	ldr	r1, [r7, #12]
 800bd1c:	4613      	mov	r3, r2
 800bd1e:	00db      	lsls	r3, r3, #3
 800bd20:	4413      	add	r3, r2
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	440b      	add	r3, r1
 800bd26:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bd2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3714      	adds	r7, #20
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	460b      	mov	r3, r1
 800bd42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800bd52:	78fa      	ldrb	r2, [r7, #3]
 800bd54:	4611      	mov	r1, r2
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7f7 ff18 	bl	8003b8c <HAL_PCD_SetAddress>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bd60:	7bfb      	ldrb	r3, [r7, #15]
 800bd62:	4618      	mov	r0, r3
 800bd64:	f000 f85c 	bl	800be20 <USBD_Get_USB_Status>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd6c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b086      	sub	sp, #24
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	60f8      	str	r0, [r7, #12]
 800bd7e:	607a      	str	r2, [r7, #4]
 800bd80:	603b      	str	r3, [r7, #0]
 800bd82:	460b      	mov	r3, r1
 800bd84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd86:	2300      	movs	r3, #0
 800bd88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800bd94:	7af9      	ldrb	r1, [r7, #11]
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	f7f8 f831 	bl	8003e00 <HAL_PCD_EP_Transmit>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bda2:	7dfb      	ldrb	r3, [r7, #23]
 800bda4:	4618      	mov	r0, r3
 800bda6:	f000 f83b 	bl	800be20 <USBD_Get_USB_Status>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdae:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3718      	adds	r7, #24
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}

0800bdb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bdb8:	b580      	push	{r7, lr}
 800bdba:	b086      	sub	sp, #24
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	60f8      	str	r0, [r7, #12]
 800bdc0:	607a      	str	r2, [r7, #4]
 800bdc2:	603b      	str	r3, [r7, #0]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f8d3 0310 	ldr.w	r0, [r3, #784]	; 0x310
 800bdd6:	7af9      	ldrb	r1, [r7, #11]
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	687a      	ldr	r2, [r7, #4]
 800bddc:	f7f7 ffad 	bl	8003d3a <HAL_PCD_EP_Receive>
 800bde0:	4603      	mov	r3, r0
 800bde2:	75fb      	strb	r3, [r7, #23]

  usb_status = USBD_Get_USB_Status(hal_status);
 800bde4:	7dfb      	ldrb	r3, [r7, #23]
 800bde6:	4618      	mov	r0, r3
 800bde8:	f000 f81a 	bl	800be20 <USBD_Get_USB_Status>
 800bdec:	4603      	mov	r3, r0
 800bdee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdf0:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3718      	adds	r7, #24
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}

0800bdfa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdfa:	b580      	push	{r7, lr}
 800bdfc:	b082      	sub	sp, #8
 800bdfe:	af00      	add	r7, sp, #0
 800be00:	6078      	str	r0, [r7, #4]
 800be02:	460b      	mov	r3, r1
 800be04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef *)pdev->pData, ep_addr);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800be0c:	78fa      	ldrb	r2, [r7, #3]
 800be0e:	4611      	mov	r1, r2
 800be10:	4618      	mov	r0, r3
 800be12:	f7f7 ffdd 	bl	8003dd0 <HAL_PCD_EP_GetRxCount>
 800be16:	4603      	mov	r3, r0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3708      	adds	r7, #8
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be20:	b480      	push	{r7}
 800be22:	b085      	sub	sp, #20
 800be24:	af00      	add	r7, sp, #0
 800be26:	4603      	mov	r3, r0
 800be28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be2a:	2300      	movs	r3, #0
 800be2c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be2e:	79fb      	ldrb	r3, [r7, #7]
 800be30:	2b03      	cmp	r3, #3
 800be32:	d817      	bhi.n	800be64 <USBD_Get_USB_Status+0x44>
 800be34:	a201      	add	r2, pc, #4	; (adr r2, 800be3c <USBD_Get_USB_Status+0x1c>)
 800be36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be3a:	bf00      	nop
 800be3c:	0800be4d 	.word	0x0800be4d
 800be40:	0800be53 	.word	0x0800be53
 800be44:	0800be59 	.word	0x0800be59
 800be48:	0800be5f 	.word	0x0800be5f
  {
  case HAL_OK:
    usb_status = USBD_OK;
 800be4c:	2300      	movs	r3, #0
 800be4e:	73fb      	strb	r3, [r7, #15]
    break;
 800be50:	e00b      	b.n	800be6a <USBD_Get_USB_Status+0x4a>
  case HAL_ERROR:
    usb_status = USBD_FAIL;
 800be52:	2303      	movs	r3, #3
 800be54:	73fb      	strb	r3, [r7, #15]
    break;
 800be56:	e008      	b.n	800be6a <USBD_Get_USB_Status+0x4a>
  case HAL_BUSY:
    usb_status = USBD_BUSY;
 800be58:	2301      	movs	r3, #1
 800be5a:	73fb      	strb	r3, [r7, #15]
    break;
 800be5c:	e005      	b.n	800be6a <USBD_Get_USB_Status+0x4a>
  case HAL_TIMEOUT:
    usb_status = USBD_FAIL;
 800be5e:	2303      	movs	r3, #3
 800be60:	73fb      	strb	r3, [r7, #15]
    break;
 800be62:	e002      	b.n	800be6a <USBD_Get_USB_Status+0x4a>
  default:
    usb_status = USBD_FAIL;
 800be64:	2303      	movs	r3, #3
 800be66:	73fb      	strb	r3, [r7, #15]
    break;
 800be68:	bf00      	nop
  }
  return usb_status;
 800be6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	3714      	adds	r7, #20
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <__errno>:
 800be78:	4b01      	ldr	r3, [pc, #4]	; (800be80 <__errno+0x8>)
 800be7a:	6818      	ldr	r0, [r3, #0]
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	20000470 	.word	0x20000470

0800be84 <__libc_init_array>:
 800be84:	b570      	push	{r4, r5, r6, lr}
 800be86:	4d0d      	ldr	r5, [pc, #52]	; (800bebc <__libc_init_array+0x38>)
 800be88:	4c0d      	ldr	r4, [pc, #52]	; (800bec0 <__libc_init_array+0x3c>)
 800be8a:	1b64      	subs	r4, r4, r5
 800be8c:	10a4      	asrs	r4, r4, #2
 800be8e:	2600      	movs	r6, #0
 800be90:	42a6      	cmp	r6, r4
 800be92:	d109      	bne.n	800bea8 <__libc_init_array+0x24>
 800be94:	4d0b      	ldr	r5, [pc, #44]	; (800bec4 <__libc_init_array+0x40>)
 800be96:	4c0c      	ldr	r4, [pc, #48]	; (800bec8 <__libc_init_array+0x44>)
 800be98:	f001 f97c 	bl	800d194 <_init>
 800be9c:	1b64      	subs	r4, r4, r5
 800be9e:	10a4      	asrs	r4, r4, #2
 800bea0:	2600      	movs	r6, #0
 800bea2:	42a6      	cmp	r6, r4
 800bea4:	d105      	bne.n	800beb2 <__libc_init_array+0x2e>
 800bea6:	bd70      	pop	{r4, r5, r6, pc}
 800bea8:	f855 3b04 	ldr.w	r3, [r5], #4
 800beac:	4798      	blx	r3
 800beae:	3601      	adds	r6, #1
 800beb0:	e7ee      	b.n	800be90 <__libc_init_array+0xc>
 800beb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800beb6:	4798      	blx	r3
 800beb8:	3601      	adds	r6, #1
 800beba:	e7f2      	b.n	800bea2 <__libc_init_array+0x1e>
 800bebc:	0800d56c 	.word	0x0800d56c
 800bec0:	0800d56c 	.word	0x0800d56c
 800bec4:	0800d56c 	.word	0x0800d56c
 800bec8:	0800d570 	.word	0x0800d570

0800becc <memcpy>:
 800becc:	440a      	add	r2, r1
 800bece:	4291      	cmp	r1, r2
 800bed0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bed4:	d100      	bne.n	800bed8 <memcpy+0xc>
 800bed6:	4770      	bx	lr
 800bed8:	b510      	push	{r4, lr}
 800beda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bede:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bee2:	4291      	cmp	r1, r2
 800bee4:	d1f9      	bne.n	800beda <memcpy+0xe>
 800bee6:	bd10      	pop	{r4, pc}

0800bee8 <memset>:
 800bee8:	4402      	add	r2, r0
 800beea:	4603      	mov	r3, r0
 800beec:	4293      	cmp	r3, r2
 800beee:	d100      	bne.n	800bef2 <memset+0xa>
 800bef0:	4770      	bx	lr
 800bef2:	f803 1b01 	strb.w	r1, [r3], #1
 800bef6:	e7f9      	b.n	800beec <memset+0x4>

0800bef8 <_free_r>:
 800bef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800befa:	2900      	cmp	r1, #0
 800befc:	d044      	beq.n	800bf88 <_free_r+0x90>
 800befe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf02:	9001      	str	r0, [sp, #4]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	f1a1 0404 	sub.w	r4, r1, #4
 800bf0a:	bfb8      	it	lt
 800bf0c:	18e4      	addlt	r4, r4, r3
 800bf0e:	f000 f965 	bl	800c1dc <__malloc_lock>
 800bf12:	4a1e      	ldr	r2, [pc, #120]	; (800bf8c <_free_r+0x94>)
 800bf14:	9801      	ldr	r0, [sp, #4]
 800bf16:	6813      	ldr	r3, [r2, #0]
 800bf18:	b933      	cbnz	r3, 800bf28 <_free_r+0x30>
 800bf1a:	6063      	str	r3, [r4, #4]
 800bf1c:	6014      	str	r4, [r2, #0]
 800bf1e:	b003      	add	sp, #12
 800bf20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf24:	f000 b960 	b.w	800c1e8 <__malloc_unlock>
 800bf28:	42a3      	cmp	r3, r4
 800bf2a:	d908      	bls.n	800bf3e <_free_r+0x46>
 800bf2c:	6825      	ldr	r5, [r4, #0]
 800bf2e:	1961      	adds	r1, r4, r5
 800bf30:	428b      	cmp	r3, r1
 800bf32:	bf01      	itttt	eq
 800bf34:	6819      	ldreq	r1, [r3, #0]
 800bf36:	685b      	ldreq	r3, [r3, #4]
 800bf38:	1949      	addeq	r1, r1, r5
 800bf3a:	6021      	streq	r1, [r4, #0]
 800bf3c:	e7ed      	b.n	800bf1a <_free_r+0x22>
 800bf3e:	461a      	mov	r2, r3
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	b10b      	cbz	r3, 800bf48 <_free_r+0x50>
 800bf44:	42a3      	cmp	r3, r4
 800bf46:	d9fa      	bls.n	800bf3e <_free_r+0x46>
 800bf48:	6811      	ldr	r1, [r2, #0]
 800bf4a:	1855      	adds	r5, r2, r1
 800bf4c:	42a5      	cmp	r5, r4
 800bf4e:	d10b      	bne.n	800bf68 <_free_r+0x70>
 800bf50:	6824      	ldr	r4, [r4, #0]
 800bf52:	4421      	add	r1, r4
 800bf54:	1854      	adds	r4, r2, r1
 800bf56:	42a3      	cmp	r3, r4
 800bf58:	6011      	str	r1, [r2, #0]
 800bf5a:	d1e0      	bne.n	800bf1e <_free_r+0x26>
 800bf5c:	681c      	ldr	r4, [r3, #0]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	6053      	str	r3, [r2, #4]
 800bf62:	4421      	add	r1, r4
 800bf64:	6011      	str	r1, [r2, #0]
 800bf66:	e7da      	b.n	800bf1e <_free_r+0x26>
 800bf68:	d902      	bls.n	800bf70 <_free_r+0x78>
 800bf6a:	230c      	movs	r3, #12
 800bf6c:	6003      	str	r3, [r0, #0]
 800bf6e:	e7d6      	b.n	800bf1e <_free_r+0x26>
 800bf70:	6825      	ldr	r5, [r4, #0]
 800bf72:	1961      	adds	r1, r4, r5
 800bf74:	428b      	cmp	r3, r1
 800bf76:	bf04      	itt	eq
 800bf78:	6819      	ldreq	r1, [r3, #0]
 800bf7a:	685b      	ldreq	r3, [r3, #4]
 800bf7c:	6063      	str	r3, [r4, #4]
 800bf7e:	bf04      	itt	eq
 800bf80:	1949      	addeq	r1, r1, r5
 800bf82:	6021      	streq	r1, [r4, #0]
 800bf84:	6054      	str	r4, [r2, #4]
 800bf86:	e7ca      	b.n	800bf1e <_free_r+0x26>
 800bf88:	b003      	add	sp, #12
 800bf8a:	bd30      	pop	{r4, r5, pc}
 800bf8c:	20003c88 	.word	0x20003c88

0800bf90 <sbrk_aligned>:
 800bf90:	b570      	push	{r4, r5, r6, lr}
 800bf92:	4e0e      	ldr	r6, [pc, #56]	; (800bfcc <sbrk_aligned+0x3c>)
 800bf94:	460c      	mov	r4, r1
 800bf96:	6831      	ldr	r1, [r6, #0]
 800bf98:	4605      	mov	r5, r0
 800bf9a:	b911      	cbnz	r1, 800bfa2 <sbrk_aligned+0x12>
 800bf9c:	f000 f88c 	bl	800c0b8 <_sbrk_r>
 800bfa0:	6030      	str	r0, [r6, #0]
 800bfa2:	4621      	mov	r1, r4
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	f000 f887 	bl	800c0b8 <_sbrk_r>
 800bfaa:	1c43      	adds	r3, r0, #1
 800bfac:	d00a      	beq.n	800bfc4 <sbrk_aligned+0x34>
 800bfae:	1cc4      	adds	r4, r0, #3
 800bfb0:	f024 0403 	bic.w	r4, r4, #3
 800bfb4:	42a0      	cmp	r0, r4
 800bfb6:	d007      	beq.n	800bfc8 <sbrk_aligned+0x38>
 800bfb8:	1a21      	subs	r1, r4, r0
 800bfba:	4628      	mov	r0, r5
 800bfbc:	f000 f87c 	bl	800c0b8 <_sbrk_r>
 800bfc0:	3001      	adds	r0, #1
 800bfc2:	d101      	bne.n	800bfc8 <sbrk_aligned+0x38>
 800bfc4:	f04f 34ff 	mov.w	r4, #4294967295
 800bfc8:	4620      	mov	r0, r4
 800bfca:	bd70      	pop	{r4, r5, r6, pc}
 800bfcc:	20003c8c 	.word	0x20003c8c

0800bfd0 <_malloc_r>:
 800bfd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd4:	1ccd      	adds	r5, r1, #3
 800bfd6:	f025 0503 	bic.w	r5, r5, #3
 800bfda:	3508      	adds	r5, #8
 800bfdc:	2d0c      	cmp	r5, #12
 800bfde:	bf38      	it	cc
 800bfe0:	250c      	movcc	r5, #12
 800bfe2:	2d00      	cmp	r5, #0
 800bfe4:	4607      	mov	r7, r0
 800bfe6:	db01      	blt.n	800bfec <_malloc_r+0x1c>
 800bfe8:	42a9      	cmp	r1, r5
 800bfea:	d905      	bls.n	800bff8 <_malloc_r+0x28>
 800bfec:	230c      	movs	r3, #12
 800bfee:	603b      	str	r3, [r7, #0]
 800bff0:	2600      	movs	r6, #0
 800bff2:	4630      	mov	r0, r6
 800bff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff8:	4e2e      	ldr	r6, [pc, #184]	; (800c0b4 <_malloc_r+0xe4>)
 800bffa:	f000 f8ef 	bl	800c1dc <__malloc_lock>
 800bffe:	6833      	ldr	r3, [r6, #0]
 800c000:	461c      	mov	r4, r3
 800c002:	bb34      	cbnz	r4, 800c052 <_malloc_r+0x82>
 800c004:	4629      	mov	r1, r5
 800c006:	4638      	mov	r0, r7
 800c008:	f7ff ffc2 	bl	800bf90 <sbrk_aligned>
 800c00c:	1c43      	adds	r3, r0, #1
 800c00e:	4604      	mov	r4, r0
 800c010:	d14d      	bne.n	800c0ae <_malloc_r+0xde>
 800c012:	6834      	ldr	r4, [r6, #0]
 800c014:	4626      	mov	r6, r4
 800c016:	2e00      	cmp	r6, #0
 800c018:	d140      	bne.n	800c09c <_malloc_r+0xcc>
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	4631      	mov	r1, r6
 800c01e:	4638      	mov	r0, r7
 800c020:	eb04 0803 	add.w	r8, r4, r3
 800c024:	f000 f848 	bl	800c0b8 <_sbrk_r>
 800c028:	4580      	cmp	r8, r0
 800c02a:	d13a      	bne.n	800c0a2 <_malloc_r+0xd2>
 800c02c:	6821      	ldr	r1, [r4, #0]
 800c02e:	3503      	adds	r5, #3
 800c030:	1a6d      	subs	r5, r5, r1
 800c032:	f025 0503 	bic.w	r5, r5, #3
 800c036:	3508      	adds	r5, #8
 800c038:	2d0c      	cmp	r5, #12
 800c03a:	bf38      	it	cc
 800c03c:	250c      	movcc	r5, #12
 800c03e:	4629      	mov	r1, r5
 800c040:	4638      	mov	r0, r7
 800c042:	f7ff ffa5 	bl	800bf90 <sbrk_aligned>
 800c046:	3001      	adds	r0, #1
 800c048:	d02b      	beq.n	800c0a2 <_malloc_r+0xd2>
 800c04a:	6823      	ldr	r3, [r4, #0]
 800c04c:	442b      	add	r3, r5
 800c04e:	6023      	str	r3, [r4, #0]
 800c050:	e00e      	b.n	800c070 <_malloc_r+0xa0>
 800c052:	6822      	ldr	r2, [r4, #0]
 800c054:	1b52      	subs	r2, r2, r5
 800c056:	d41e      	bmi.n	800c096 <_malloc_r+0xc6>
 800c058:	2a0b      	cmp	r2, #11
 800c05a:	d916      	bls.n	800c08a <_malloc_r+0xba>
 800c05c:	1961      	adds	r1, r4, r5
 800c05e:	42a3      	cmp	r3, r4
 800c060:	6025      	str	r5, [r4, #0]
 800c062:	bf18      	it	ne
 800c064:	6059      	strne	r1, [r3, #4]
 800c066:	6863      	ldr	r3, [r4, #4]
 800c068:	bf08      	it	eq
 800c06a:	6031      	streq	r1, [r6, #0]
 800c06c:	5162      	str	r2, [r4, r5]
 800c06e:	604b      	str	r3, [r1, #4]
 800c070:	4638      	mov	r0, r7
 800c072:	f104 060b 	add.w	r6, r4, #11
 800c076:	f000 f8b7 	bl	800c1e8 <__malloc_unlock>
 800c07a:	f026 0607 	bic.w	r6, r6, #7
 800c07e:	1d23      	adds	r3, r4, #4
 800c080:	1af2      	subs	r2, r6, r3
 800c082:	d0b6      	beq.n	800bff2 <_malloc_r+0x22>
 800c084:	1b9b      	subs	r3, r3, r6
 800c086:	50a3      	str	r3, [r4, r2]
 800c088:	e7b3      	b.n	800bff2 <_malloc_r+0x22>
 800c08a:	6862      	ldr	r2, [r4, #4]
 800c08c:	42a3      	cmp	r3, r4
 800c08e:	bf0c      	ite	eq
 800c090:	6032      	streq	r2, [r6, #0]
 800c092:	605a      	strne	r2, [r3, #4]
 800c094:	e7ec      	b.n	800c070 <_malloc_r+0xa0>
 800c096:	4623      	mov	r3, r4
 800c098:	6864      	ldr	r4, [r4, #4]
 800c09a:	e7b2      	b.n	800c002 <_malloc_r+0x32>
 800c09c:	4634      	mov	r4, r6
 800c09e:	6876      	ldr	r6, [r6, #4]
 800c0a0:	e7b9      	b.n	800c016 <_malloc_r+0x46>
 800c0a2:	230c      	movs	r3, #12
 800c0a4:	603b      	str	r3, [r7, #0]
 800c0a6:	4638      	mov	r0, r7
 800c0a8:	f000 f89e 	bl	800c1e8 <__malloc_unlock>
 800c0ac:	e7a1      	b.n	800bff2 <_malloc_r+0x22>
 800c0ae:	6025      	str	r5, [r4, #0]
 800c0b0:	e7de      	b.n	800c070 <_malloc_r+0xa0>
 800c0b2:	bf00      	nop
 800c0b4:	20003c88 	.word	0x20003c88

0800c0b8 <_sbrk_r>:
 800c0b8:	b538      	push	{r3, r4, r5, lr}
 800c0ba:	4d06      	ldr	r5, [pc, #24]	; (800c0d4 <_sbrk_r+0x1c>)
 800c0bc:	2300      	movs	r3, #0
 800c0be:	4604      	mov	r4, r0
 800c0c0:	4608      	mov	r0, r1
 800c0c2:	602b      	str	r3, [r5, #0]
 800c0c4:	f7f5 fcfe 	bl	8001ac4 <_sbrk>
 800c0c8:	1c43      	adds	r3, r0, #1
 800c0ca:	d102      	bne.n	800c0d2 <_sbrk_r+0x1a>
 800c0cc:	682b      	ldr	r3, [r5, #0]
 800c0ce:	b103      	cbz	r3, 800c0d2 <_sbrk_r+0x1a>
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	bd38      	pop	{r3, r4, r5, pc}
 800c0d4:	20003c90 	.word	0x20003c90

0800c0d8 <sniprintf>:
 800c0d8:	b40c      	push	{r2, r3}
 800c0da:	b530      	push	{r4, r5, lr}
 800c0dc:	4b17      	ldr	r3, [pc, #92]	; (800c13c <sniprintf+0x64>)
 800c0de:	1e0c      	subs	r4, r1, #0
 800c0e0:	681d      	ldr	r5, [r3, #0]
 800c0e2:	b09d      	sub	sp, #116	; 0x74
 800c0e4:	da08      	bge.n	800c0f8 <sniprintf+0x20>
 800c0e6:	238b      	movs	r3, #139	; 0x8b
 800c0e8:	602b      	str	r3, [r5, #0]
 800c0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ee:	b01d      	add	sp, #116	; 0x74
 800c0f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0f4:	b002      	add	sp, #8
 800c0f6:	4770      	bx	lr
 800c0f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c0fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c100:	bf14      	ite	ne
 800c102:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c106:	4623      	moveq	r3, r4
 800c108:	9304      	str	r3, [sp, #16]
 800c10a:	9307      	str	r3, [sp, #28]
 800c10c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c110:	9002      	str	r0, [sp, #8]
 800c112:	9006      	str	r0, [sp, #24]
 800c114:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c118:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c11a:	ab21      	add	r3, sp, #132	; 0x84
 800c11c:	a902      	add	r1, sp, #8
 800c11e:	4628      	mov	r0, r5
 800c120:	9301      	str	r3, [sp, #4]
 800c122:	f000 f8c3 	bl	800c2ac <_svfiprintf_r>
 800c126:	1c43      	adds	r3, r0, #1
 800c128:	bfbc      	itt	lt
 800c12a:	238b      	movlt	r3, #139	; 0x8b
 800c12c:	602b      	strlt	r3, [r5, #0]
 800c12e:	2c00      	cmp	r4, #0
 800c130:	d0dd      	beq.n	800c0ee <sniprintf+0x16>
 800c132:	9b02      	ldr	r3, [sp, #8]
 800c134:	2200      	movs	r2, #0
 800c136:	701a      	strb	r2, [r3, #0]
 800c138:	e7d9      	b.n	800c0ee <sniprintf+0x16>
 800c13a:	bf00      	nop
 800c13c:	20000470 	.word	0x20000470

0800c140 <siscanf>:
 800c140:	b40e      	push	{r1, r2, r3}
 800c142:	b510      	push	{r4, lr}
 800c144:	b09f      	sub	sp, #124	; 0x7c
 800c146:	ac21      	add	r4, sp, #132	; 0x84
 800c148:	f44f 7101 	mov.w	r1, #516	; 0x204
 800c14c:	f854 2b04 	ldr.w	r2, [r4], #4
 800c150:	9201      	str	r2, [sp, #4]
 800c152:	f8ad 101c 	strh.w	r1, [sp, #28]
 800c156:	9004      	str	r0, [sp, #16]
 800c158:	9008      	str	r0, [sp, #32]
 800c15a:	f7f4 f841 	bl	80001e0 <strlen>
 800c15e:	4b0c      	ldr	r3, [pc, #48]	; (800c190 <siscanf+0x50>)
 800c160:	9005      	str	r0, [sp, #20]
 800c162:	9009      	str	r0, [sp, #36]	; 0x24
 800c164:	930d      	str	r3, [sp, #52]	; 0x34
 800c166:	480b      	ldr	r0, [pc, #44]	; (800c194 <siscanf+0x54>)
 800c168:	9a01      	ldr	r2, [sp, #4]
 800c16a:	6800      	ldr	r0, [r0, #0]
 800c16c:	9403      	str	r4, [sp, #12]
 800c16e:	2300      	movs	r3, #0
 800c170:	9311      	str	r3, [sp, #68]	; 0x44
 800c172:	9316      	str	r3, [sp, #88]	; 0x58
 800c174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c178:	f8ad 301e 	strh.w	r3, [sp, #30]
 800c17c:	a904      	add	r1, sp, #16
 800c17e:	4623      	mov	r3, r4
 800c180:	f000 f9ee 	bl	800c560 <__ssvfiscanf_r>
 800c184:	b01f      	add	sp, #124	; 0x7c
 800c186:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c18a:	b003      	add	sp, #12
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	0800c199 	.word	0x0800c199
 800c194:	20000470 	.word	0x20000470

0800c198 <__seofread>:
 800c198:	2000      	movs	r0, #0
 800c19a:	4770      	bx	lr

0800c19c <_vsiprintf_r>:
 800c19c:	b500      	push	{lr}
 800c19e:	b09b      	sub	sp, #108	; 0x6c
 800c1a0:	9100      	str	r1, [sp, #0]
 800c1a2:	9104      	str	r1, [sp, #16]
 800c1a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c1a8:	9105      	str	r1, [sp, #20]
 800c1aa:	9102      	str	r1, [sp, #8]
 800c1ac:	4905      	ldr	r1, [pc, #20]	; (800c1c4 <_vsiprintf_r+0x28>)
 800c1ae:	9103      	str	r1, [sp, #12]
 800c1b0:	4669      	mov	r1, sp
 800c1b2:	f000 f87b 	bl	800c2ac <_svfiprintf_r>
 800c1b6:	9b00      	ldr	r3, [sp, #0]
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	701a      	strb	r2, [r3, #0]
 800c1bc:	b01b      	add	sp, #108	; 0x6c
 800c1be:	f85d fb04 	ldr.w	pc, [sp], #4
 800c1c2:	bf00      	nop
 800c1c4:	ffff0208 	.word	0xffff0208

0800c1c8 <vsiprintf>:
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	460a      	mov	r2, r1
 800c1cc:	4601      	mov	r1, r0
 800c1ce:	4802      	ldr	r0, [pc, #8]	; (800c1d8 <vsiprintf+0x10>)
 800c1d0:	6800      	ldr	r0, [r0, #0]
 800c1d2:	f7ff bfe3 	b.w	800c19c <_vsiprintf_r>
 800c1d6:	bf00      	nop
 800c1d8:	20000470 	.word	0x20000470

0800c1dc <__malloc_lock>:
 800c1dc:	4801      	ldr	r0, [pc, #4]	; (800c1e4 <__malloc_lock+0x8>)
 800c1de:	f7f5 bd42 	b.w	8001c66 <__retarget_lock_acquire_recursive>
 800c1e2:	bf00      	nop
 800c1e4:	20000f6c 	.word	0x20000f6c

0800c1e8 <__malloc_unlock>:
 800c1e8:	4801      	ldr	r0, [pc, #4]	; (800c1f0 <__malloc_unlock+0x8>)
 800c1ea:	f7f5 bd50 	b.w	8001c8e <__retarget_lock_release_recursive>
 800c1ee:	bf00      	nop
 800c1f0:	20000f6c 	.word	0x20000f6c

0800c1f4 <__ssputs_r>:
 800c1f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f8:	688e      	ldr	r6, [r1, #8]
 800c1fa:	429e      	cmp	r6, r3
 800c1fc:	4682      	mov	sl, r0
 800c1fe:	460c      	mov	r4, r1
 800c200:	4690      	mov	r8, r2
 800c202:	461f      	mov	r7, r3
 800c204:	d838      	bhi.n	800c278 <__ssputs_r+0x84>
 800c206:	898a      	ldrh	r2, [r1, #12]
 800c208:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c20c:	d032      	beq.n	800c274 <__ssputs_r+0x80>
 800c20e:	6825      	ldr	r5, [r4, #0]
 800c210:	6909      	ldr	r1, [r1, #16]
 800c212:	eba5 0901 	sub.w	r9, r5, r1
 800c216:	6965      	ldr	r5, [r4, #20]
 800c218:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c21c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c220:	3301      	adds	r3, #1
 800c222:	444b      	add	r3, r9
 800c224:	106d      	asrs	r5, r5, #1
 800c226:	429d      	cmp	r5, r3
 800c228:	bf38      	it	cc
 800c22a:	461d      	movcc	r5, r3
 800c22c:	0553      	lsls	r3, r2, #21
 800c22e:	d531      	bpl.n	800c294 <__ssputs_r+0xa0>
 800c230:	4629      	mov	r1, r5
 800c232:	f7ff fecd 	bl	800bfd0 <_malloc_r>
 800c236:	4606      	mov	r6, r0
 800c238:	b950      	cbnz	r0, 800c250 <__ssputs_r+0x5c>
 800c23a:	230c      	movs	r3, #12
 800c23c:	f8ca 3000 	str.w	r3, [sl]
 800c240:	89a3      	ldrh	r3, [r4, #12]
 800c242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c246:	81a3      	strh	r3, [r4, #12]
 800c248:	f04f 30ff 	mov.w	r0, #4294967295
 800c24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c250:	6921      	ldr	r1, [r4, #16]
 800c252:	464a      	mov	r2, r9
 800c254:	f7ff fe3a 	bl	800becc <memcpy>
 800c258:	89a3      	ldrh	r3, [r4, #12]
 800c25a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c25e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c262:	81a3      	strh	r3, [r4, #12]
 800c264:	6126      	str	r6, [r4, #16]
 800c266:	6165      	str	r5, [r4, #20]
 800c268:	444e      	add	r6, r9
 800c26a:	eba5 0509 	sub.w	r5, r5, r9
 800c26e:	6026      	str	r6, [r4, #0]
 800c270:	60a5      	str	r5, [r4, #8]
 800c272:	463e      	mov	r6, r7
 800c274:	42be      	cmp	r6, r7
 800c276:	d900      	bls.n	800c27a <__ssputs_r+0x86>
 800c278:	463e      	mov	r6, r7
 800c27a:	6820      	ldr	r0, [r4, #0]
 800c27c:	4632      	mov	r2, r6
 800c27e:	4641      	mov	r1, r8
 800c280:	f000 ff36 	bl	800d0f0 <memmove>
 800c284:	68a3      	ldr	r3, [r4, #8]
 800c286:	1b9b      	subs	r3, r3, r6
 800c288:	60a3      	str	r3, [r4, #8]
 800c28a:	6823      	ldr	r3, [r4, #0]
 800c28c:	4433      	add	r3, r6
 800c28e:	6023      	str	r3, [r4, #0]
 800c290:	2000      	movs	r0, #0
 800c292:	e7db      	b.n	800c24c <__ssputs_r+0x58>
 800c294:	462a      	mov	r2, r5
 800c296:	f000 ff45 	bl	800d124 <_realloc_r>
 800c29a:	4606      	mov	r6, r0
 800c29c:	2800      	cmp	r0, #0
 800c29e:	d1e1      	bne.n	800c264 <__ssputs_r+0x70>
 800c2a0:	6921      	ldr	r1, [r4, #16]
 800c2a2:	4650      	mov	r0, sl
 800c2a4:	f7ff fe28 	bl	800bef8 <_free_r>
 800c2a8:	e7c7      	b.n	800c23a <__ssputs_r+0x46>
	...

0800c2ac <_svfiprintf_r>:
 800c2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b0:	4698      	mov	r8, r3
 800c2b2:	898b      	ldrh	r3, [r1, #12]
 800c2b4:	061b      	lsls	r3, r3, #24
 800c2b6:	b09d      	sub	sp, #116	; 0x74
 800c2b8:	4607      	mov	r7, r0
 800c2ba:	460d      	mov	r5, r1
 800c2bc:	4614      	mov	r4, r2
 800c2be:	d50e      	bpl.n	800c2de <_svfiprintf_r+0x32>
 800c2c0:	690b      	ldr	r3, [r1, #16]
 800c2c2:	b963      	cbnz	r3, 800c2de <_svfiprintf_r+0x32>
 800c2c4:	2140      	movs	r1, #64	; 0x40
 800c2c6:	f7ff fe83 	bl	800bfd0 <_malloc_r>
 800c2ca:	6028      	str	r0, [r5, #0]
 800c2cc:	6128      	str	r0, [r5, #16]
 800c2ce:	b920      	cbnz	r0, 800c2da <_svfiprintf_r+0x2e>
 800c2d0:	230c      	movs	r3, #12
 800c2d2:	603b      	str	r3, [r7, #0]
 800c2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d8:	e0d1      	b.n	800c47e <_svfiprintf_r+0x1d2>
 800c2da:	2340      	movs	r3, #64	; 0x40
 800c2dc:	616b      	str	r3, [r5, #20]
 800c2de:	2300      	movs	r3, #0
 800c2e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c2e2:	2320      	movs	r3, #32
 800c2e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2ec:	2330      	movs	r3, #48	; 0x30
 800c2ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c498 <_svfiprintf_r+0x1ec>
 800c2f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2f6:	f04f 0901 	mov.w	r9, #1
 800c2fa:	4623      	mov	r3, r4
 800c2fc:	469a      	mov	sl, r3
 800c2fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c302:	b10a      	cbz	r2, 800c308 <_svfiprintf_r+0x5c>
 800c304:	2a25      	cmp	r2, #37	; 0x25
 800c306:	d1f9      	bne.n	800c2fc <_svfiprintf_r+0x50>
 800c308:	ebba 0b04 	subs.w	fp, sl, r4
 800c30c:	d00b      	beq.n	800c326 <_svfiprintf_r+0x7a>
 800c30e:	465b      	mov	r3, fp
 800c310:	4622      	mov	r2, r4
 800c312:	4629      	mov	r1, r5
 800c314:	4638      	mov	r0, r7
 800c316:	f7ff ff6d 	bl	800c1f4 <__ssputs_r>
 800c31a:	3001      	adds	r0, #1
 800c31c:	f000 80aa 	beq.w	800c474 <_svfiprintf_r+0x1c8>
 800c320:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c322:	445a      	add	r2, fp
 800c324:	9209      	str	r2, [sp, #36]	; 0x24
 800c326:	f89a 3000 	ldrb.w	r3, [sl]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	f000 80a2 	beq.w	800c474 <_svfiprintf_r+0x1c8>
 800c330:	2300      	movs	r3, #0
 800c332:	f04f 32ff 	mov.w	r2, #4294967295
 800c336:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c33a:	f10a 0a01 	add.w	sl, sl, #1
 800c33e:	9304      	str	r3, [sp, #16]
 800c340:	9307      	str	r3, [sp, #28]
 800c342:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c346:	931a      	str	r3, [sp, #104]	; 0x68
 800c348:	4654      	mov	r4, sl
 800c34a:	2205      	movs	r2, #5
 800c34c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c350:	4851      	ldr	r0, [pc, #324]	; (800c498 <_svfiprintf_r+0x1ec>)
 800c352:	f7f3 ff4d 	bl	80001f0 <memchr>
 800c356:	9a04      	ldr	r2, [sp, #16]
 800c358:	b9d8      	cbnz	r0, 800c392 <_svfiprintf_r+0xe6>
 800c35a:	06d0      	lsls	r0, r2, #27
 800c35c:	bf44      	itt	mi
 800c35e:	2320      	movmi	r3, #32
 800c360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c364:	0711      	lsls	r1, r2, #28
 800c366:	bf44      	itt	mi
 800c368:	232b      	movmi	r3, #43	; 0x2b
 800c36a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c36e:	f89a 3000 	ldrb.w	r3, [sl]
 800c372:	2b2a      	cmp	r3, #42	; 0x2a
 800c374:	d015      	beq.n	800c3a2 <_svfiprintf_r+0xf6>
 800c376:	9a07      	ldr	r2, [sp, #28]
 800c378:	4654      	mov	r4, sl
 800c37a:	2000      	movs	r0, #0
 800c37c:	f04f 0c0a 	mov.w	ip, #10
 800c380:	4621      	mov	r1, r4
 800c382:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c386:	3b30      	subs	r3, #48	; 0x30
 800c388:	2b09      	cmp	r3, #9
 800c38a:	d94e      	bls.n	800c42a <_svfiprintf_r+0x17e>
 800c38c:	b1b0      	cbz	r0, 800c3bc <_svfiprintf_r+0x110>
 800c38e:	9207      	str	r2, [sp, #28]
 800c390:	e014      	b.n	800c3bc <_svfiprintf_r+0x110>
 800c392:	eba0 0308 	sub.w	r3, r0, r8
 800c396:	fa09 f303 	lsl.w	r3, r9, r3
 800c39a:	4313      	orrs	r3, r2
 800c39c:	9304      	str	r3, [sp, #16]
 800c39e:	46a2      	mov	sl, r4
 800c3a0:	e7d2      	b.n	800c348 <_svfiprintf_r+0x9c>
 800c3a2:	9b03      	ldr	r3, [sp, #12]
 800c3a4:	1d19      	adds	r1, r3, #4
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	9103      	str	r1, [sp, #12]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	bfbb      	ittet	lt
 800c3ae:	425b      	neglt	r3, r3
 800c3b0:	f042 0202 	orrlt.w	r2, r2, #2
 800c3b4:	9307      	strge	r3, [sp, #28]
 800c3b6:	9307      	strlt	r3, [sp, #28]
 800c3b8:	bfb8      	it	lt
 800c3ba:	9204      	strlt	r2, [sp, #16]
 800c3bc:	7823      	ldrb	r3, [r4, #0]
 800c3be:	2b2e      	cmp	r3, #46	; 0x2e
 800c3c0:	d10c      	bne.n	800c3dc <_svfiprintf_r+0x130>
 800c3c2:	7863      	ldrb	r3, [r4, #1]
 800c3c4:	2b2a      	cmp	r3, #42	; 0x2a
 800c3c6:	d135      	bne.n	800c434 <_svfiprintf_r+0x188>
 800c3c8:	9b03      	ldr	r3, [sp, #12]
 800c3ca:	1d1a      	adds	r2, r3, #4
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	9203      	str	r2, [sp, #12]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	bfb8      	it	lt
 800c3d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3d8:	3402      	adds	r4, #2
 800c3da:	9305      	str	r3, [sp, #20]
 800c3dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c4a8 <_svfiprintf_r+0x1fc>
 800c3e0:	7821      	ldrb	r1, [r4, #0]
 800c3e2:	2203      	movs	r2, #3
 800c3e4:	4650      	mov	r0, sl
 800c3e6:	f7f3 ff03 	bl	80001f0 <memchr>
 800c3ea:	b140      	cbz	r0, 800c3fe <_svfiprintf_r+0x152>
 800c3ec:	2340      	movs	r3, #64	; 0x40
 800c3ee:	eba0 000a 	sub.w	r0, r0, sl
 800c3f2:	fa03 f000 	lsl.w	r0, r3, r0
 800c3f6:	9b04      	ldr	r3, [sp, #16]
 800c3f8:	4303      	orrs	r3, r0
 800c3fa:	3401      	adds	r4, #1
 800c3fc:	9304      	str	r3, [sp, #16]
 800c3fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c402:	4826      	ldr	r0, [pc, #152]	; (800c49c <_svfiprintf_r+0x1f0>)
 800c404:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c408:	2206      	movs	r2, #6
 800c40a:	f7f3 fef1 	bl	80001f0 <memchr>
 800c40e:	2800      	cmp	r0, #0
 800c410:	d038      	beq.n	800c484 <_svfiprintf_r+0x1d8>
 800c412:	4b23      	ldr	r3, [pc, #140]	; (800c4a0 <_svfiprintf_r+0x1f4>)
 800c414:	bb1b      	cbnz	r3, 800c45e <_svfiprintf_r+0x1b2>
 800c416:	9b03      	ldr	r3, [sp, #12]
 800c418:	3307      	adds	r3, #7
 800c41a:	f023 0307 	bic.w	r3, r3, #7
 800c41e:	3308      	adds	r3, #8
 800c420:	9303      	str	r3, [sp, #12]
 800c422:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c424:	4433      	add	r3, r6
 800c426:	9309      	str	r3, [sp, #36]	; 0x24
 800c428:	e767      	b.n	800c2fa <_svfiprintf_r+0x4e>
 800c42a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c42e:	460c      	mov	r4, r1
 800c430:	2001      	movs	r0, #1
 800c432:	e7a5      	b.n	800c380 <_svfiprintf_r+0xd4>
 800c434:	2300      	movs	r3, #0
 800c436:	3401      	adds	r4, #1
 800c438:	9305      	str	r3, [sp, #20]
 800c43a:	4619      	mov	r1, r3
 800c43c:	f04f 0c0a 	mov.w	ip, #10
 800c440:	4620      	mov	r0, r4
 800c442:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c446:	3a30      	subs	r2, #48	; 0x30
 800c448:	2a09      	cmp	r2, #9
 800c44a:	d903      	bls.n	800c454 <_svfiprintf_r+0x1a8>
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d0c5      	beq.n	800c3dc <_svfiprintf_r+0x130>
 800c450:	9105      	str	r1, [sp, #20]
 800c452:	e7c3      	b.n	800c3dc <_svfiprintf_r+0x130>
 800c454:	fb0c 2101 	mla	r1, ip, r1, r2
 800c458:	4604      	mov	r4, r0
 800c45a:	2301      	movs	r3, #1
 800c45c:	e7f0      	b.n	800c440 <_svfiprintf_r+0x194>
 800c45e:	ab03      	add	r3, sp, #12
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	462a      	mov	r2, r5
 800c464:	4b0f      	ldr	r3, [pc, #60]	; (800c4a4 <_svfiprintf_r+0x1f8>)
 800c466:	a904      	add	r1, sp, #16
 800c468:	4638      	mov	r0, r7
 800c46a:	f3af 8000 	nop.w
 800c46e:	1c42      	adds	r2, r0, #1
 800c470:	4606      	mov	r6, r0
 800c472:	d1d6      	bne.n	800c422 <_svfiprintf_r+0x176>
 800c474:	89ab      	ldrh	r3, [r5, #12]
 800c476:	065b      	lsls	r3, r3, #25
 800c478:	f53f af2c 	bmi.w	800c2d4 <_svfiprintf_r+0x28>
 800c47c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c47e:	b01d      	add	sp, #116	; 0x74
 800c480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c484:	ab03      	add	r3, sp, #12
 800c486:	9300      	str	r3, [sp, #0]
 800c488:	462a      	mov	r2, r5
 800c48a:	4b06      	ldr	r3, [pc, #24]	; (800c4a4 <_svfiprintf_r+0x1f8>)
 800c48c:	a904      	add	r1, sp, #16
 800c48e:	4638      	mov	r0, r7
 800c490:	f000 fa4c 	bl	800c92c <_printf_i>
 800c494:	e7eb      	b.n	800c46e <_svfiprintf_r+0x1c2>
 800c496:	bf00      	nop
 800c498:	0800d4b3 	.word	0x0800d4b3
 800c49c:	0800d4bd 	.word	0x0800d4bd
 800c4a0:	00000000 	.word	0x00000000
 800c4a4:	0800c1f5 	.word	0x0800c1f5
 800c4a8:	0800d4b9 	.word	0x0800d4b9

0800c4ac <_sungetc_r>:
 800c4ac:	b538      	push	{r3, r4, r5, lr}
 800c4ae:	1c4b      	adds	r3, r1, #1
 800c4b0:	4614      	mov	r4, r2
 800c4b2:	d103      	bne.n	800c4bc <_sungetc_r+0x10>
 800c4b4:	f04f 35ff 	mov.w	r5, #4294967295
 800c4b8:	4628      	mov	r0, r5
 800c4ba:	bd38      	pop	{r3, r4, r5, pc}
 800c4bc:	8993      	ldrh	r3, [r2, #12]
 800c4be:	f023 0320 	bic.w	r3, r3, #32
 800c4c2:	8193      	strh	r3, [r2, #12]
 800c4c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4c6:	6852      	ldr	r2, [r2, #4]
 800c4c8:	b2cd      	uxtb	r5, r1
 800c4ca:	b18b      	cbz	r3, 800c4f0 <_sungetc_r+0x44>
 800c4cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	dd08      	ble.n	800c4e4 <_sungetc_r+0x38>
 800c4d2:	6823      	ldr	r3, [r4, #0]
 800c4d4:	1e5a      	subs	r2, r3, #1
 800c4d6:	6022      	str	r2, [r4, #0]
 800c4d8:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c4dc:	6863      	ldr	r3, [r4, #4]
 800c4de:	3301      	adds	r3, #1
 800c4e0:	6063      	str	r3, [r4, #4]
 800c4e2:	e7e9      	b.n	800c4b8 <_sungetc_r+0xc>
 800c4e4:	4621      	mov	r1, r4
 800c4e6:	f000 fdc9 	bl	800d07c <__submore>
 800c4ea:	2800      	cmp	r0, #0
 800c4ec:	d0f1      	beq.n	800c4d2 <_sungetc_r+0x26>
 800c4ee:	e7e1      	b.n	800c4b4 <_sungetc_r+0x8>
 800c4f0:	6921      	ldr	r1, [r4, #16]
 800c4f2:	6823      	ldr	r3, [r4, #0]
 800c4f4:	b151      	cbz	r1, 800c50c <_sungetc_r+0x60>
 800c4f6:	4299      	cmp	r1, r3
 800c4f8:	d208      	bcs.n	800c50c <_sungetc_r+0x60>
 800c4fa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c4fe:	42a9      	cmp	r1, r5
 800c500:	d104      	bne.n	800c50c <_sungetc_r+0x60>
 800c502:	3b01      	subs	r3, #1
 800c504:	3201      	adds	r2, #1
 800c506:	6023      	str	r3, [r4, #0]
 800c508:	6062      	str	r2, [r4, #4]
 800c50a:	e7d5      	b.n	800c4b8 <_sungetc_r+0xc>
 800c50c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800c510:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c514:	6363      	str	r3, [r4, #52]	; 0x34
 800c516:	2303      	movs	r3, #3
 800c518:	63a3      	str	r3, [r4, #56]	; 0x38
 800c51a:	4623      	mov	r3, r4
 800c51c:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c520:	6023      	str	r3, [r4, #0]
 800c522:	2301      	movs	r3, #1
 800c524:	e7dc      	b.n	800c4e0 <_sungetc_r+0x34>

0800c526 <__ssrefill_r>:
 800c526:	b510      	push	{r4, lr}
 800c528:	460c      	mov	r4, r1
 800c52a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c52c:	b169      	cbz	r1, 800c54a <__ssrefill_r+0x24>
 800c52e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c532:	4299      	cmp	r1, r3
 800c534:	d001      	beq.n	800c53a <__ssrefill_r+0x14>
 800c536:	f7ff fcdf 	bl	800bef8 <_free_r>
 800c53a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c53c:	6063      	str	r3, [r4, #4]
 800c53e:	2000      	movs	r0, #0
 800c540:	6360      	str	r0, [r4, #52]	; 0x34
 800c542:	b113      	cbz	r3, 800c54a <__ssrefill_r+0x24>
 800c544:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c546:	6023      	str	r3, [r4, #0]
 800c548:	bd10      	pop	{r4, pc}
 800c54a:	6923      	ldr	r3, [r4, #16]
 800c54c:	6023      	str	r3, [r4, #0]
 800c54e:	2300      	movs	r3, #0
 800c550:	6063      	str	r3, [r4, #4]
 800c552:	89a3      	ldrh	r3, [r4, #12]
 800c554:	f043 0320 	orr.w	r3, r3, #32
 800c558:	81a3      	strh	r3, [r4, #12]
 800c55a:	f04f 30ff 	mov.w	r0, #4294967295
 800c55e:	e7f3      	b.n	800c548 <__ssrefill_r+0x22>

0800c560 <__ssvfiscanf_r>:
 800c560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c564:	460c      	mov	r4, r1
 800c566:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c56a:	2100      	movs	r1, #0
 800c56c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800c570:	49a6      	ldr	r1, [pc, #664]	; (800c80c <__ssvfiscanf_r+0x2ac>)
 800c572:	91a0      	str	r1, [sp, #640]	; 0x280
 800c574:	f10d 0804 	add.w	r8, sp, #4
 800c578:	49a5      	ldr	r1, [pc, #660]	; (800c810 <__ssvfiscanf_r+0x2b0>)
 800c57a:	4fa6      	ldr	r7, [pc, #664]	; (800c814 <__ssvfiscanf_r+0x2b4>)
 800c57c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c818 <__ssvfiscanf_r+0x2b8>
 800c580:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800c584:	4606      	mov	r6, r0
 800c586:	91a1      	str	r1, [sp, #644]	; 0x284
 800c588:	9300      	str	r3, [sp, #0]
 800c58a:	7813      	ldrb	r3, [r2, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f000 815a 	beq.w	800c846 <__ssvfiscanf_r+0x2e6>
 800c592:	5dd9      	ldrb	r1, [r3, r7]
 800c594:	f011 0108 	ands.w	r1, r1, #8
 800c598:	f102 0501 	add.w	r5, r2, #1
 800c59c:	d019      	beq.n	800c5d2 <__ssvfiscanf_r+0x72>
 800c59e:	6863      	ldr	r3, [r4, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	dd0f      	ble.n	800c5c4 <__ssvfiscanf_r+0x64>
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	781a      	ldrb	r2, [r3, #0]
 800c5a8:	5cba      	ldrb	r2, [r7, r2]
 800c5aa:	0712      	lsls	r2, r2, #28
 800c5ac:	d401      	bmi.n	800c5b2 <__ssvfiscanf_r+0x52>
 800c5ae:	462a      	mov	r2, r5
 800c5b0:	e7eb      	b.n	800c58a <__ssvfiscanf_r+0x2a>
 800c5b2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c5b4:	3201      	adds	r2, #1
 800c5b6:	9245      	str	r2, [sp, #276]	; 0x114
 800c5b8:	6862      	ldr	r2, [r4, #4]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	3a01      	subs	r2, #1
 800c5be:	6062      	str	r2, [r4, #4]
 800c5c0:	6023      	str	r3, [r4, #0]
 800c5c2:	e7ec      	b.n	800c59e <__ssvfiscanf_r+0x3e>
 800c5c4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c5c6:	4621      	mov	r1, r4
 800c5c8:	4630      	mov	r0, r6
 800c5ca:	4798      	blx	r3
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	d0e9      	beq.n	800c5a4 <__ssvfiscanf_r+0x44>
 800c5d0:	e7ed      	b.n	800c5ae <__ssvfiscanf_r+0x4e>
 800c5d2:	2b25      	cmp	r3, #37	; 0x25
 800c5d4:	d012      	beq.n	800c5fc <__ssvfiscanf_r+0x9c>
 800c5d6:	469a      	mov	sl, r3
 800c5d8:	6863      	ldr	r3, [r4, #4]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f340 8091 	ble.w	800c702 <__ssvfiscanf_r+0x1a2>
 800c5e0:	6822      	ldr	r2, [r4, #0]
 800c5e2:	7813      	ldrb	r3, [r2, #0]
 800c5e4:	4553      	cmp	r3, sl
 800c5e6:	f040 812e 	bne.w	800c846 <__ssvfiscanf_r+0x2e6>
 800c5ea:	6863      	ldr	r3, [r4, #4]
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	6063      	str	r3, [r4, #4]
 800c5f0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800c5f2:	3201      	adds	r2, #1
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	6022      	str	r2, [r4, #0]
 800c5f8:	9345      	str	r3, [sp, #276]	; 0x114
 800c5fa:	e7d8      	b.n	800c5ae <__ssvfiscanf_r+0x4e>
 800c5fc:	9141      	str	r1, [sp, #260]	; 0x104
 800c5fe:	9143      	str	r1, [sp, #268]	; 0x10c
 800c600:	7853      	ldrb	r3, [r2, #1]
 800c602:	2b2a      	cmp	r3, #42	; 0x2a
 800c604:	bf02      	ittt	eq
 800c606:	2310      	moveq	r3, #16
 800c608:	1c95      	addeq	r5, r2, #2
 800c60a:	9341      	streq	r3, [sp, #260]	; 0x104
 800c60c:	220a      	movs	r2, #10
 800c60e:	46aa      	mov	sl, r5
 800c610:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c614:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800c618:	2b09      	cmp	r3, #9
 800c61a:	d91d      	bls.n	800c658 <__ssvfiscanf_r+0xf8>
 800c61c:	487e      	ldr	r0, [pc, #504]	; (800c818 <__ssvfiscanf_r+0x2b8>)
 800c61e:	2203      	movs	r2, #3
 800c620:	f7f3 fde6 	bl	80001f0 <memchr>
 800c624:	b140      	cbz	r0, 800c638 <__ssvfiscanf_r+0xd8>
 800c626:	2301      	movs	r3, #1
 800c628:	eba0 0009 	sub.w	r0, r0, r9
 800c62c:	fa03 f000 	lsl.w	r0, r3, r0
 800c630:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c632:	4318      	orrs	r0, r3
 800c634:	9041      	str	r0, [sp, #260]	; 0x104
 800c636:	4655      	mov	r5, sl
 800c638:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c63c:	2b78      	cmp	r3, #120	; 0x78
 800c63e:	d806      	bhi.n	800c64e <__ssvfiscanf_r+0xee>
 800c640:	2b57      	cmp	r3, #87	; 0x57
 800c642:	d810      	bhi.n	800c666 <__ssvfiscanf_r+0x106>
 800c644:	2b25      	cmp	r3, #37	; 0x25
 800c646:	d0c6      	beq.n	800c5d6 <__ssvfiscanf_r+0x76>
 800c648:	d856      	bhi.n	800c6f8 <__ssvfiscanf_r+0x198>
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d064      	beq.n	800c718 <__ssvfiscanf_r+0x1b8>
 800c64e:	2303      	movs	r3, #3
 800c650:	9347      	str	r3, [sp, #284]	; 0x11c
 800c652:	230a      	movs	r3, #10
 800c654:	9342      	str	r3, [sp, #264]	; 0x108
 800c656:	e071      	b.n	800c73c <__ssvfiscanf_r+0x1dc>
 800c658:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800c65a:	fb02 1103 	mla	r1, r2, r3, r1
 800c65e:	3930      	subs	r1, #48	; 0x30
 800c660:	9143      	str	r1, [sp, #268]	; 0x10c
 800c662:	4655      	mov	r5, sl
 800c664:	e7d3      	b.n	800c60e <__ssvfiscanf_r+0xae>
 800c666:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800c66a:	2a20      	cmp	r2, #32
 800c66c:	d8ef      	bhi.n	800c64e <__ssvfiscanf_r+0xee>
 800c66e:	a101      	add	r1, pc, #4	; (adr r1, 800c674 <__ssvfiscanf_r+0x114>)
 800c670:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c674:	0800c727 	.word	0x0800c727
 800c678:	0800c64f 	.word	0x0800c64f
 800c67c:	0800c64f 	.word	0x0800c64f
 800c680:	0800c785 	.word	0x0800c785
 800c684:	0800c64f 	.word	0x0800c64f
 800c688:	0800c64f 	.word	0x0800c64f
 800c68c:	0800c64f 	.word	0x0800c64f
 800c690:	0800c64f 	.word	0x0800c64f
 800c694:	0800c64f 	.word	0x0800c64f
 800c698:	0800c64f 	.word	0x0800c64f
 800c69c:	0800c64f 	.word	0x0800c64f
 800c6a0:	0800c79b 	.word	0x0800c79b
 800c6a4:	0800c771 	.word	0x0800c771
 800c6a8:	0800c6ff 	.word	0x0800c6ff
 800c6ac:	0800c6ff 	.word	0x0800c6ff
 800c6b0:	0800c6ff 	.word	0x0800c6ff
 800c6b4:	0800c64f 	.word	0x0800c64f
 800c6b8:	0800c775 	.word	0x0800c775
 800c6bc:	0800c64f 	.word	0x0800c64f
 800c6c0:	0800c64f 	.word	0x0800c64f
 800c6c4:	0800c64f 	.word	0x0800c64f
 800c6c8:	0800c64f 	.word	0x0800c64f
 800c6cc:	0800c7ab 	.word	0x0800c7ab
 800c6d0:	0800c77d 	.word	0x0800c77d
 800c6d4:	0800c71f 	.word	0x0800c71f
 800c6d8:	0800c64f 	.word	0x0800c64f
 800c6dc:	0800c64f 	.word	0x0800c64f
 800c6e0:	0800c7a7 	.word	0x0800c7a7
 800c6e4:	0800c64f 	.word	0x0800c64f
 800c6e8:	0800c771 	.word	0x0800c771
 800c6ec:	0800c64f 	.word	0x0800c64f
 800c6f0:	0800c64f 	.word	0x0800c64f
 800c6f4:	0800c727 	.word	0x0800c727
 800c6f8:	3b45      	subs	r3, #69	; 0x45
 800c6fa:	2b02      	cmp	r3, #2
 800c6fc:	d8a7      	bhi.n	800c64e <__ssvfiscanf_r+0xee>
 800c6fe:	2305      	movs	r3, #5
 800c700:	e01b      	b.n	800c73a <__ssvfiscanf_r+0x1da>
 800c702:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c704:	4621      	mov	r1, r4
 800c706:	4630      	mov	r0, r6
 800c708:	4798      	blx	r3
 800c70a:	2800      	cmp	r0, #0
 800c70c:	f43f af68 	beq.w	800c5e0 <__ssvfiscanf_r+0x80>
 800c710:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c712:	2800      	cmp	r0, #0
 800c714:	f040 808d 	bne.w	800c832 <__ssvfiscanf_r+0x2d2>
 800c718:	f04f 30ff 	mov.w	r0, #4294967295
 800c71c:	e08f      	b.n	800c83e <__ssvfiscanf_r+0x2de>
 800c71e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c720:	f042 0220 	orr.w	r2, r2, #32
 800c724:	9241      	str	r2, [sp, #260]	; 0x104
 800c726:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c72c:	9241      	str	r2, [sp, #260]	; 0x104
 800c72e:	2210      	movs	r2, #16
 800c730:	2b6f      	cmp	r3, #111	; 0x6f
 800c732:	9242      	str	r2, [sp, #264]	; 0x108
 800c734:	bf34      	ite	cc
 800c736:	2303      	movcc	r3, #3
 800c738:	2304      	movcs	r3, #4
 800c73a:	9347      	str	r3, [sp, #284]	; 0x11c
 800c73c:	6863      	ldr	r3, [r4, #4]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	dd42      	ble.n	800c7c8 <__ssvfiscanf_r+0x268>
 800c742:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c744:	0659      	lsls	r1, r3, #25
 800c746:	d404      	bmi.n	800c752 <__ssvfiscanf_r+0x1f2>
 800c748:	6823      	ldr	r3, [r4, #0]
 800c74a:	781a      	ldrb	r2, [r3, #0]
 800c74c:	5cba      	ldrb	r2, [r7, r2]
 800c74e:	0712      	lsls	r2, r2, #28
 800c750:	d441      	bmi.n	800c7d6 <__ssvfiscanf_r+0x276>
 800c752:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c754:	2b02      	cmp	r3, #2
 800c756:	dc50      	bgt.n	800c7fa <__ssvfiscanf_r+0x29a>
 800c758:	466b      	mov	r3, sp
 800c75a:	4622      	mov	r2, r4
 800c75c:	a941      	add	r1, sp, #260	; 0x104
 800c75e:	4630      	mov	r0, r6
 800c760:	f000 fa0a 	bl	800cb78 <_scanf_chars>
 800c764:	2801      	cmp	r0, #1
 800c766:	d06e      	beq.n	800c846 <__ssvfiscanf_r+0x2e6>
 800c768:	2802      	cmp	r0, #2
 800c76a:	f47f af20 	bne.w	800c5ae <__ssvfiscanf_r+0x4e>
 800c76e:	e7cf      	b.n	800c710 <__ssvfiscanf_r+0x1b0>
 800c770:	220a      	movs	r2, #10
 800c772:	e7dd      	b.n	800c730 <__ssvfiscanf_r+0x1d0>
 800c774:	2300      	movs	r3, #0
 800c776:	9342      	str	r3, [sp, #264]	; 0x108
 800c778:	2303      	movs	r3, #3
 800c77a:	e7de      	b.n	800c73a <__ssvfiscanf_r+0x1da>
 800c77c:	2308      	movs	r3, #8
 800c77e:	9342      	str	r3, [sp, #264]	; 0x108
 800c780:	2304      	movs	r3, #4
 800c782:	e7da      	b.n	800c73a <__ssvfiscanf_r+0x1da>
 800c784:	4629      	mov	r1, r5
 800c786:	4640      	mov	r0, r8
 800c788:	f000 fb48 	bl	800ce1c <__sccl>
 800c78c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c78e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c792:	9341      	str	r3, [sp, #260]	; 0x104
 800c794:	4605      	mov	r5, r0
 800c796:	2301      	movs	r3, #1
 800c798:	e7cf      	b.n	800c73a <__ssvfiscanf_r+0x1da>
 800c79a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c79c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a0:	9341      	str	r3, [sp, #260]	; 0x104
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	e7c9      	b.n	800c73a <__ssvfiscanf_r+0x1da>
 800c7a6:	2302      	movs	r3, #2
 800c7a8:	e7c7      	b.n	800c73a <__ssvfiscanf_r+0x1da>
 800c7aa:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c7ac:	06c3      	lsls	r3, r0, #27
 800c7ae:	f53f aefe 	bmi.w	800c5ae <__ssvfiscanf_r+0x4e>
 800c7b2:	9b00      	ldr	r3, [sp, #0]
 800c7b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c7b6:	1d19      	adds	r1, r3, #4
 800c7b8:	9100      	str	r1, [sp, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	f010 0f01 	tst.w	r0, #1
 800c7c0:	bf14      	ite	ne
 800c7c2:	801a      	strhne	r2, [r3, #0]
 800c7c4:	601a      	streq	r2, [r3, #0]
 800c7c6:	e6f2      	b.n	800c5ae <__ssvfiscanf_r+0x4e>
 800c7c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c7ca:	4621      	mov	r1, r4
 800c7cc:	4630      	mov	r0, r6
 800c7ce:	4798      	blx	r3
 800c7d0:	2800      	cmp	r0, #0
 800c7d2:	d0b6      	beq.n	800c742 <__ssvfiscanf_r+0x1e2>
 800c7d4:	e79c      	b.n	800c710 <__ssvfiscanf_r+0x1b0>
 800c7d6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c7d8:	3201      	adds	r2, #1
 800c7da:	9245      	str	r2, [sp, #276]	; 0x114
 800c7dc:	6862      	ldr	r2, [r4, #4]
 800c7de:	3a01      	subs	r2, #1
 800c7e0:	2a00      	cmp	r2, #0
 800c7e2:	6062      	str	r2, [r4, #4]
 800c7e4:	dd02      	ble.n	800c7ec <__ssvfiscanf_r+0x28c>
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	6023      	str	r3, [r4, #0]
 800c7ea:	e7ad      	b.n	800c748 <__ssvfiscanf_r+0x1e8>
 800c7ec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	4630      	mov	r0, r6
 800c7f2:	4798      	blx	r3
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	d0a7      	beq.n	800c748 <__ssvfiscanf_r+0x1e8>
 800c7f8:	e78a      	b.n	800c710 <__ssvfiscanf_r+0x1b0>
 800c7fa:	2b04      	cmp	r3, #4
 800c7fc:	dc0e      	bgt.n	800c81c <__ssvfiscanf_r+0x2bc>
 800c7fe:	466b      	mov	r3, sp
 800c800:	4622      	mov	r2, r4
 800c802:	a941      	add	r1, sp, #260	; 0x104
 800c804:	4630      	mov	r0, r6
 800c806:	f000 fa11 	bl	800cc2c <_scanf_i>
 800c80a:	e7ab      	b.n	800c764 <__ssvfiscanf_r+0x204>
 800c80c:	0800c4ad 	.word	0x0800c4ad
 800c810:	0800c527 	.word	0x0800c527
 800c814:	0800d3b3 	.word	0x0800d3b3
 800c818:	0800d4b9 	.word	0x0800d4b9
 800c81c:	4b0b      	ldr	r3, [pc, #44]	; (800c84c <__ssvfiscanf_r+0x2ec>)
 800c81e:	2b00      	cmp	r3, #0
 800c820:	f43f aec5 	beq.w	800c5ae <__ssvfiscanf_r+0x4e>
 800c824:	466b      	mov	r3, sp
 800c826:	4622      	mov	r2, r4
 800c828:	a941      	add	r1, sp, #260	; 0x104
 800c82a:	4630      	mov	r0, r6
 800c82c:	f3af 8000 	nop.w
 800c830:	e798      	b.n	800c764 <__ssvfiscanf_r+0x204>
 800c832:	89a3      	ldrh	r3, [r4, #12]
 800c834:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c838:	bf18      	it	ne
 800c83a:	f04f 30ff 	movne.w	r0, #4294967295
 800c83e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c846:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c848:	e7f9      	b.n	800c83e <__ssvfiscanf_r+0x2de>
 800c84a:	bf00      	nop
 800c84c:	00000000 	.word	0x00000000

0800c850 <_printf_common>:
 800c850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c854:	4616      	mov	r6, r2
 800c856:	4699      	mov	r9, r3
 800c858:	688a      	ldr	r2, [r1, #8]
 800c85a:	690b      	ldr	r3, [r1, #16]
 800c85c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c860:	4293      	cmp	r3, r2
 800c862:	bfb8      	it	lt
 800c864:	4613      	movlt	r3, r2
 800c866:	6033      	str	r3, [r6, #0]
 800c868:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c86c:	4607      	mov	r7, r0
 800c86e:	460c      	mov	r4, r1
 800c870:	b10a      	cbz	r2, 800c876 <_printf_common+0x26>
 800c872:	3301      	adds	r3, #1
 800c874:	6033      	str	r3, [r6, #0]
 800c876:	6823      	ldr	r3, [r4, #0]
 800c878:	0699      	lsls	r1, r3, #26
 800c87a:	bf42      	ittt	mi
 800c87c:	6833      	ldrmi	r3, [r6, #0]
 800c87e:	3302      	addmi	r3, #2
 800c880:	6033      	strmi	r3, [r6, #0]
 800c882:	6825      	ldr	r5, [r4, #0]
 800c884:	f015 0506 	ands.w	r5, r5, #6
 800c888:	d106      	bne.n	800c898 <_printf_common+0x48>
 800c88a:	f104 0a19 	add.w	sl, r4, #25
 800c88e:	68e3      	ldr	r3, [r4, #12]
 800c890:	6832      	ldr	r2, [r6, #0]
 800c892:	1a9b      	subs	r3, r3, r2
 800c894:	42ab      	cmp	r3, r5
 800c896:	dc26      	bgt.n	800c8e6 <_printf_common+0x96>
 800c898:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c89c:	1e13      	subs	r3, r2, #0
 800c89e:	6822      	ldr	r2, [r4, #0]
 800c8a0:	bf18      	it	ne
 800c8a2:	2301      	movne	r3, #1
 800c8a4:	0692      	lsls	r2, r2, #26
 800c8a6:	d42b      	bmi.n	800c900 <_printf_common+0xb0>
 800c8a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c8ac:	4649      	mov	r1, r9
 800c8ae:	4638      	mov	r0, r7
 800c8b0:	47c0      	blx	r8
 800c8b2:	3001      	adds	r0, #1
 800c8b4:	d01e      	beq.n	800c8f4 <_printf_common+0xa4>
 800c8b6:	6823      	ldr	r3, [r4, #0]
 800c8b8:	68e5      	ldr	r5, [r4, #12]
 800c8ba:	6832      	ldr	r2, [r6, #0]
 800c8bc:	f003 0306 	and.w	r3, r3, #6
 800c8c0:	2b04      	cmp	r3, #4
 800c8c2:	bf08      	it	eq
 800c8c4:	1aad      	subeq	r5, r5, r2
 800c8c6:	68a3      	ldr	r3, [r4, #8]
 800c8c8:	6922      	ldr	r2, [r4, #16]
 800c8ca:	bf0c      	ite	eq
 800c8cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8d0:	2500      	movne	r5, #0
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	bfc4      	itt	gt
 800c8d6:	1a9b      	subgt	r3, r3, r2
 800c8d8:	18ed      	addgt	r5, r5, r3
 800c8da:	2600      	movs	r6, #0
 800c8dc:	341a      	adds	r4, #26
 800c8de:	42b5      	cmp	r5, r6
 800c8e0:	d11a      	bne.n	800c918 <_printf_common+0xc8>
 800c8e2:	2000      	movs	r0, #0
 800c8e4:	e008      	b.n	800c8f8 <_printf_common+0xa8>
 800c8e6:	2301      	movs	r3, #1
 800c8e8:	4652      	mov	r2, sl
 800c8ea:	4649      	mov	r1, r9
 800c8ec:	4638      	mov	r0, r7
 800c8ee:	47c0      	blx	r8
 800c8f0:	3001      	adds	r0, #1
 800c8f2:	d103      	bne.n	800c8fc <_printf_common+0xac>
 800c8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8fc:	3501      	adds	r5, #1
 800c8fe:	e7c6      	b.n	800c88e <_printf_common+0x3e>
 800c900:	18e1      	adds	r1, r4, r3
 800c902:	1c5a      	adds	r2, r3, #1
 800c904:	2030      	movs	r0, #48	; 0x30
 800c906:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c90a:	4422      	add	r2, r4
 800c90c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c910:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c914:	3302      	adds	r3, #2
 800c916:	e7c7      	b.n	800c8a8 <_printf_common+0x58>
 800c918:	2301      	movs	r3, #1
 800c91a:	4622      	mov	r2, r4
 800c91c:	4649      	mov	r1, r9
 800c91e:	4638      	mov	r0, r7
 800c920:	47c0      	blx	r8
 800c922:	3001      	adds	r0, #1
 800c924:	d0e6      	beq.n	800c8f4 <_printf_common+0xa4>
 800c926:	3601      	adds	r6, #1
 800c928:	e7d9      	b.n	800c8de <_printf_common+0x8e>
	...

0800c92c <_printf_i>:
 800c92c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c930:	7e0f      	ldrb	r7, [r1, #24]
 800c932:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c934:	2f78      	cmp	r7, #120	; 0x78
 800c936:	4691      	mov	r9, r2
 800c938:	4680      	mov	r8, r0
 800c93a:	460c      	mov	r4, r1
 800c93c:	469a      	mov	sl, r3
 800c93e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c942:	d807      	bhi.n	800c954 <_printf_i+0x28>
 800c944:	2f62      	cmp	r7, #98	; 0x62
 800c946:	d80a      	bhi.n	800c95e <_printf_i+0x32>
 800c948:	2f00      	cmp	r7, #0
 800c94a:	f000 80d8 	beq.w	800cafe <_printf_i+0x1d2>
 800c94e:	2f58      	cmp	r7, #88	; 0x58
 800c950:	f000 80a3 	beq.w	800ca9a <_printf_i+0x16e>
 800c954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c958:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c95c:	e03a      	b.n	800c9d4 <_printf_i+0xa8>
 800c95e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c962:	2b15      	cmp	r3, #21
 800c964:	d8f6      	bhi.n	800c954 <_printf_i+0x28>
 800c966:	a101      	add	r1, pc, #4	; (adr r1, 800c96c <_printf_i+0x40>)
 800c968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c96c:	0800c9c5 	.word	0x0800c9c5
 800c970:	0800c9d9 	.word	0x0800c9d9
 800c974:	0800c955 	.word	0x0800c955
 800c978:	0800c955 	.word	0x0800c955
 800c97c:	0800c955 	.word	0x0800c955
 800c980:	0800c955 	.word	0x0800c955
 800c984:	0800c9d9 	.word	0x0800c9d9
 800c988:	0800c955 	.word	0x0800c955
 800c98c:	0800c955 	.word	0x0800c955
 800c990:	0800c955 	.word	0x0800c955
 800c994:	0800c955 	.word	0x0800c955
 800c998:	0800cae5 	.word	0x0800cae5
 800c99c:	0800ca09 	.word	0x0800ca09
 800c9a0:	0800cac7 	.word	0x0800cac7
 800c9a4:	0800c955 	.word	0x0800c955
 800c9a8:	0800c955 	.word	0x0800c955
 800c9ac:	0800cb07 	.word	0x0800cb07
 800c9b0:	0800c955 	.word	0x0800c955
 800c9b4:	0800ca09 	.word	0x0800ca09
 800c9b8:	0800c955 	.word	0x0800c955
 800c9bc:	0800c955 	.word	0x0800c955
 800c9c0:	0800cacf 	.word	0x0800cacf
 800c9c4:	682b      	ldr	r3, [r5, #0]
 800c9c6:	1d1a      	adds	r2, r3, #4
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	602a      	str	r2, [r5, #0]
 800c9cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e0a3      	b.n	800cb20 <_printf_i+0x1f4>
 800c9d8:	6820      	ldr	r0, [r4, #0]
 800c9da:	6829      	ldr	r1, [r5, #0]
 800c9dc:	0606      	lsls	r6, r0, #24
 800c9de:	f101 0304 	add.w	r3, r1, #4
 800c9e2:	d50a      	bpl.n	800c9fa <_printf_i+0xce>
 800c9e4:	680e      	ldr	r6, [r1, #0]
 800c9e6:	602b      	str	r3, [r5, #0]
 800c9e8:	2e00      	cmp	r6, #0
 800c9ea:	da03      	bge.n	800c9f4 <_printf_i+0xc8>
 800c9ec:	232d      	movs	r3, #45	; 0x2d
 800c9ee:	4276      	negs	r6, r6
 800c9f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9f4:	485e      	ldr	r0, [pc, #376]	; (800cb70 <_printf_i+0x244>)
 800c9f6:	230a      	movs	r3, #10
 800c9f8:	e019      	b.n	800ca2e <_printf_i+0x102>
 800c9fa:	680e      	ldr	r6, [r1, #0]
 800c9fc:	602b      	str	r3, [r5, #0]
 800c9fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ca02:	bf18      	it	ne
 800ca04:	b236      	sxthne	r6, r6
 800ca06:	e7ef      	b.n	800c9e8 <_printf_i+0xbc>
 800ca08:	682b      	ldr	r3, [r5, #0]
 800ca0a:	6820      	ldr	r0, [r4, #0]
 800ca0c:	1d19      	adds	r1, r3, #4
 800ca0e:	6029      	str	r1, [r5, #0]
 800ca10:	0601      	lsls	r1, r0, #24
 800ca12:	d501      	bpl.n	800ca18 <_printf_i+0xec>
 800ca14:	681e      	ldr	r6, [r3, #0]
 800ca16:	e002      	b.n	800ca1e <_printf_i+0xf2>
 800ca18:	0646      	lsls	r6, r0, #25
 800ca1a:	d5fb      	bpl.n	800ca14 <_printf_i+0xe8>
 800ca1c:	881e      	ldrh	r6, [r3, #0]
 800ca1e:	4854      	ldr	r0, [pc, #336]	; (800cb70 <_printf_i+0x244>)
 800ca20:	2f6f      	cmp	r7, #111	; 0x6f
 800ca22:	bf0c      	ite	eq
 800ca24:	2308      	moveq	r3, #8
 800ca26:	230a      	movne	r3, #10
 800ca28:	2100      	movs	r1, #0
 800ca2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca2e:	6865      	ldr	r5, [r4, #4]
 800ca30:	60a5      	str	r5, [r4, #8]
 800ca32:	2d00      	cmp	r5, #0
 800ca34:	bfa2      	ittt	ge
 800ca36:	6821      	ldrge	r1, [r4, #0]
 800ca38:	f021 0104 	bicge.w	r1, r1, #4
 800ca3c:	6021      	strge	r1, [r4, #0]
 800ca3e:	b90e      	cbnz	r6, 800ca44 <_printf_i+0x118>
 800ca40:	2d00      	cmp	r5, #0
 800ca42:	d04d      	beq.n	800cae0 <_printf_i+0x1b4>
 800ca44:	4615      	mov	r5, r2
 800ca46:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca4a:	fb03 6711 	mls	r7, r3, r1, r6
 800ca4e:	5dc7      	ldrb	r7, [r0, r7]
 800ca50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca54:	4637      	mov	r7, r6
 800ca56:	42bb      	cmp	r3, r7
 800ca58:	460e      	mov	r6, r1
 800ca5a:	d9f4      	bls.n	800ca46 <_printf_i+0x11a>
 800ca5c:	2b08      	cmp	r3, #8
 800ca5e:	d10b      	bne.n	800ca78 <_printf_i+0x14c>
 800ca60:	6823      	ldr	r3, [r4, #0]
 800ca62:	07de      	lsls	r6, r3, #31
 800ca64:	d508      	bpl.n	800ca78 <_printf_i+0x14c>
 800ca66:	6923      	ldr	r3, [r4, #16]
 800ca68:	6861      	ldr	r1, [r4, #4]
 800ca6a:	4299      	cmp	r1, r3
 800ca6c:	bfde      	ittt	le
 800ca6e:	2330      	movle	r3, #48	; 0x30
 800ca70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca78:	1b52      	subs	r2, r2, r5
 800ca7a:	6122      	str	r2, [r4, #16]
 800ca7c:	f8cd a000 	str.w	sl, [sp]
 800ca80:	464b      	mov	r3, r9
 800ca82:	aa03      	add	r2, sp, #12
 800ca84:	4621      	mov	r1, r4
 800ca86:	4640      	mov	r0, r8
 800ca88:	f7ff fee2 	bl	800c850 <_printf_common>
 800ca8c:	3001      	adds	r0, #1
 800ca8e:	d14c      	bne.n	800cb2a <_printf_i+0x1fe>
 800ca90:	f04f 30ff 	mov.w	r0, #4294967295
 800ca94:	b004      	add	sp, #16
 800ca96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca9a:	4835      	ldr	r0, [pc, #212]	; (800cb70 <_printf_i+0x244>)
 800ca9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800caa0:	6829      	ldr	r1, [r5, #0]
 800caa2:	6823      	ldr	r3, [r4, #0]
 800caa4:	f851 6b04 	ldr.w	r6, [r1], #4
 800caa8:	6029      	str	r1, [r5, #0]
 800caaa:	061d      	lsls	r5, r3, #24
 800caac:	d514      	bpl.n	800cad8 <_printf_i+0x1ac>
 800caae:	07df      	lsls	r7, r3, #31
 800cab0:	bf44      	itt	mi
 800cab2:	f043 0320 	orrmi.w	r3, r3, #32
 800cab6:	6023      	strmi	r3, [r4, #0]
 800cab8:	b91e      	cbnz	r6, 800cac2 <_printf_i+0x196>
 800caba:	6823      	ldr	r3, [r4, #0]
 800cabc:	f023 0320 	bic.w	r3, r3, #32
 800cac0:	6023      	str	r3, [r4, #0]
 800cac2:	2310      	movs	r3, #16
 800cac4:	e7b0      	b.n	800ca28 <_printf_i+0xfc>
 800cac6:	6823      	ldr	r3, [r4, #0]
 800cac8:	f043 0320 	orr.w	r3, r3, #32
 800cacc:	6023      	str	r3, [r4, #0]
 800cace:	2378      	movs	r3, #120	; 0x78
 800cad0:	4828      	ldr	r0, [pc, #160]	; (800cb74 <_printf_i+0x248>)
 800cad2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cad6:	e7e3      	b.n	800caa0 <_printf_i+0x174>
 800cad8:	0659      	lsls	r1, r3, #25
 800cada:	bf48      	it	mi
 800cadc:	b2b6      	uxthmi	r6, r6
 800cade:	e7e6      	b.n	800caae <_printf_i+0x182>
 800cae0:	4615      	mov	r5, r2
 800cae2:	e7bb      	b.n	800ca5c <_printf_i+0x130>
 800cae4:	682b      	ldr	r3, [r5, #0]
 800cae6:	6826      	ldr	r6, [r4, #0]
 800cae8:	6961      	ldr	r1, [r4, #20]
 800caea:	1d18      	adds	r0, r3, #4
 800caec:	6028      	str	r0, [r5, #0]
 800caee:	0635      	lsls	r5, r6, #24
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	d501      	bpl.n	800caf8 <_printf_i+0x1cc>
 800caf4:	6019      	str	r1, [r3, #0]
 800caf6:	e002      	b.n	800cafe <_printf_i+0x1d2>
 800caf8:	0670      	lsls	r0, r6, #25
 800cafa:	d5fb      	bpl.n	800caf4 <_printf_i+0x1c8>
 800cafc:	8019      	strh	r1, [r3, #0]
 800cafe:	2300      	movs	r3, #0
 800cb00:	6123      	str	r3, [r4, #16]
 800cb02:	4615      	mov	r5, r2
 800cb04:	e7ba      	b.n	800ca7c <_printf_i+0x150>
 800cb06:	682b      	ldr	r3, [r5, #0]
 800cb08:	1d1a      	adds	r2, r3, #4
 800cb0a:	602a      	str	r2, [r5, #0]
 800cb0c:	681d      	ldr	r5, [r3, #0]
 800cb0e:	6862      	ldr	r2, [r4, #4]
 800cb10:	2100      	movs	r1, #0
 800cb12:	4628      	mov	r0, r5
 800cb14:	f7f3 fb6c 	bl	80001f0 <memchr>
 800cb18:	b108      	cbz	r0, 800cb1e <_printf_i+0x1f2>
 800cb1a:	1b40      	subs	r0, r0, r5
 800cb1c:	6060      	str	r0, [r4, #4]
 800cb1e:	6863      	ldr	r3, [r4, #4]
 800cb20:	6123      	str	r3, [r4, #16]
 800cb22:	2300      	movs	r3, #0
 800cb24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb28:	e7a8      	b.n	800ca7c <_printf_i+0x150>
 800cb2a:	6923      	ldr	r3, [r4, #16]
 800cb2c:	462a      	mov	r2, r5
 800cb2e:	4649      	mov	r1, r9
 800cb30:	4640      	mov	r0, r8
 800cb32:	47d0      	blx	sl
 800cb34:	3001      	adds	r0, #1
 800cb36:	d0ab      	beq.n	800ca90 <_printf_i+0x164>
 800cb38:	6823      	ldr	r3, [r4, #0]
 800cb3a:	079b      	lsls	r3, r3, #30
 800cb3c:	d413      	bmi.n	800cb66 <_printf_i+0x23a>
 800cb3e:	68e0      	ldr	r0, [r4, #12]
 800cb40:	9b03      	ldr	r3, [sp, #12]
 800cb42:	4298      	cmp	r0, r3
 800cb44:	bfb8      	it	lt
 800cb46:	4618      	movlt	r0, r3
 800cb48:	e7a4      	b.n	800ca94 <_printf_i+0x168>
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	4632      	mov	r2, r6
 800cb4e:	4649      	mov	r1, r9
 800cb50:	4640      	mov	r0, r8
 800cb52:	47d0      	blx	sl
 800cb54:	3001      	adds	r0, #1
 800cb56:	d09b      	beq.n	800ca90 <_printf_i+0x164>
 800cb58:	3501      	adds	r5, #1
 800cb5a:	68e3      	ldr	r3, [r4, #12]
 800cb5c:	9903      	ldr	r1, [sp, #12]
 800cb5e:	1a5b      	subs	r3, r3, r1
 800cb60:	42ab      	cmp	r3, r5
 800cb62:	dcf2      	bgt.n	800cb4a <_printf_i+0x21e>
 800cb64:	e7eb      	b.n	800cb3e <_printf_i+0x212>
 800cb66:	2500      	movs	r5, #0
 800cb68:	f104 0619 	add.w	r6, r4, #25
 800cb6c:	e7f5      	b.n	800cb5a <_printf_i+0x22e>
 800cb6e:	bf00      	nop
 800cb70:	0800d4c4 	.word	0x0800d4c4
 800cb74:	0800d4d5 	.word	0x0800d4d5

0800cb78 <_scanf_chars>:
 800cb78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb7c:	4615      	mov	r5, r2
 800cb7e:	688a      	ldr	r2, [r1, #8]
 800cb80:	4680      	mov	r8, r0
 800cb82:	460c      	mov	r4, r1
 800cb84:	b932      	cbnz	r2, 800cb94 <_scanf_chars+0x1c>
 800cb86:	698a      	ldr	r2, [r1, #24]
 800cb88:	2a00      	cmp	r2, #0
 800cb8a:	bf0c      	ite	eq
 800cb8c:	2201      	moveq	r2, #1
 800cb8e:	f04f 32ff 	movne.w	r2, #4294967295
 800cb92:	608a      	str	r2, [r1, #8]
 800cb94:	6822      	ldr	r2, [r4, #0]
 800cb96:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800cc28 <_scanf_chars+0xb0>
 800cb9a:	06d1      	lsls	r1, r2, #27
 800cb9c:	bf5f      	itttt	pl
 800cb9e:	681a      	ldrpl	r2, [r3, #0]
 800cba0:	1d11      	addpl	r1, r2, #4
 800cba2:	6019      	strpl	r1, [r3, #0]
 800cba4:	6816      	ldrpl	r6, [r2, #0]
 800cba6:	2700      	movs	r7, #0
 800cba8:	69a0      	ldr	r0, [r4, #24]
 800cbaa:	b188      	cbz	r0, 800cbd0 <_scanf_chars+0x58>
 800cbac:	2801      	cmp	r0, #1
 800cbae:	d107      	bne.n	800cbc0 <_scanf_chars+0x48>
 800cbb0:	682a      	ldr	r2, [r5, #0]
 800cbb2:	7811      	ldrb	r1, [r2, #0]
 800cbb4:	6962      	ldr	r2, [r4, #20]
 800cbb6:	5c52      	ldrb	r2, [r2, r1]
 800cbb8:	b952      	cbnz	r2, 800cbd0 <_scanf_chars+0x58>
 800cbba:	2f00      	cmp	r7, #0
 800cbbc:	d031      	beq.n	800cc22 <_scanf_chars+0xaa>
 800cbbe:	e022      	b.n	800cc06 <_scanf_chars+0x8e>
 800cbc0:	2802      	cmp	r0, #2
 800cbc2:	d120      	bne.n	800cc06 <_scanf_chars+0x8e>
 800cbc4:	682b      	ldr	r3, [r5, #0]
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	f813 3009 	ldrb.w	r3, [r3, r9]
 800cbcc:	071b      	lsls	r3, r3, #28
 800cbce:	d41a      	bmi.n	800cc06 <_scanf_chars+0x8e>
 800cbd0:	6823      	ldr	r3, [r4, #0]
 800cbd2:	06da      	lsls	r2, r3, #27
 800cbd4:	bf5e      	ittt	pl
 800cbd6:	682b      	ldrpl	r3, [r5, #0]
 800cbd8:	781b      	ldrbpl	r3, [r3, #0]
 800cbda:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cbde:	682a      	ldr	r2, [r5, #0]
 800cbe0:	686b      	ldr	r3, [r5, #4]
 800cbe2:	3201      	adds	r2, #1
 800cbe4:	602a      	str	r2, [r5, #0]
 800cbe6:	68a2      	ldr	r2, [r4, #8]
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	3a01      	subs	r2, #1
 800cbec:	606b      	str	r3, [r5, #4]
 800cbee:	3701      	adds	r7, #1
 800cbf0:	60a2      	str	r2, [r4, #8]
 800cbf2:	b142      	cbz	r2, 800cc06 <_scanf_chars+0x8e>
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	dcd7      	bgt.n	800cba8 <_scanf_chars+0x30>
 800cbf8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cbfc:	4629      	mov	r1, r5
 800cbfe:	4640      	mov	r0, r8
 800cc00:	4798      	blx	r3
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d0d0      	beq.n	800cba8 <_scanf_chars+0x30>
 800cc06:	6823      	ldr	r3, [r4, #0]
 800cc08:	f013 0310 	ands.w	r3, r3, #16
 800cc0c:	d105      	bne.n	800cc1a <_scanf_chars+0xa2>
 800cc0e:	68e2      	ldr	r2, [r4, #12]
 800cc10:	3201      	adds	r2, #1
 800cc12:	60e2      	str	r2, [r4, #12]
 800cc14:	69a2      	ldr	r2, [r4, #24]
 800cc16:	b102      	cbz	r2, 800cc1a <_scanf_chars+0xa2>
 800cc18:	7033      	strb	r3, [r6, #0]
 800cc1a:	6923      	ldr	r3, [r4, #16]
 800cc1c:	443b      	add	r3, r7
 800cc1e:	6123      	str	r3, [r4, #16]
 800cc20:	2000      	movs	r0, #0
 800cc22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc26:	bf00      	nop
 800cc28:	0800d3b3 	.word	0x0800d3b3

0800cc2c <_scanf_i>:
 800cc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc30:	4698      	mov	r8, r3
 800cc32:	4b76      	ldr	r3, [pc, #472]	; (800ce0c <_scanf_i+0x1e0>)
 800cc34:	460c      	mov	r4, r1
 800cc36:	4682      	mov	sl, r0
 800cc38:	4616      	mov	r6, r2
 800cc3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc3e:	b087      	sub	sp, #28
 800cc40:	ab03      	add	r3, sp, #12
 800cc42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cc46:	4b72      	ldr	r3, [pc, #456]	; (800ce10 <_scanf_i+0x1e4>)
 800cc48:	69a1      	ldr	r1, [r4, #24]
 800cc4a:	4a72      	ldr	r2, [pc, #456]	; (800ce14 <_scanf_i+0x1e8>)
 800cc4c:	2903      	cmp	r1, #3
 800cc4e:	bf18      	it	ne
 800cc50:	461a      	movne	r2, r3
 800cc52:	68a3      	ldr	r3, [r4, #8]
 800cc54:	9201      	str	r2, [sp, #4]
 800cc56:	1e5a      	subs	r2, r3, #1
 800cc58:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cc5c:	bf88      	it	hi
 800cc5e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cc62:	4627      	mov	r7, r4
 800cc64:	bf82      	ittt	hi
 800cc66:	eb03 0905 	addhi.w	r9, r3, r5
 800cc6a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cc6e:	60a3      	strhi	r3, [r4, #8]
 800cc70:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cc74:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800cc78:	bf98      	it	ls
 800cc7a:	f04f 0900 	movls.w	r9, #0
 800cc7e:	6023      	str	r3, [r4, #0]
 800cc80:	463d      	mov	r5, r7
 800cc82:	f04f 0b00 	mov.w	fp, #0
 800cc86:	6831      	ldr	r1, [r6, #0]
 800cc88:	ab03      	add	r3, sp, #12
 800cc8a:	7809      	ldrb	r1, [r1, #0]
 800cc8c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cc90:	2202      	movs	r2, #2
 800cc92:	f7f3 faad 	bl	80001f0 <memchr>
 800cc96:	b328      	cbz	r0, 800cce4 <_scanf_i+0xb8>
 800cc98:	f1bb 0f01 	cmp.w	fp, #1
 800cc9c:	d159      	bne.n	800cd52 <_scanf_i+0x126>
 800cc9e:	6862      	ldr	r2, [r4, #4]
 800cca0:	b92a      	cbnz	r2, 800ccae <_scanf_i+0x82>
 800cca2:	6822      	ldr	r2, [r4, #0]
 800cca4:	2308      	movs	r3, #8
 800cca6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ccaa:	6063      	str	r3, [r4, #4]
 800ccac:	6022      	str	r2, [r4, #0]
 800ccae:	6822      	ldr	r2, [r4, #0]
 800ccb0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ccb4:	6022      	str	r2, [r4, #0]
 800ccb6:	68a2      	ldr	r2, [r4, #8]
 800ccb8:	1e51      	subs	r1, r2, #1
 800ccba:	60a1      	str	r1, [r4, #8]
 800ccbc:	b192      	cbz	r2, 800cce4 <_scanf_i+0xb8>
 800ccbe:	6832      	ldr	r2, [r6, #0]
 800ccc0:	1c51      	adds	r1, r2, #1
 800ccc2:	6031      	str	r1, [r6, #0]
 800ccc4:	7812      	ldrb	r2, [r2, #0]
 800ccc6:	f805 2b01 	strb.w	r2, [r5], #1
 800ccca:	6872      	ldr	r2, [r6, #4]
 800cccc:	3a01      	subs	r2, #1
 800ccce:	2a00      	cmp	r2, #0
 800ccd0:	6072      	str	r2, [r6, #4]
 800ccd2:	dc07      	bgt.n	800cce4 <_scanf_i+0xb8>
 800ccd4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ccd8:	4631      	mov	r1, r6
 800ccda:	4650      	mov	r0, sl
 800ccdc:	4790      	blx	r2
 800ccde:	2800      	cmp	r0, #0
 800cce0:	f040 8085 	bne.w	800cdee <_scanf_i+0x1c2>
 800cce4:	f10b 0b01 	add.w	fp, fp, #1
 800cce8:	f1bb 0f03 	cmp.w	fp, #3
 800ccec:	d1cb      	bne.n	800cc86 <_scanf_i+0x5a>
 800ccee:	6863      	ldr	r3, [r4, #4]
 800ccf0:	b90b      	cbnz	r3, 800ccf6 <_scanf_i+0xca>
 800ccf2:	230a      	movs	r3, #10
 800ccf4:	6063      	str	r3, [r4, #4]
 800ccf6:	6863      	ldr	r3, [r4, #4]
 800ccf8:	4947      	ldr	r1, [pc, #284]	; (800ce18 <_scanf_i+0x1ec>)
 800ccfa:	6960      	ldr	r0, [r4, #20]
 800ccfc:	1ac9      	subs	r1, r1, r3
 800ccfe:	f000 f88d 	bl	800ce1c <__sccl>
 800cd02:	f04f 0b00 	mov.w	fp, #0
 800cd06:	68a3      	ldr	r3, [r4, #8]
 800cd08:	6822      	ldr	r2, [r4, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d03d      	beq.n	800cd8a <_scanf_i+0x15e>
 800cd0e:	6831      	ldr	r1, [r6, #0]
 800cd10:	6960      	ldr	r0, [r4, #20]
 800cd12:	f891 c000 	ldrb.w	ip, [r1]
 800cd16:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	d035      	beq.n	800cd8a <_scanf_i+0x15e>
 800cd1e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800cd22:	d124      	bne.n	800cd6e <_scanf_i+0x142>
 800cd24:	0510      	lsls	r0, r2, #20
 800cd26:	d522      	bpl.n	800cd6e <_scanf_i+0x142>
 800cd28:	f10b 0b01 	add.w	fp, fp, #1
 800cd2c:	f1b9 0f00 	cmp.w	r9, #0
 800cd30:	d003      	beq.n	800cd3a <_scanf_i+0x10e>
 800cd32:	3301      	adds	r3, #1
 800cd34:	f109 39ff 	add.w	r9, r9, #4294967295
 800cd38:	60a3      	str	r3, [r4, #8]
 800cd3a:	6873      	ldr	r3, [r6, #4]
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	6073      	str	r3, [r6, #4]
 800cd42:	dd1b      	ble.n	800cd7c <_scanf_i+0x150>
 800cd44:	6833      	ldr	r3, [r6, #0]
 800cd46:	3301      	adds	r3, #1
 800cd48:	6033      	str	r3, [r6, #0]
 800cd4a:	68a3      	ldr	r3, [r4, #8]
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	60a3      	str	r3, [r4, #8]
 800cd50:	e7d9      	b.n	800cd06 <_scanf_i+0xda>
 800cd52:	f1bb 0f02 	cmp.w	fp, #2
 800cd56:	d1ae      	bne.n	800ccb6 <_scanf_i+0x8a>
 800cd58:	6822      	ldr	r2, [r4, #0]
 800cd5a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800cd5e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cd62:	d1bf      	bne.n	800cce4 <_scanf_i+0xb8>
 800cd64:	2310      	movs	r3, #16
 800cd66:	6063      	str	r3, [r4, #4]
 800cd68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cd6c:	e7a2      	b.n	800ccb4 <_scanf_i+0x88>
 800cd6e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800cd72:	6022      	str	r2, [r4, #0]
 800cd74:	780b      	ldrb	r3, [r1, #0]
 800cd76:	f805 3b01 	strb.w	r3, [r5], #1
 800cd7a:	e7de      	b.n	800cd3a <_scanf_i+0x10e>
 800cd7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800cd80:	4631      	mov	r1, r6
 800cd82:	4650      	mov	r0, sl
 800cd84:	4798      	blx	r3
 800cd86:	2800      	cmp	r0, #0
 800cd88:	d0df      	beq.n	800cd4a <_scanf_i+0x11e>
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	05db      	lsls	r3, r3, #23
 800cd8e:	d50d      	bpl.n	800cdac <_scanf_i+0x180>
 800cd90:	42bd      	cmp	r5, r7
 800cd92:	d909      	bls.n	800cda8 <_scanf_i+0x17c>
 800cd94:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cd98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cd9c:	4632      	mov	r2, r6
 800cd9e:	4650      	mov	r0, sl
 800cda0:	4798      	blx	r3
 800cda2:	f105 39ff 	add.w	r9, r5, #4294967295
 800cda6:	464d      	mov	r5, r9
 800cda8:	42bd      	cmp	r5, r7
 800cdaa:	d02d      	beq.n	800ce08 <_scanf_i+0x1dc>
 800cdac:	6822      	ldr	r2, [r4, #0]
 800cdae:	f012 0210 	ands.w	r2, r2, #16
 800cdb2:	d113      	bne.n	800cddc <_scanf_i+0x1b0>
 800cdb4:	702a      	strb	r2, [r5, #0]
 800cdb6:	6863      	ldr	r3, [r4, #4]
 800cdb8:	9e01      	ldr	r6, [sp, #4]
 800cdba:	4639      	mov	r1, r7
 800cdbc:	4650      	mov	r0, sl
 800cdbe:	47b0      	blx	r6
 800cdc0:	6821      	ldr	r1, [r4, #0]
 800cdc2:	f8d8 3000 	ldr.w	r3, [r8]
 800cdc6:	f011 0f20 	tst.w	r1, #32
 800cdca:	d013      	beq.n	800cdf4 <_scanf_i+0x1c8>
 800cdcc:	1d1a      	adds	r2, r3, #4
 800cdce:	f8c8 2000 	str.w	r2, [r8]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	6018      	str	r0, [r3, #0]
 800cdd6:	68e3      	ldr	r3, [r4, #12]
 800cdd8:	3301      	adds	r3, #1
 800cdda:	60e3      	str	r3, [r4, #12]
 800cddc:	1bed      	subs	r5, r5, r7
 800cdde:	44ab      	add	fp, r5
 800cde0:	6925      	ldr	r5, [r4, #16]
 800cde2:	445d      	add	r5, fp
 800cde4:	6125      	str	r5, [r4, #16]
 800cde6:	2000      	movs	r0, #0
 800cde8:	b007      	add	sp, #28
 800cdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdee:	f04f 0b00 	mov.w	fp, #0
 800cdf2:	e7ca      	b.n	800cd8a <_scanf_i+0x15e>
 800cdf4:	1d1a      	adds	r2, r3, #4
 800cdf6:	f8c8 2000 	str.w	r2, [r8]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f011 0f01 	tst.w	r1, #1
 800ce00:	bf14      	ite	ne
 800ce02:	8018      	strhne	r0, [r3, #0]
 800ce04:	6018      	streq	r0, [r3, #0]
 800ce06:	e7e6      	b.n	800cdd6 <_scanf_i+0x1aa>
 800ce08:	2001      	movs	r0, #1
 800ce0a:	e7ed      	b.n	800cde8 <_scanf_i+0x1bc>
 800ce0c:	0800d30c 	.word	0x0800d30c
 800ce10:	0800d079 	.word	0x0800d079
 800ce14:	0800cf91 	.word	0x0800cf91
 800ce18:	0800d4ff 	.word	0x0800d4ff

0800ce1c <__sccl>:
 800ce1c:	b570      	push	{r4, r5, r6, lr}
 800ce1e:	780b      	ldrb	r3, [r1, #0]
 800ce20:	4604      	mov	r4, r0
 800ce22:	2b5e      	cmp	r3, #94	; 0x5e
 800ce24:	bf0b      	itete	eq
 800ce26:	784b      	ldrbeq	r3, [r1, #1]
 800ce28:	1c48      	addne	r0, r1, #1
 800ce2a:	1c88      	addeq	r0, r1, #2
 800ce2c:	2200      	movne	r2, #0
 800ce2e:	bf08      	it	eq
 800ce30:	2201      	moveq	r2, #1
 800ce32:	1e61      	subs	r1, r4, #1
 800ce34:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800ce38:	f801 2f01 	strb.w	r2, [r1, #1]!
 800ce3c:	42a9      	cmp	r1, r5
 800ce3e:	d1fb      	bne.n	800ce38 <__sccl+0x1c>
 800ce40:	b90b      	cbnz	r3, 800ce46 <__sccl+0x2a>
 800ce42:	3801      	subs	r0, #1
 800ce44:	bd70      	pop	{r4, r5, r6, pc}
 800ce46:	f082 0201 	eor.w	r2, r2, #1
 800ce4a:	54e2      	strb	r2, [r4, r3]
 800ce4c:	4605      	mov	r5, r0
 800ce4e:	4628      	mov	r0, r5
 800ce50:	f810 1b01 	ldrb.w	r1, [r0], #1
 800ce54:	292d      	cmp	r1, #45	; 0x2d
 800ce56:	d006      	beq.n	800ce66 <__sccl+0x4a>
 800ce58:	295d      	cmp	r1, #93	; 0x5d
 800ce5a:	d0f3      	beq.n	800ce44 <__sccl+0x28>
 800ce5c:	b909      	cbnz	r1, 800ce62 <__sccl+0x46>
 800ce5e:	4628      	mov	r0, r5
 800ce60:	e7f0      	b.n	800ce44 <__sccl+0x28>
 800ce62:	460b      	mov	r3, r1
 800ce64:	e7f1      	b.n	800ce4a <__sccl+0x2e>
 800ce66:	786e      	ldrb	r6, [r5, #1]
 800ce68:	2e5d      	cmp	r6, #93	; 0x5d
 800ce6a:	d0fa      	beq.n	800ce62 <__sccl+0x46>
 800ce6c:	42b3      	cmp	r3, r6
 800ce6e:	dcf8      	bgt.n	800ce62 <__sccl+0x46>
 800ce70:	3502      	adds	r5, #2
 800ce72:	4619      	mov	r1, r3
 800ce74:	3101      	adds	r1, #1
 800ce76:	428e      	cmp	r6, r1
 800ce78:	5462      	strb	r2, [r4, r1]
 800ce7a:	dcfb      	bgt.n	800ce74 <__sccl+0x58>
 800ce7c:	1af1      	subs	r1, r6, r3
 800ce7e:	3901      	subs	r1, #1
 800ce80:	1c58      	adds	r0, r3, #1
 800ce82:	42b3      	cmp	r3, r6
 800ce84:	bfa8      	it	ge
 800ce86:	2100      	movge	r1, #0
 800ce88:	1843      	adds	r3, r0, r1
 800ce8a:	e7e0      	b.n	800ce4e <__sccl+0x32>

0800ce8c <_strtol_l.constprop.0>:
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce92:	d001      	beq.n	800ce98 <_strtol_l.constprop.0+0xc>
 800ce94:	2b24      	cmp	r3, #36	; 0x24
 800ce96:	d906      	bls.n	800cea6 <_strtol_l.constprop.0+0x1a>
 800ce98:	f7fe ffee 	bl	800be78 <__errno>
 800ce9c:	2316      	movs	r3, #22
 800ce9e:	6003      	str	r3, [r0, #0]
 800cea0:	2000      	movs	r0, #0
 800cea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cea6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800cf8c <_strtol_l.constprop.0+0x100>
 800ceaa:	460d      	mov	r5, r1
 800ceac:	462e      	mov	r6, r5
 800ceae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ceb2:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ceb6:	f017 0708 	ands.w	r7, r7, #8
 800ceba:	d1f7      	bne.n	800ceac <_strtol_l.constprop.0+0x20>
 800cebc:	2c2d      	cmp	r4, #45	; 0x2d
 800cebe:	d132      	bne.n	800cf26 <_strtol_l.constprop.0+0x9a>
 800cec0:	782c      	ldrb	r4, [r5, #0]
 800cec2:	2701      	movs	r7, #1
 800cec4:	1cb5      	adds	r5, r6, #2
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d05b      	beq.n	800cf82 <_strtol_l.constprop.0+0xf6>
 800ceca:	2b10      	cmp	r3, #16
 800cecc:	d109      	bne.n	800cee2 <_strtol_l.constprop.0+0x56>
 800cece:	2c30      	cmp	r4, #48	; 0x30
 800ced0:	d107      	bne.n	800cee2 <_strtol_l.constprop.0+0x56>
 800ced2:	782c      	ldrb	r4, [r5, #0]
 800ced4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ced8:	2c58      	cmp	r4, #88	; 0x58
 800ceda:	d14d      	bne.n	800cf78 <_strtol_l.constprop.0+0xec>
 800cedc:	786c      	ldrb	r4, [r5, #1]
 800cede:	2310      	movs	r3, #16
 800cee0:	3502      	adds	r5, #2
 800cee2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cee6:	f108 38ff 	add.w	r8, r8, #4294967295
 800ceea:	f04f 0c00 	mov.w	ip, #0
 800ceee:	fbb8 f9f3 	udiv	r9, r8, r3
 800cef2:	4666      	mov	r6, ip
 800cef4:	fb03 8a19 	mls	sl, r3, r9, r8
 800cef8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cefc:	f1be 0f09 	cmp.w	lr, #9
 800cf00:	d816      	bhi.n	800cf30 <_strtol_l.constprop.0+0xa4>
 800cf02:	4674      	mov	r4, lr
 800cf04:	42a3      	cmp	r3, r4
 800cf06:	dd24      	ble.n	800cf52 <_strtol_l.constprop.0+0xc6>
 800cf08:	f1bc 0f00 	cmp.w	ip, #0
 800cf0c:	db1e      	blt.n	800cf4c <_strtol_l.constprop.0+0xc0>
 800cf0e:	45b1      	cmp	r9, r6
 800cf10:	d31c      	bcc.n	800cf4c <_strtol_l.constprop.0+0xc0>
 800cf12:	d101      	bne.n	800cf18 <_strtol_l.constprop.0+0x8c>
 800cf14:	45a2      	cmp	sl, r4
 800cf16:	db19      	blt.n	800cf4c <_strtol_l.constprop.0+0xc0>
 800cf18:	fb06 4603 	mla	r6, r6, r3, r4
 800cf1c:	f04f 0c01 	mov.w	ip, #1
 800cf20:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf24:	e7e8      	b.n	800cef8 <_strtol_l.constprop.0+0x6c>
 800cf26:	2c2b      	cmp	r4, #43	; 0x2b
 800cf28:	bf04      	itt	eq
 800cf2a:	782c      	ldrbeq	r4, [r5, #0]
 800cf2c:	1cb5      	addeq	r5, r6, #2
 800cf2e:	e7ca      	b.n	800cec6 <_strtol_l.constprop.0+0x3a>
 800cf30:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cf34:	f1be 0f19 	cmp.w	lr, #25
 800cf38:	d801      	bhi.n	800cf3e <_strtol_l.constprop.0+0xb2>
 800cf3a:	3c37      	subs	r4, #55	; 0x37
 800cf3c:	e7e2      	b.n	800cf04 <_strtol_l.constprop.0+0x78>
 800cf3e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cf42:	f1be 0f19 	cmp.w	lr, #25
 800cf46:	d804      	bhi.n	800cf52 <_strtol_l.constprop.0+0xc6>
 800cf48:	3c57      	subs	r4, #87	; 0x57
 800cf4a:	e7db      	b.n	800cf04 <_strtol_l.constprop.0+0x78>
 800cf4c:	f04f 3cff 	mov.w	ip, #4294967295
 800cf50:	e7e6      	b.n	800cf20 <_strtol_l.constprop.0+0x94>
 800cf52:	f1bc 0f00 	cmp.w	ip, #0
 800cf56:	da05      	bge.n	800cf64 <_strtol_l.constprop.0+0xd8>
 800cf58:	2322      	movs	r3, #34	; 0x22
 800cf5a:	6003      	str	r3, [r0, #0]
 800cf5c:	4646      	mov	r6, r8
 800cf5e:	b942      	cbnz	r2, 800cf72 <_strtol_l.constprop.0+0xe6>
 800cf60:	4630      	mov	r0, r6
 800cf62:	e79e      	b.n	800cea2 <_strtol_l.constprop.0+0x16>
 800cf64:	b107      	cbz	r7, 800cf68 <_strtol_l.constprop.0+0xdc>
 800cf66:	4276      	negs	r6, r6
 800cf68:	2a00      	cmp	r2, #0
 800cf6a:	d0f9      	beq.n	800cf60 <_strtol_l.constprop.0+0xd4>
 800cf6c:	f1bc 0f00 	cmp.w	ip, #0
 800cf70:	d000      	beq.n	800cf74 <_strtol_l.constprop.0+0xe8>
 800cf72:	1e69      	subs	r1, r5, #1
 800cf74:	6011      	str	r1, [r2, #0]
 800cf76:	e7f3      	b.n	800cf60 <_strtol_l.constprop.0+0xd4>
 800cf78:	2430      	movs	r4, #48	; 0x30
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d1b1      	bne.n	800cee2 <_strtol_l.constprop.0+0x56>
 800cf7e:	2308      	movs	r3, #8
 800cf80:	e7af      	b.n	800cee2 <_strtol_l.constprop.0+0x56>
 800cf82:	2c30      	cmp	r4, #48	; 0x30
 800cf84:	d0a5      	beq.n	800ced2 <_strtol_l.constprop.0+0x46>
 800cf86:	230a      	movs	r3, #10
 800cf88:	e7ab      	b.n	800cee2 <_strtol_l.constprop.0+0x56>
 800cf8a:	bf00      	nop
 800cf8c:	0800d3b3 	.word	0x0800d3b3

0800cf90 <_strtol_r>:
 800cf90:	f7ff bf7c 	b.w	800ce8c <_strtol_l.constprop.0>

0800cf94 <_strtoul_l.constprop.0>:
 800cf94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf98:	4f36      	ldr	r7, [pc, #216]	; (800d074 <_strtoul_l.constprop.0+0xe0>)
 800cf9a:	4686      	mov	lr, r0
 800cf9c:	460d      	mov	r5, r1
 800cf9e:	4628      	mov	r0, r5
 800cfa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cfa4:	5de6      	ldrb	r6, [r4, r7]
 800cfa6:	f016 0608 	ands.w	r6, r6, #8
 800cfaa:	d1f8      	bne.n	800cf9e <_strtoul_l.constprop.0+0xa>
 800cfac:	2c2d      	cmp	r4, #45	; 0x2d
 800cfae:	d12f      	bne.n	800d010 <_strtoul_l.constprop.0+0x7c>
 800cfb0:	782c      	ldrb	r4, [r5, #0]
 800cfb2:	2601      	movs	r6, #1
 800cfb4:	1c85      	adds	r5, r0, #2
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d057      	beq.n	800d06a <_strtoul_l.constprop.0+0xd6>
 800cfba:	2b10      	cmp	r3, #16
 800cfbc:	d109      	bne.n	800cfd2 <_strtoul_l.constprop.0+0x3e>
 800cfbe:	2c30      	cmp	r4, #48	; 0x30
 800cfc0:	d107      	bne.n	800cfd2 <_strtoul_l.constprop.0+0x3e>
 800cfc2:	7828      	ldrb	r0, [r5, #0]
 800cfc4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cfc8:	2858      	cmp	r0, #88	; 0x58
 800cfca:	d149      	bne.n	800d060 <_strtoul_l.constprop.0+0xcc>
 800cfcc:	786c      	ldrb	r4, [r5, #1]
 800cfce:	2310      	movs	r3, #16
 800cfd0:	3502      	adds	r5, #2
 800cfd2:	f04f 38ff 	mov.w	r8, #4294967295
 800cfd6:	2700      	movs	r7, #0
 800cfd8:	fbb8 f8f3 	udiv	r8, r8, r3
 800cfdc:	fb03 f908 	mul.w	r9, r3, r8
 800cfe0:	ea6f 0909 	mvn.w	r9, r9
 800cfe4:	4638      	mov	r0, r7
 800cfe6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cfea:	f1bc 0f09 	cmp.w	ip, #9
 800cfee:	d814      	bhi.n	800d01a <_strtoul_l.constprop.0+0x86>
 800cff0:	4664      	mov	r4, ip
 800cff2:	42a3      	cmp	r3, r4
 800cff4:	dd22      	ble.n	800d03c <_strtoul_l.constprop.0+0xa8>
 800cff6:	2f00      	cmp	r7, #0
 800cff8:	db1d      	blt.n	800d036 <_strtoul_l.constprop.0+0xa2>
 800cffa:	4580      	cmp	r8, r0
 800cffc:	d31b      	bcc.n	800d036 <_strtoul_l.constprop.0+0xa2>
 800cffe:	d101      	bne.n	800d004 <_strtoul_l.constprop.0+0x70>
 800d000:	45a1      	cmp	r9, r4
 800d002:	db18      	blt.n	800d036 <_strtoul_l.constprop.0+0xa2>
 800d004:	fb00 4003 	mla	r0, r0, r3, r4
 800d008:	2701      	movs	r7, #1
 800d00a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d00e:	e7ea      	b.n	800cfe6 <_strtoul_l.constprop.0+0x52>
 800d010:	2c2b      	cmp	r4, #43	; 0x2b
 800d012:	bf04      	itt	eq
 800d014:	782c      	ldrbeq	r4, [r5, #0]
 800d016:	1c85      	addeq	r5, r0, #2
 800d018:	e7cd      	b.n	800cfb6 <_strtoul_l.constprop.0+0x22>
 800d01a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d01e:	f1bc 0f19 	cmp.w	ip, #25
 800d022:	d801      	bhi.n	800d028 <_strtoul_l.constprop.0+0x94>
 800d024:	3c37      	subs	r4, #55	; 0x37
 800d026:	e7e4      	b.n	800cff2 <_strtoul_l.constprop.0+0x5e>
 800d028:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d02c:	f1bc 0f19 	cmp.w	ip, #25
 800d030:	d804      	bhi.n	800d03c <_strtoul_l.constprop.0+0xa8>
 800d032:	3c57      	subs	r4, #87	; 0x57
 800d034:	e7dd      	b.n	800cff2 <_strtoul_l.constprop.0+0x5e>
 800d036:	f04f 37ff 	mov.w	r7, #4294967295
 800d03a:	e7e6      	b.n	800d00a <_strtoul_l.constprop.0+0x76>
 800d03c:	2f00      	cmp	r7, #0
 800d03e:	da07      	bge.n	800d050 <_strtoul_l.constprop.0+0xbc>
 800d040:	2322      	movs	r3, #34	; 0x22
 800d042:	f8ce 3000 	str.w	r3, [lr]
 800d046:	f04f 30ff 	mov.w	r0, #4294967295
 800d04a:	b932      	cbnz	r2, 800d05a <_strtoul_l.constprop.0+0xc6>
 800d04c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d050:	b106      	cbz	r6, 800d054 <_strtoul_l.constprop.0+0xc0>
 800d052:	4240      	negs	r0, r0
 800d054:	2a00      	cmp	r2, #0
 800d056:	d0f9      	beq.n	800d04c <_strtoul_l.constprop.0+0xb8>
 800d058:	b107      	cbz	r7, 800d05c <_strtoul_l.constprop.0+0xc8>
 800d05a:	1e69      	subs	r1, r5, #1
 800d05c:	6011      	str	r1, [r2, #0]
 800d05e:	e7f5      	b.n	800d04c <_strtoul_l.constprop.0+0xb8>
 800d060:	2430      	movs	r4, #48	; 0x30
 800d062:	2b00      	cmp	r3, #0
 800d064:	d1b5      	bne.n	800cfd2 <_strtoul_l.constprop.0+0x3e>
 800d066:	2308      	movs	r3, #8
 800d068:	e7b3      	b.n	800cfd2 <_strtoul_l.constprop.0+0x3e>
 800d06a:	2c30      	cmp	r4, #48	; 0x30
 800d06c:	d0a9      	beq.n	800cfc2 <_strtoul_l.constprop.0+0x2e>
 800d06e:	230a      	movs	r3, #10
 800d070:	e7af      	b.n	800cfd2 <_strtoul_l.constprop.0+0x3e>
 800d072:	bf00      	nop
 800d074:	0800d3b3 	.word	0x0800d3b3

0800d078 <_strtoul_r>:
 800d078:	f7ff bf8c 	b.w	800cf94 <_strtoul_l.constprop.0>

0800d07c <__submore>:
 800d07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d080:	460c      	mov	r4, r1
 800d082:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d088:	4299      	cmp	r1, r3
 800d08a:	d11d      	bne.n	800d0c8 <__submore+0x4c>
 800d08c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d090:	f7fe ff9e 	bl	800bfd0 <_malloc_r>
 800d094:	b918      	cbnz	r0, 800d09e <__submore+0x22>
 800d096:	f04f 30ff 	mov.w	r0, #4294967295
 800d09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d09e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d0a2:	63a3      	str	r3, [r4, #56]	; 0x38
 800d0a4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800d0a8:	6360      	str	r0, [r4, #52]	; 0x34
 800d0aa:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800d0ae:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800d0b2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800d0b6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d0ba:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800d0be:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800d0c2:	6020      	str	r0, [r4, #0]
 800d0c4:	2000      	movs	r0, #0
 800d0c6:	e7e8      	b.n	800d09a <__submore+0x1e>
 800d0c8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800d0ca:	0077      	lsls	r7, r6, #1
 800d0cc:	463a      	mov	r2, r7
 800d0ce:	f000 f829 	bl	800d124 <_realloc_r>
 800d0d2:	4605      	mov	r5, r0
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	d0de      	beq.n	800d096 <__submore+0x1a>
 800d0d8:	eb00 0806 	add.w	r8, r0, r6
 800d0dc:	4601      	mov	r1, r0
 800d0de:	4632      	mov	r2, r6
 800d0e0:	4640      	mov	r0, r8
 800d0e2:	f7fe fef3 	bl	800becc <memcpy>
 800d0e6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800d0ea:	f8c4 8000 	str.w	r8, [r4]
 800d0ee:	e7e9      	b.n	800d0c4 <__submore+0x48>

0800d0f0 <memmove>:
 800d0f0:	4288      	cmp	r0, r1
 800d0f2:	b510      	push	{r4, lr}
 800d0f4:	eb01 0402 	add.w	r4, r1, r2
 800d0f8:	d902      	bls.n	800d100 <memmove+0x10>
 800d0fa:	4284      	cmp	r4, r0
 800d0fc:	4623      	mov	r3, r4
 800d0fe:	d807      	bhi.n	800d110 <memmove+0x20>
 800d100:	1e43      	subs	r3, r0, #1
 800d102:	42a1      	cmp	r1, r4
 800d104:	d008      	beq.n	800d118 <memmove+0x28>
 800d106:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d10a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d10e:	e7f8      	b.n	800d102 <memmove+0x12>
 800d110:	4402      	add	r2, r0
 800d112:	4601      	mov	r1, r0
 800d114:	428a      	cmp	r2, r1
 800d116:	d100      	bne.n	800d11a <memmove+0x2a>
 800d118:	bd10      	pop	{r4, pc}
 800d11a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d11e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d122:	e7f7      	b.n	800d114 <memmove+0x24>

0800d124 <_realloc_r>:
 800d124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d128:	4680      	mov	r8, r0
 800d12a:	4614      	mov	r4, r2
 800d12c:	460e      	mov	r6, r1
 800d12e:	b921      	cbnz	r1, 800d13a <_realloc_r+0x16>
 800d130:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d134:	4611      	mov	r1, r2
 800d136:	f7fe bf4b 	b.w	800bfd0 <_malloc_r>
 800d13a:	b92a      	cbnz	r2, 800d148 <_realloc_r+0x24>
 800d13c:	f7fe fedc 	bl	800bef8 <_free_r>
 800d140:	4625      	mov	r5, r4
 800d142:	4628      	mov	r0, r5
 800d144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d148:	f000 f81b 	bl	800d182 <_malloc_usable_size_r>
 800d14c:	4284      	cmp	r4, r0
 800d14e:	4607      	mov	r7, r0
 800d150:	d802      	bhi.n	800d158 <_realloc_r+0x34>
 800d152:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d156:	d812      	bhi.n	800d17e <_realloc_r+0x5a>
 800d158:	4621      	mov	r1, r4
 800d15a:	4640      	mov	r0, r8
 800d15c:	f7fe ff38 	bl	800bfd0 <_malloc_r>
 800d160:	4605      	mov	r5, r0
 800d162:	2800      	cmp	r0, #0
 800d164:	d0ed      	beq.n	800d142 <_realloc_r+0x1e>
 800d166:	42bc      	cmp	r4, r7
 800d168:	4622      	mov	r2, r4
 800d16a:	4631      	mov	r1, r6
 800d16c:	bf28      	it	cs
 800d16e:	463a      	movcs	r2, r7
 800d170:	f7fe feac 	bl	800becc <memcpy>
 800d174:	4631      	mov	r1, r6
 800d176:	4640      	mov	r0, r8
 800d178:	f7fe febe 	bl	800bef8 <_free_r>
 800d17c:	e7e1      	b.n	800d142 <_realloc_r+0x1e>
 800d17e:	4635      	mov	r5, r6
 800d180:	e7df      	b.n	800d142 <_realloc_r+0x1e>

0800d182 <_malloc_usable_size_r>:
 800d182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d186:	1f18      	subs	r0, r3, #4
 800d188:	2b00      	cmp	r3, #0
 800d18a:	bfbc      	itt	lt
 800d18c:	580b      	ldrlt	r3, [r1, r0]
 800d18e:	18c0      	addlt	r0, r0, r3
 800d190:	4770      	bx	lr
	...

0800d194 <_init>:
 800d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d196:	bf00      	nop
 800d198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d19a:	bc08      	pop	{r3}
 800d19c:	469e      	mov	lr, r3
 800d19e:	4770      	bx	lr

0800d1a0 <_fini>:
 800d1a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1a2:	bf00      	nop
 800d1a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1a6:	bc08      	pop	{r3}
 800d1a8:	469e      	mov	lr, r3
 800d1aa:	4770      	bx	lr
